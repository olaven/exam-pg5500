
/Users/olav/Documents/skole/kristiania/5_semester/embedded_systems/eksamen/particle/target/1.4.4/photon/particle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000048b4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a48d0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a48d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005cc  2000006c  2000006c  0004006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4940  080a4940  00034940  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4968  080a4968  00034968  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bcfae  00000000  00000000  0003496c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001136f  00000000  00000000  000f191a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015405  00000000  00000000  00102c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002280  00000000  00000000  0011808e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000034f8  00000000  00000000  0011a30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027f77  00000000  00000000  0011d806  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028728  00000000  00000000  0014577d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a6d11  00000000  00000000  0016dea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bf2c  00000000  00000000  00214bb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f809 	bl	80a2044 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f80e 	bl	80a205a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a48d4 	.word	0x080a48d4
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000638 	.word	0x20000638
 80a0058:	20000638 	.word	0x20000638

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fda7 	bl	80a1bb0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a488c 	.word	0x080a488c
 80a0084:	080a48cc 	.word	0x080a48cc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b860 	b.w	80a014c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8e3 	bl	80a0258 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bd4d 	b.w	80a1b34 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bfb1 	b.w	80a1000 <free>
	...

080a00a0 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a2:	4a03      	ldr	r2, [pc, #12]	; (80a00b0 <__cxa_pure_virtual+0x10>)
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
 80a00a8:	f000 ff16 	bl	80a0ed8 <panic_>
 80a00ac:	e7fe      	b.n	80a00ac <__cxa_pure_virtual+0xc>
 80a00ae:	bf00      	nop
 80a00b0:	080a0c35 	.word	0x080a0c35

080a00b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b4:	7800      	ldrb	r0, [r0, #0]
 80a00b6:	fab0 f080 	clz	r0, r0
 80a00ba:	0940      	lsrs	r0, r0, #5
 80a00bc:	4770      	bx	lr

080a00be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00be:	2301      	movs	r3, #1
 80a00c0:	7003      	strb	r3, [r0, #0]
 80a00c2:	4770      	bx	lr

080a00c4 <_ZN15Adafruit_ST7735D1Ev>:
#define ST7735_MAGENTA 0xF81F
#define ST7735_YELLOW  0xFFE0  
#define ST7735_WHITE   0xFFFF


class Adafruit_ST7735 : public Adafruit_GFX {
 80a00c4:	4770      	bx	lr
	...

080a00c8 <_Z4gong6String>:
  pinMode(D5, OUTPUT);
  digitalWrite(D5, HIGH);
}

int gong(String command) // when "gong" is called from the cloud, it will
{                        // be accompanied by a string.
 80a00c8:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a00ca:	491d      	ldr	r1, [pc, #116]	; (80a0140 <_Z4gong6String+0x78>)
 80a00cc:	4604      	mov	r4, r0
 80a00ce:	f001 fb22 	bl	80a1716 <_ZNK6String6equalsEPKc>
  if (command == "now")  // if the string is "now", ring the gong once.
 80a00d2:	b1a0      	cbz	r0, 80a00fe <_Z4gong6String+0x36>
  {
    myservo.write(0);       // move servo to 0° - ding!
 80a00d4:	2100      	movs	r1, #0
 80a00d6:	481b      	ldr	r0, [pc, #108]	; (80a0144 <_Z4gong6String+0x7c>)
 80a00d8:	f001 f9b3 	bl	80a1442 <_ZN5Servo5writeEi>
    digitalWrite(D7, HIGH); // flash the LED (as an indicator)
 80a00dc:	2101      	movs	r1, #1
 80a00de:	2007      	movs	r0, #7
 80a00e0:	f001 fdc7 	bl	80a1c72 <digitalWrite>
    delay(100);             // wait 100 ms
 80a00e4:	2064      	movs	r0, #100	; 0x64
 80a00e6:	f000 ffa7 	bl	80a1038 <delay>
    myservo.write(25);      // move servo to 25°
 80a00ea:	2119      	movs	r1, #25
 80a00ec:	4815      	ldr	r0, [pc, #84]	; (80a0144 <_Z4gong6String+0x7c>)
 80a00ee:	f001 f9a8 	bl	80a1442 <_ZN5Servo5writeEi>
    digitalWrite(D7, LOW);  // turn off LED
 80a00f2:	2100      	movs	r1, #0
 80a00f4:	2007      	movs	r0, #7
 80a00f6:	f001 fdbc 	bl	80a1c72 <digitalWrite>
    return 1;               // return a status of "1"
 80a00fa:	2001      	movs	r0, #1
 80a00fc:	bd10      	pop	{r4, pc}
 80a00fe:	4912      	ldr	r1, [pc, #72]	; (80a0148 <_Z4gong6String+0x80>)
 80a0100:	4620      	mov	r0, r4
 80a0102:	f001 fb08 	bl	80a1716 <_ZNK6String6equalsEPKc>
  }
  else if (command == "alarm") // if the string is "alarm",
 80a0106:	b1d0      	cbz	r0, 80a013e <_Z4gong6String+0x76>
 80a0108:	2403      	movs	r4, #3
  {
    for (int i = 0; i < 3; i++) // ring the gong 3 times.
    {
      myservo.write(0);       // move servo to 0° - ding!
 80a010a:	2100      	movs	r1, #0
 80a010c:	480d      	ldr	r0, [pc, #52]	; (80a0144 <_Z4gong6String+0x7c>)
 80a010e:	f001 f998 	bl	80a1442 <_ZN5Servo5writeEi>
      digitalWrite(D7, HIGH); // flash the LED
 80a0112:	2101      	movs	r1, #1
 80a0114:	2007      	movs	r0, #7
 80a0116:	f001 fdac 	bl	80a1c72 <digitalWrite>
      delay(100);             // wait 100 ms
 80a011a:	2064      	movs	r0, #100	; 0x64
 80a011c:	f000 ff8c 	bl	80a1038 <delay>
      myservo.write(25);      // move servo to 25°
 80a0120:	2119      	movs	r1, #25
 80a0122:	4808      	ldr	r0, [pc, #32]	; (80a0144 <_Z4gong6String+0x7c>)
 80a0124:	f001 f98d 	bl	80a1442 <_ZN5Servo5writeEi>
      digitalWrite(D7, LOW);  // turn off LED
 80a0128:	2100      	movs	r1, #0
 80a012a:	2007      	movs	r0, #7
 80a012c:	f001 fda1 	bl	80a1c72 <digitalWrite>
      delay(1000);            // wait 1 second between gongs
 80a0130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0134:	f000 ff80 	bl	80a1038 <delay>
    digitalWrite(D7, LOW);  // turn off LED
    return 1;               // return a status of "1"
  }
  else if (command == "alarm") // if the string is "alarm",
  {
    for (int i = 0; i < 3; i++) // ring the gong 3 times.
 80a0138:	3c01      	subs	r4, #1
 80a013a:	d1e6      	bne.n	80a010a <_Z4gong6String+0x42>
 80a013c:	2002      	movs	r0, #2
    }
    return 2; // return a status of "2"
  }

  return 0;
}
 80a013e:	bd10      	pop	{r4, pc}
 80a0140:	080a20f4 	.word	0x080a20f4
 80a0144:	20000070 	.word	0x20000070
 80a0148:	080a20f8 	.word	0x080a20f8

080a014c <setup>:

int photosensor = A1;
int sensor_value;

void setup()
{
 80a014c:	b573      	push	{r0, r1, r4, r5, r6, lr}

  tft.initG();
 80a014e:	4c3c      	ldr	r4, [pc, #240]	; (80a0240 <setup+0xf4>)
  tft.setCursor(0, 0);
  tft.setTextColor(ST7735_WHITE);
  tft.setTextWrap(true);
  tft.print("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla");

  tft.drawLine(0, 0, tft.width() - 1, tft.height() - 1, ST7735_YELLOW);
 80a0150:	f64f 76e0 	movw	r6, #65504	; 0xffe0
int sensor_value;

void setup()
{

  tft.initG();
 80a0154:	4620      	mov	r0, r4
 80a0156:	f000 f9d1 	bl	80a04fc <_ZN15Adafruit_ST77355initGEv>

  tft.fillScreen(ST7735_BLACK);
 80a015a:	4620      	mov	r0, r4
 80a015c:	2100      	movs	r1, #0
 80a015e:	f000 f8db 	bl	80a0318 <_ZN15Adafruit_ST773510fillScreenEt>

  tft.setCursor(0, 0);
 80a0162:	2200      	movs	r2, #0
 80a0164:	4611      	mov	r1, r2
 80a0166:	4620      	mov	r0, r4
 80a0168:	f000 fd40 	bl	80a0bec <_ZN12Adafruit_GFX9setCursorEss>
  tft.setTextColor(ST7735_WHITE);
 80a016c:	4620      	mov	r0, r4
 80a016e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a0172:	f000 fd3e 	bl	80a0bf2 <_ZN12Adafruit_GFX12setTextColorEt>
  tft.setTextWrap(true);
 80a0176:	4620      	mov	r0, r4
 80a0178:	2101      	movs	r1, #1
 80a017a:	f000 fd3d 	bl	80a0bf8 <_ZN12Adafruit_GFX11setTextWrapEb>
  tft.print("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla");
 80a017e:	4931      	ldr	r1, [pc, #196]	; (80a0244 <setup+0xf8>)
 80a0180:	4620      	mov	r0, r4
 80a0182:	f001 f8cd 	bl	80a1320 <_ZN5Print5printEPKc>

  tft.drawLine(0, 0, tft.width() - 1, tft.height() - 1, ST7735_YELLOW);
 80a0186:	4620      	mov	r0, r4
 80a0188:	f000 fd39 	bl	80a0bfe <_ZN12Adafruit_GFX5widthEv>
 80a018c:	4605      	mov	r5, r0
 80a018e:	4620      	mov	r0, r4
 80a0190:	f000 fd38 	bl	80a0c04 <_ZN12Adafruit_GFX6heightEv>
 80a0194:	3801      	subs	r0, #1
 80a0196:	2200      	movs	r2, #0
 80a0198:	1e6b      	subs	r3, r5, #1
 80a019a:	b200      	sxth	r0, r0
 80a019c:	4611      	mov	r1, r2
 80a019e:	b21b      	sxth	r3, r3
 80a01a0:	9000      	str	r0, [sp, #0]
 80a01a2:	9601      	str	r6, [sp, #4]
 80a01a4:	4620      	mov	r0, r4
 80a01a6:	f000 faf1 	bl	80a078c <_ZN12Adafruit_GFX8drawLineEsssst>
  tft.drawLine(tft.width() - 1, 0, 0, tft.height() - 1, ST7735_YELLOW);
 80a01aa:	4620      	mov	r0, r4
 80a01ac:	f000 fd27 	bl	80a0bfe <_ZN12Adafruit_GFX5widthEv>
 80a01b0:	4605      	mov	r5, r0
 80a01b2:	4620      	mov	r0, r4
 80a01b4:	f000 fd26 	bl	80a0c04 <_ZN12Adafruit_GFX6heightEv>
 80a01b8:	3801      	subs	r0, #1
 80a01ba:	2300      	movs	r3, #0
 80a01bc:	1e69      	subs	r1, r5, #1
 80a01be:	b200      	sxth	r0, r0
 80a01c0:	461a      	mov	r2, r3
 80a01c2:	9000      	str	r0, [sp, #0]
 80a01c4:	b209      	sxth	r1, r1
 80a01c6:	4620      	mov	r0, r4
 80a01c8:	9601      	str	r6, [sp, #4]
 80a01ca:	f000 fadf 	bl	80a078c <_ZN12Adafruit_GFX8drawLineEsssst>

  tft.drawPixel(0, tft.height() / 2, ST7735_GREEN);
 80a01ce:	4620      	mov	r0, r4
 80a01d0:	f000 fd18 	bl	80a0c04 <_ZN12Adafruit_GFX6heightEv>
 80a01d4:	2202      	movs	r2, #2
 80a01d6:	fb90 f2f2 	sdiv	r2, r0, r2
 80a01da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80a01de:	b212      	sxth	r2, r2
 80a01e0:	2100      	movs	r1, #0
 80a01e2:	4620      	mov	r0, r4
 80a01e4:	f000 fa9e 	bl	80a0724 <_ZN15Adafruit_ST77359drawPixelEsst>

  Serial.begin(9600);
 80a01e8:	f001 fbb0 	bl	80a194c <_Z16_fetch_usbserialv>
 80a01ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01f0:	f001 fb92 	bl	80a1918 <_ZN9USBSerial5beginEl>
  Particle.function("gong", gong);
  myservo.attach(D1);
 80a01f4:	4c14      	ldr	r4, [pc, #80]	; (80a0248 <setup+0xfc>)
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a01f6:	4a15      	ldr	r2, [pc, #84]	; (80a024c <setup+0x100>)
 80a01f8:	4915      	ldr	r1, [pc, #84]	; (80a0250 <setup+0x104>)
 80a01fa:	4816      	ldr	r0, [pc, #88]	; (80a0254 <setup+0x108>)
 80a01fc:	f000 ff3e 	bl	80a107c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0200:	2200      	movs	r2, #0
 80a0202:	23b4      	movs	r3, #180	; 0xb4
 80a0204:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0208:	2101      	movs	r1, #1
 80a020a:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a020e:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0212:	4620      	mov	r0, r4
 80a0214:	f001 f954 	bl	80a14c0 <_ZN5Servo6attachEtttss>
  myservo.write(25);
 80a0218:	4620      	mov	r0, r4
 80a021a:	2119      	movs	r1, #25
 80a021c:	f001 f911 	bl	80a1442 <_ZN5Servo5writeEi>
  pinMode(D7, OUTPUT);
 80a0220:	2101      	movs	r1, #1
 80a0222:	2007      	movs	r0, #7
 80a0224:	f001 fd14 	bl	80a1c50 <pinMode>

  pinMode(D5, OUTPUT);
 80a0228:	2101      	movs	r1, #1
 80a022a:	2005      	movs	r0, #5
 80a022c:	f001 fd10 	bl	80a1c50 <pinMode>
  digitalWrite(D5, HIGH);
 80a0230:	2101      	movs	r1, #1
 80a0232:	2005      	movs	r0, #5
}
 80a0234:	b002      	add	sp, #8
 80a0236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  myservo.attach(D1);
  myservo.write(25);
  pinMode(D7, OUTPUT);

  pinMode(D5, OUTPUT);
  digitalWrite(D5, HIGH);
 80a023a:	f001 bd1a 	b.w	80a1c72 <digitalWrite>
 80a023e:	bf00      	nop
 80a0240:	20000080 	.word	0x20000080
 80a0244:	080a20fe 	.word	0x080a20fe
 80a0248:	20000070 	.word	0x20000070
 80a024c:	080a218c 	.word	0x080a218c
 80a0250:	080a00c9 	.word	0x080a00c9
 80a0254:	080a1051 	.word	0x080a1051

080a0258 <loop>:
  return 0;
}

void loop()

{
 80a0258:	b537      	push	{r0, r1, r2, r4, r5, lr}

  int sensorValue = analogRead(photosensor);
 80a025a:	4b19      	ldr	r3, [pc, #100]	; (80a02c0 <loop+0x68>)
 80a025c:	8818      	ldrh	r0, [r3, #0]
 80a025e:	f001 fd21 	bl	80a1ca4 <analogRead>

  if (sensorValue < 100)
 80a0262:	2863      	cmp	r0, #99	; 0x63

void loop()

{

  int sensorValue = analogRead(photosensor);
 80a0264:	4604      	mov	r4, r0

  if (sensorValue < 100)
 80a0266:	dc01      	bgt.n	80a026c <loop+0x14>
  {
    myservo.write(0);
 80a0268:	2100      	movs	r1, #0
 80a026a:	e014      	b.n	80a0296 <loop+0x3e>
  }
  else
  {
    int pos = map(sensorValue, 100, 1600, 0, 127);
 80a026c:	237f      	movs	r3, #127	; 0x7f
 80a026e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80a0272:	2164      	movs	r1, #100	; 0x64
 80a0274:	9300      	str	r3, [sp, #0]
 80a0276:	2300      	movs	r3, #0
 80a0278:	f000 fed2 	bl	80a1020 <_Z3mapiiiii>
 80a027c:	4605      	mov	r5, r0
    Serial.print("pos");
 80a027e:	f001 fb65 	bl	80a194c <_Z16_fetch_usbserialv>
 80a0282:	4910      	ldr	r1, [pc, #64]	; (80a02c4 <loop+0x6c>)
 80a0284:	f001 f84c 	bl	80a1320 <_ZN5Print5printEPKc>
    Serial.println(pos);
 80a0288:	f001 fb60 	bl	80a194c <_Z16_fetch_usbserialv>
 80a028c:	4629      	mov	r1, r5
 80a028e:	220a      	movs	r2, #10
 80a0290:	f001 f8a7 	bl	80a13e2 <_ZN5Print7printlnEii>
    myservo.write(pos);
 80a0294:	4629      	mov	r1, r5
 80a0296:	480c      	ldr	r0, [pc, #48]	; (80a02c8 <loop+0x70>)
 80a0298:	f001 f8d3 	bl	80a1442 <_ZN5Servo5writeEi>
  }
  delay(50);
 80a029c:	2032      	movs	r0, #50	; 0x32
 80a029e:	f000 fecb 	bl	80a1038 <delay>
  Serial.print("Sensor value: ");
 80a02a2:	f001 fb53 	bl	80a194c <_Z16_fetch_usbserialv>
 80a02a6:	4909      	ldr	r1, [pc, #36]	; (80a02cc <loop+0x74>)
 80a02a8:	f001 f83a 	bl	80a1320 <_ZN5Print5printEPKc>
  Serial.println(sensorValue);
 80a02ac:	f001 fb4e 	bl	80a194c <_Z16_fetch_usbserialv>
 80a02b0:	4621      	mov	r1, r4
 80a02b2:	220a      	movs	r2, #10
 80a02b4:	b003      	add	sp, #12
 80a02b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Serial.println(pos);
    myservo.write(pos);
  }
  delay(50);
  Serial.print("Sensor value: ");
  Serial.println(sensorValue);
 80a02ba:	f001 b892 	b.w	80a13e2 <_ZN5Print7printlnEii>
 80a02be:	bf00      	nop
 80a02c0:	20000000 	.word	0x20000000
 80a02c4:	080a2191 	.word	0x080a2191
 80a02c8:	20000070 	.word	0x20000070
 80a02cc:	080a2195 	.word	0x080a2195

080a02d0 <_ZN15Adafruit_ST7735D0Ev>:
 80a02d0:	b510      	push	{r4, lr}
 80a02d2:	4604      	mov	r4, r0
 80a02d4:	2130      	movs	r1, #48	; 0x30
 80a02d6:	f001 fd5c 	bl	80a1d92 <_ZdlPvj>
 80a02da:	4620      	mov	r0, r4
 80a02dc:	bd10      	pop	{r4, pc}
	...

080a02e0 <_GLOBAL__sub_I_myservo>:
 80a02e0:	b510      	push	{r4, lr}

#define cs A2
#define dc D0
#define rst A0

Adafruit_ST7735 tft = Adafruit_ST7735(cs, dc, rst); // hardware spi
 80a02e2:	4c09      	ldr	r4, [pc, #36]	; (80a0308 <_GLOBAL__sub_I_myservo+0x28>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02e4:	f000 fcb6 	bl	80a0c54 <HAL_Pin_Map>
#include <Adafruit_ST7735.h>

Servo myservo; // create servo object to control a servo
 80a02e8:	4808      	ldr	r0, [pc, #32]	; (80a030c <_GLOBAL__sub_I_myservo+0x2c>)
 80a02ea:	f001 f8d5 	bl	80a1498 <_ZN5ServoC1Ev>

#define cs A2
#define dc D0
#define rst A0

Adafruit_ST7735 tft = Adafruit_ST7735(cs, dc, rst); // hardware spi
 80a02ee:	2200      	movs	r2, #0
 80a02f0:	210c      	movs	r1, #12
 80a02f2:	4620      	mov	r0, r4
 80a02f4:	230a      	movs	r3, #10
 80a02f6:	f000 f823 	bl	80a0340 <_ZN15Adafruit_ST7735C1Ehhh>
 80a02fa:	4620      	mov	r0, r4
    myservo.write(pos);
  }
  delay(50);
  Serial.print("Sensor value: ");
  Serial.println(sensorValue);
 80a02fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#define cs A2
#define dc D0
#define rst A0

Adafruit_ST7735 tft = Adafruit_ST7735(cs, dc, rst); // hardware spi
 80a0300:	4a03      	ldr	r2, [pc, #12]	; (80a0310 <_GLOBAL__sub_I_myservo+0x30>)
 80a0302:	4904      	ldr	r1, [pc, #16]	; (80a0314 <_GLOBAL__sub_I_myservo+0x34>)
 80a0304:	f001 bd40 	b.w	80a1d88 <__aeabi_atexit>
 80a0308:	20000080 	.word	0x20000080
 80a030c:	20000070 	.word	0x20000070
 80a0310:	2000006c 	.word	0x2000006c
 80a0314:	080a00c5 	.word	0x080a00c5

080a0318 <_ZN15Adafruit_ST773510fillScreenEt>:
#endif
}



void Adafruit_ST7735::fillScreen(uint16_t color) {
 80a0318:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0,  _width, _height, color);
 80a031a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a031e:	6804      	ldr	r4, [r0, #0]
 80a0320:	9101      	str	r1, [sp, #4]
 80a0322:	9200      	str	r2, [sp, #0]
 80a0324:	2200      	movs	r2, #0
 80a0326:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a032a:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a032c:	4611      	mov	r1, r2
 80a032e:	47a0      	blx	r4
}
 80a0330:	b002      	add	sp, #8
 80a0332:	bd10      	pop	{r4, pc}

080a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>:
#define __AVR__
#endif

#if defined(SPARK)
inline void Adafruit_ST7735::spiwrite(uint8_t c) {
  SPI.transfer(c);
 80a0334:	4601      	mov	r1, r0
 80a0336:	4801      	ldr	r0, [pc, #4]	; (80a033c <_ZN15Adafruit_ST77358spiwriteEh.isra.0+0x8>)
 80a0338:	f001 b970 	b.w	80a161c <_ZN8SPIClass8transferEh>
 80a033c:	20000578 	.word	0x20000578

080a0340 <_ZN15Adafruit_ST7735C1Ehhh>:
}
#endif

// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) :
 80a0340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0342:	4604      	mov	r4, r0
 80a0344:	461d      	mov	r5, r3
 80a0346:	460f      	mov	r7, r1
 80a0348:	4616      	mov	r6, r2
    Adafruit_GFX(ST7735_TFTWIDTH, ST7735_TFTHEIGHT) {
 80a034a:	2180      	movs	r1, #128	; 0x80
 80a034c:	22a0      	movs	r2, #160	; 0xa0
 80a034e:	f000 fb8b 	bl	80a0a68 <_ZN12Adafruit_GFXC1Ess>
 80a0352:	4b06      	ldr	r3, [pc, #24]	; (80a036c <_ZN15Adafruit_ST7735C1Ehhh+0x2c>)
  _cs   = cs;
 80a0354:	f884 702b 	strb.w	r7, [r4, #43]	; 0x2b
#endif

// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) :
    Adafruit_GFX(ST7735_TFTWIDTH, ST7735_TFTHEIGHT) {
 80a0358:	6023      	str	r3, [r4, #0]
  _cs   = cs;
  _rs   = rs;
  _rst  = rst;
  hwSPI = true;
 80a035a:	2301      	movs	r3, #1
// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) :
    Adafruit_GFX(ST7735_TFTWIDTH, ST7735_TFTHEIGHT) {
  _cs   = cs;
  _rs   = rs;
 80a035c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
  _rst  = rst;
 80a0360:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
  hwSPI = true;
 80a0364:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
#if !defined(SPARK)
  _sid  = _sclk = 0;
#endif
}
 80a0368:	4620      	mov	r0, r4
 80a036a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a036c:	080a21ac 	.word	0x080a21ac

080a0370 <_ZN15Adafruit_ST773512writecommandEh>:
#if defined(SPARK)
inline void Adafruit_ST7735::spiwrite(uint8_t c) {
  SPI.transfer(c);
}

void Adafruit_ST7735::writecommand(uint8_t c) {
 80a0370:	b538      	push	{r3, r4, r5, lr}
 80a0372:	4604      	mov	r4, r0
 80a0374:	460d      	mov	r5, r1
  digitalWrite(_rs, LOW);
 80a0376:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80a037a:	2100      	movs	r1, #0
 80a037c:	f001 fc79 	bl	80a1c72 <digitalWrite>
  digitalWrite(_cs, LOW);
 80a0380:	2100      	movs	r1, #0
 80a0382:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a0386:	f001 fc74 	bl	80a1c72 <digitalWrite>
  spiwrite(c);
 80a038a:	4628      	mov	r0, r5
 80a038c:	f7ff ffd2 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
  digitalWrite(_cs, HIGH);
 80a0390:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a0394:	2101      	movs	r1, #1
}
 80a0396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_ST7735::writecommand(uint8_t c) {
  digitalWrite(_rs, LOW);
  digitalWrite(_cs, LOW);
  spiwrite(c);
  digitalWrite(_cs, HIGH);
 80a039a:	f001 bc6a 	b.w	80a1c72 <digitalWrite>

080a039e <_ZN15Adafruit_ST773513invertDisplayEb>:
  }
}


void Adafruit_ST7735::invertDisplay(boolean i) {
  writecommand(i ? ST7735_INVON : ST7735_INVOFF);
 80a039e:	2900      	cmp	r1, #0
 80a03a0:	bf14      	ite	ne
 80a03a2:	2121      	movne	r1, #33	; 0x21
 80a03a4:	2120      	moveq	r1, #32
 80a03a6:	f7ff bfe3 	b.w	80a0370 <_ZN15Adafruit_ST773512writecommandEh>

080a03aa <_ZN15Adafruit_ST77359writedataEh>:
  digitalWrite(_cs, LOW);
  spiwrite(c);
  digitalWrite(_cs, HIGH);
}

void Adafruit_ST7735::writedata(uint8_t c) {
 80a03aa:	b538      	push	{r3, r4, r5, lr}
 80a03ac:	4604      	mov	r4, r0
 80a03ae:	460d      	mov	r5, r1
  digitalWrite(_rs, HIGH);
 80a03b0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80a03b4:	2101      	movs	r1, #1
 80a03b6:	f001 fc5c 	bl	80a1c72 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a03ba:	2100      	movs	r1, #0
 80a03bc:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a03c0:	f001 fc57 	bl	80a1c72 <digitalWrite>
  spiwrite(c);
 80a03c4:	4628      	mov	r0, r5
 80a03c6:	f7ff ffb5 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
  digitalWrite(_cs, HIGH);
 80a03ca:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a03ce:	2101      	movs	r1, #1
} 
 80a03d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_ST7735::writedata(uint8_t c) {
  digitalWrite(_rs, HIGH);
  digitalWrite(_cs, LOW); 
  spiwrite(c);
  digitalWrite(_cs, HIGH);
 80a03d4:	f001 bc4d 	b.w	80a1c72 <digitalWrite>

080a03d8 <_ZN15Adafruit_ST773511commandListEPKh>:



// Companion code to the above tables.  Reads and issues
// a series of LCD commands stored in PROGMEM byte array.
void Adafruit_ST7735::commandList(const uint8_t *addr) {
 80a03d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a03dc:	4680      	mov	r8, r0

  uint8_t  numCommands, numArgs;
  uint16_t ms;

  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 80a03de:	780f      	ldrb	r7, [r1, #0]
 80a03e0:	1c4c      	adds	r4, r1, #1
  while(numCommands--) {                 // For each command...
 80a03e2:	b347      	cbz	r7, 80a0436 <_ZN15Adafruit_ST773511commandListEPKh+0x5e>
    writecommand(pgm_read_byte(addr++)); //   Read, issue command
 80a03e4:	4626      	mov	r6, r4
 80a03e6:	4640      	mov	r0, r8
 80a03e8:	f816 1b02 	ldrb.w	r1, [r6], #2
 80a03ec:	f7ff ffc0 	bl	80a0370 <_ZN15Adafruit_ST773512writecommandEh>
    numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
 80a03f0:	7865      	ldrb	r5, [r4, #1]
 80a03f2:	46b2      	mov	sl, r6
 80a03f4:	f025 097f 	bic.w	r9, r5, #127	; 0x7f
    ms       = numArgs & DELAY;          //   If hibit set, delay follows args
    numArgs &= ~DELAY;                   //   Mask out delay bit
 80a03f8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 80a03fc:	462c      	mov	r4, r5
 80a03fe:	fa5f f989 	uxtb.w	r9, r9
    while(numArgs--) {                   //   For each argument...
 80a0402:	3c01      	subs	r4, #1
 80a0404:	b2e4      	uxtb	r4, r4
 80a0406:	2cff      	cmp	r4, #255	; 0xff
 80a0408:	d005      	beq.n	80a0416 <_ZN15Adafruit_ST773511commandListEPKh+0x3e>
      writedata(pgm_read_byte(addr++));  //     Read, issue argument
 80a040a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80a040e:	4640      	mov	r0, r8
 80a0410:	f7ff ffcb 	bl	80a03aa <_ZN15Adafruit_ST77359writedataEh>
  while(numCommands--) {                 // For each command...
    writecommand(pgm_read_byte(addr++)); //   Read, issue command
    numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
    ms       = numArgs & DELAY;          //   If hibit set, delay follows args
    numArgs &= ~DELAY;                   //   Mask out delay bit
    while(numArgs--) {                   //   For each argument...
 80a0414:	e7f5      	b.n	80a0402 <_ZN15Adafruit_ST773511commandListEPKh+0x2a>
 80a0416:	1974      	adds	r4, r6, r5
      writedata(pgm_read_byte(addr++));  //     Read, issue argument
    }

    if(ms) {
 80a0418:	f1b9 0f00 	cmp.w	r9, #0
 80a041c:	d102      	bne.n	80a0424 <_ZN15Adafruit_ST773511commandListEPKh+0x4c>
 80a041e:	3f01      	subs	r7, #1
 80a0420:	b2ff      	uxtb	r7, r7
 80a0422:	e7de      	b.n	80a03e2 <_ZN15Adafruit_ST773511commandListEPKh+0xa>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 80a0424:	5d70      	ldrb	r0, [r6, r5]
 80a0426:	3401      	adds	r4, #1
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80a0428:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
 80a042a:	bf08      	it	eq
 80a042c:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80a0430:	f000 fe02 	bl	80a1038 <delay>
 80a0434:	e7f3      	b.n	80a041e <_ZN15Adafruit_ST773511commandListEPKh+0x46>
 80a0436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080a043c <_ZN15Adafruit_ST773510commonInitEPKh>:

}


// Initialization code common to both 'B' and 'R' type displays
void Adafruit_ST7735::commonInit(const uint8_t *cmdList) {
 80a043c:	b570      	push	{r4, r5, r6, lr}
 80a043e:	4604      	mov	r4, r0
  colstart  = rowstart = 0; // May be overridden in init func
 80a0440:	2500      	movs	r5, #0
 80a0442:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
 80a0446:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e

}


// Initialization code common to both 'B' and 'R' type displays
void Adafruit_ST7735::commonInit(const uint8_t *cmdList) {
 80a044a:	460e      	mov	r6, r1
  colstart  = rowstart = 0; // May be overridden in init func

  pinMode(_rs, OUTPUT);
 80a044c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80a0450:	2101      	movs	r1, #1
 80a0452:	f001 fbfd 	bl	80a1c50 <pinMode>
  pinMode(_cs, OUTPUT);
 80a0456:	2101      	movs	r1, #1
 80a0458:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a045c:	f001 fbf8 	bl	80a1c50 <pinMode>
#if defined(SPARK)
  SPI.begin();
 80a0460:	4825      	ldr	r0, [pc, #148]	; (80a04f8 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a0462:	f001 f875 	bl	80a1550 <_ZN8SPIClass5beginEv>
  SPI.setClockDivider(SPI_CLOCK_DIV4); // 4 MHz (half speed)
 80a0466:	2108      	movs	r1, #8
 80a0468:	4823      	ldr	r0, [pc, #140]	; (80a04f8 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a046a:	f001 f8c3 	bl	80a15f4 <_ZN8SPIClass15setClockDividerEh>
  //Due defaults to 4mHz (clock divider setting of 21)
  SPI.setBitOrder(MSBFIRST);
 80a046e:	2101      	movs	r1, #1
 80a0470:	4821      	ldr	r0, [pc, #132]	; (80a04f8 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a0472:	f001 f872 	bl	80a155a <_ZN8SPIClass11setBitOrderEh>
  SPI.setDataMode(SPI_MODE0);
 80a0476:	4629      	mov	r1, r5
 80a0478:	481f      	ldr	r0, [pc, #124]	; (80a04f8 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a047a:	f001 f871 	bl	80a1560 <_ZN8SPIClass11setDataModeEh>

#if !defined(SPARK)
  cspinmask = digitalPinToBitMask(_cs);
  rspinmask = digitalPinToBitMask(_rs);
#endif
  if(hwSPI) { // Using hardware SPI
 80a047e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a0482:	b153      	cbz	r3, 80a049a <_ZN15Adafruit_ST773510commonInitEPKh+0x5e>
    SPI.begin();
 80a0484:	481c      	ldr	r0, [pc, #112]	; (80a04f8 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a0486:	f001 f863 	bl	80a1550 <_ZN8SPIClass5beginEv>
#endif
#if defined(__SAM3X8E__)
    SPI.setClockDivider(21); // 4 MHz
    //Due defaults to 4mHz (clock divider setting of 21), but we'll set it anyway 
#endif
    SPI.setBitOrder(MSBFIRST);
 80a048a:	2101      	movs	r1, #1
 80a048c:	481a      	ldr	r0, [pc, #104]	; (80a04f8 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a048e:	f001 f864 	bl	80a155a <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 80a0492:	4629      	mov	r1, r5
 80a0494:	4818      	ldr	r0, [pc, #96]	; (80a04f8 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a0496:	f001 f863 	bl	80a1560 <_ZN8SPIClass11setDataModeEh>
#endif
  }

  // toggle RST low to reset; CS low so it'll listen to us
#if defined(SPARK)
	digitalWrite(_cs, LOW); // *csport &= ~cspinmask;
 80a049a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a049e:	2100      	movs	r1, #0
 80a04a0:	f001 fbe7 	bl	80a1c72 <digitalWrite>
  *csport &= ~cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport ->PIO_CODR  |=  cspinmask; // Set control bits to LOW (idle)
#endif
  if (_rst) {
 80a04a4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a04a8:	b1e8      	cbz	r0, 80a04e6 <_ZN15Adafruit_ST773510commonInitEPKh+0xaa>
    pinMode(_rst, OUTPUT);
 80a04aa:	2101      	movs	r1, #1
 80a04ac:	f001 fbd0 	bl	80a1c50 <pinMode>
    digitalWrite(_rst, HIGH);
 80a04b0:	2101      	movs	r1, #1
 80a04b2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a04b6:	f001 fbdc 	bl	80a1c72 <digitalWrite>
    delay(500);
 80a04ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a04be:	f000 fdbb 	bl	80a1038 <delay>
    digitalWrite(_rst, LOW);
 80a04c2:	2100      	movs	r1, #0
 80a04c4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a04c8:	f001 fbd3 	bl	80a1c72 <digitalWrite>
    delay(500);
 80a04cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a04d0:	f000 fdb2 	bl	80a1038 <delay>
    digitalWrite(_rst, HIGH);
 80a04d4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a04d8:	2101      	movs	r1, #1
 80a04da:	f001 fbca 	bl	80a1c72 <digitalWrite>
    delay(500);
 80a04de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a04e2:	f000 fda9 	bl	80a1038 <delay>
  }

  if(cmdList) commandList(cmdList);
 80a04e6:	b12e      	cbz	r6, 80a04f4 <_ZN15Adafruit_ST773510commonInitEPKh+0xb8>
 80a04e8:	4631      	mov	r1, r6
 80a04ea:	4620      	mov	r0, r4
}
 80a04ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(500);
    digitalWrite(_rst, HIGH);
    delay(500);
  }

  if(cmdList) commandList(cmdList);
 80a04f0:	f7ff bf72 	b.w	80a03d8 <_ZN15Adafruit_ST773511commandListEPKh>
 80a04f4:	bd70      	pop	{r4, r5, r6, pc}
 80a04f6:	bf00      	nop
 80a04f8:	20000578 	.word	0x20000578

080a04fc <_ZN15Adafruit_ST77355initGEv>:
}


// Initialization for ST7735B screens
void Adafruit_ST7735::initG(void) {
  commonInit(Gcmd);
 80a04fc:	4901      	ldr	r1, [pc, #4]	; (80a0504 <_ZN15Adafruit_ST77355initGEv+0x8>)
 80a04fe:	f7ff bf9d 	b.w	80a043c <_ZN15Adafruit_ST773510commonInitEPKh>
 80a0502:	bf00      	nop
 80a0504:	080a21e0 	.word	0x080a21e0

080a0508 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>:
  tabcolor = options;
}


void Adafruit_ST7735::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1,
 uint8_t y1) {
 80a0508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a050c:	4604      	mov	r4, r0
 80a050e:	4688      	mov	r8, r1
 80a0510:	461f      	mov	r7, r3
 80a0512:	4616      	mov	r6, r2

  writecommand(ST7735_CASET); // Column addr set
 80a0514:	212a      	movs	r1, #42	; 0x2a
  tabcolor = options;
}


void Adafruit_ST7735::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1,
 uint8_t y1) {
 80a0516:	f89d 5018 	ldrb.w	r5, [sp, #24]

  writecommand(ST7735_CASET); // Column addr set
 80a051a:	f7ff ff29 	bl	80a0370 <_ZN15Adafruit_ST773512writecommandEh>
  writedata(0x00);
 80a051e:	4620      	mov	r0, r4
 80a0520:	2100      	movs	r1, #0
 80a0522:	f7ff ff42 	bl	80a03aa <_ZN15Adafruit_ST77359writedataEh>
  writedata(x0+colstart);     // XSTART 
 80a0526:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80a052a:	4620      	mov	r0, r4
 80a052c:	4441      	add	r1, r8
 80a052e:	b2c9      	uxtb	r1, r1
 80a0530:	f7ff ff3b 	bl	80a03aa <_ZN15Adafruit_ST77359writedataEh>
  writedata(0x00);
 80a0534:	4620      	mov	r0, r4
 80a0536:	2100      	movs	r1, #0
 80a0538:	f7ff ff37 	bl	80a03aa <_ZN15Adafruit_ST77359writedataEh>
  writedata(x1+colstart);     // XEND
 80a053c:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80a0540:	4620      	mov	r0, r4
 80a0542:	4439      	add	r1, r7
 80a0544:	b2c9      	uxtb	r1, r1
 80a0546:	f7ff ff30 	bl	80a03aa <_ZN15Adafruit_ST77359writedataEh>

  writecommand(ST7735_RASET); // Row addr set
 80a054a:	4620      	mov	r0, r4
 80a054c:	212b      	movs	r1, #43	; 0x2b
 80a054e:	f7ff ff0f 	bl	80a0370 <_ZN15Adafruit_ST773512writecommandEh>
  writedata(0x00);
 80a0552:	4620      	mov	r0, r4
 80a0554:	2100      	movs	r1, #0
 80a0556:	f7ff ff28 	bl	80a03aa <_ZN15Adafruit_ST77359writedataEh>
  writedata(y0+rowstart);     // YSTART
 80a055a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80a055e:	4620      	mov	r0, r4
 80a0560:	4431      	add	r1, r6
 80a0562:	b2c9      	uxtb	r1, r1
 80a0564:	f7ff ff21 	bl	80a03aa <_ZN15Adafruit_ST77359writedataEh>
  writedata(0x00);
 80a0568:	4620      	mov	r0, r4
 80a056a:	2100      	movs	r1, #0
 80a056c:	f7ff ff1d 	bl	80a03aa <_ZN15Adafruit_ST77359writedataEh>
  writedata(y1+rowstart);     // YEND
 80a0570:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80a0574:	4620      	mov	r0, r4
 80a0576:	4429      	add	r1, r5
 80a0578:	b2c9      	uxtb	r1, r1
 80a057a:	f7ff ff16 	bl	80a03aa <_ZN15Adafruit_ST77359writedataEh>

  writecommand(ST7735_RAMWR); // write to RAM
 80a057e:	4620      	mov	r0, r4
}
 80a0580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writedata(0x00);
  writedata(y0+rowstart);     // YSTART
  writedata(0x00);
  writedata(y1+rowstart);     // YEND

  writecommand(ST7735_RAMWR); // write to RAM
 80a0584:	212c      	movs	r1, #44	; 0x2c
 80a0586:	f7ff bef3 	b.w	80a0370 <_ZN15Adafruit_ST773512writecommandEh>

080a058a <_ZN15Adafruit_ST773513drawFastVLineEssst>:
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
 80a058a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a058c:	461c      	mov	r4, r3

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a058e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
 80a0592:	4605      	mov	r5, r0

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a0594:	428b      	cmp	r3, r1
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
 80a0596:	f8bd 7020 	ldrh.w	r7, [sp, #32]

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a059a:	dd31      	ble.n	80a0600 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x76>
 80a059c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a05a0:	4290      	cmp	r0, r2
 80a05a2:	dd2d      	ble.n	80a0600 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x76>
  if((y+h-1) >= _height) h = _height-y;
 80a05a4:	1913      	adds	r3, r2, r4
 80a05a6:	4283      	cmp	r3, r0
 80a05a8:	bfc8      	it	gt
 80a05aa:	1a84      	subgt	r4, r0, r2
  setAddrWindow(x, y, x, y+h-1);
 80a05ac:	b2d2      	uxtb	r2, r2
void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((y+h-1) >= _height) h = _height-y;
 80a05ae:	bfc8      	it	gt
 80a05b0:	b224      	sxthgt	r4, r4
  setAddrWindow(x, y, x, y+h-1);
 80a05b2:	1e56      	subs	r6, r2, #1
 80a05b4:	4426      	add	r6, r4
 80a05b6:	b2cb      	uxtb	r3, r1
 80a05b8:	b2f6      	uxtb	r6, r6
 80a05ba:	4619      	mov	r1, r3
 80a05bc:	9600      	str	r6, [sp, #0]
 80a05be:	4628      	mov	r0, r5
 80a05c0:	f7ff ffa2 	bl	80a0508 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;

#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a05c4:	2101      	movs	r1, #1
 80a05c6:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80a05ca:	f001 fb52 	bl	80a1c72 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a05ce:	2100      	movs	r1, #0
 80a05d0:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((y+h-1) >= _height) h = _height-y;
  setAddrWindow(x, y, x, y+h-1);

  uint8_t hi = color >> 8, lo = color;
 80a05d4:	0a3e      	lsrs	r6, r7, #8
 80a05d6:	b2ff      	uxtb	r7, r7

#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
  digitalWrite(_cs, LOW); 
 80a05d8:	f001 fb4b 	bl	80a1c72 <digitalWrite>
 80a05dc:	b2a4      	uxth	r4, r4
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  while (h--) {
 80a05de:	b13c      	cbz	r4, 80a05f0 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x66>
    spiwrite(hi);
 80a05e0:	4630      	mov	r0, r6
 80a05e2:	f7ff fea7 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
    spiwrite(lo);
 80a05e6:	4638      	mov	r0, r7
 80a05e8:	f7ff fea4 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a05ec:	3c01      	subs	r4, #1
 80a05ee:	e7f5      	b.n	80a05dc <_ZN15Adafruit_ST773513drawFastVLineEssst+0x52>
  while (w--) {
    spiwrite(hi);
    spiwrite(lo);
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a05f0:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80a05f4:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a05f6:	b003      	add	sp, #12
 80a05f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while (w--) {
    spiwrite(hi);
    spiwrite(lo);
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a05fc:	f001 bb39 	b.w	80a1c72 <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a0600:	b003      	add	sp, #12
 80a0602:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0604 <_ZN15Adafruit_ST773513drawFastHLineEssst>:


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
 80a0604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0606:	461c      	mov	r4, r3

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a0608:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
#endif
}


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
 80a060c:	4605      	mov	r5, r0

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a060e:	428b      	cmp	r3, r1
#endif
}


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
 80a0610:	f8bd 6020 	ldrh.w	r6, [sp, #32]

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a0614:	dd30      	ble.n	80a0678 <_ZN15Adafruit_ST773513drawFastHLineEssst+0x74>
 80a0616:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a061a:	4290      	cmp	r0, r2
 80a061c:	dd2c      	ble.n	80a0678 <_ZN15Adafruit_ST773513drawFastHLineEssst+0x74>
  if((x+w-1) >= _width)  w = _width-x;
 80a061e:	1908      	adds	r0, r1, r4
 80a0620:	4298      	cmp	r0, r3
 80a0622:	bfc8      	it	gt
 80a0624:	1a5c      	subgt	r4, r3, r1
  setAddrWindow(x, y, x+w-1, y);
 80a0626:	b2c9      	uxtb	r1, r1
void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((x+w-1) >= _width)  w = _width-x;
 80a0628:	bfc8      	it	gt
 80a062a:	b224      	sxthgt	r4, r4
  setAddrWindow(x, y, x+w-1, y);
 80a062c:	1e4b      	subs	r3, r1, #1
 80a062e:	b2d2      	uxtb	r2, r2
 80a0630:	4423      	add	r3, r4
 80a0632:	9200      	str	r2, [sp, #0]
 80a0634:	b2db      	uxtb	r3, r3
 80a0636:	4628      	mov	r0, r5
 80a0638:	f7ff ff66 	bl	80a0508 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a063c:	2101      	movs	r1, #1
 80a063e:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80a0642:	f001 fb16 	bl	80a1c72 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a0646:	2100      	movs	r1, #0
 80a0648:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((x+w-1) >= _width)  w = _width-x;
  setAddrWindow(x, y, x+w-1, y);

  uint8_t hi = color >> 8, lo = color;
 80a064c:	0a37      	lsrs	r7, r6, #8
 80a064e:	b2f6      	uxtb	r6, r6
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
  digitalWrite(_cs, LOW); 
 80a0650:	f001 fb0f 	bl	80a1c72 <digitalWrite>
 80a0654:	b2a4      	uxth	r4, r4
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  while (w--) {
 80a0656:	b13c      	cbz	r4, 80a0668 <_ZN15Adafruit_ST773513drawFastHLineEssst+0x64>
    spiwrite(hi);
 80a0658:	4638      	mov	r0, r7
 80a065a:	f7ff fe6b 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
    spiwrite(lo);
 80a065e:	4630      	mov	r0, r6
 80a0660:	f7ff fe68 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a0664:	3c01      	subs	r4, #1
 80a0666:	e7f5      	b.n	80a0654 <_ZN15Adafruit_ST773513drawFastHLineEssst+0x50>
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a0668:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80a066c:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a066e:	b003      	add	sp, #12
 80a0670:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while (w--) {
    spiwrite(hi);
    spiwrite(lo);
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a0674:	f001 bafd 	b.w	80a1c72 <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a0678:	b003      	add	sp, #12
 80a067a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a067c <_ZN15Adafruit_ST77358fillRectEsssst>:



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
 80a067c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0680:	4605      	mov	r5, r0

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
 80a0682:	f9b0 000c 	ldrsh.w	r0, [r0, #12]



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
 80a0686:	461e      	mov	r6, r3

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
 80a0688:	4288      	cmp	r0, r1



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
 80a068a:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 80a068e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
 80a0692:	dd44      	ble.n	80a071e <_ZN15Adafruit_ST77358fillRectEsssst+0xa2>
 80a0694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80a0698:	4293      	cmp	r3, r2
 80a069a:	dd40      	ble.n	80a071e <_ZN15Adafruit_ST77358fillRectEsssst+0xa2>
  if((x + w - 1) >= _width)  w = _width  - x;
 80a069c:	eb01 0e06 	add.w	lr, r1, r6
 80a06a0:	4586      	cmp	lr, r0
 80a06a2:	bfc8      	it	gt
 80a06a4:	1a46      	subgt	r6, r0, r1
  if((y + h - 1) >= _height) h = _height - y;
 80a06a6:	eb02 0004 	add.w	r0, r2, r4
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
  if((x + w - 1) >= _width)  w = _width  - x;
 80a06aa:	bfc8      	it	gt
 80a06ac:	b236      	sxthgt	r6, r6
  if((y + h - 1) >= _height) h = _height - y;
 80a06ae:	4298      	cmp	r0, r3
 80a06b0:	bfc8      	it	gt
 80a06b2:	1a9c      	subgt	r4, r3, r2

  setAddrWindow(x, y, x+w-1, y+h-1);
 80a06b4:	b2d2      	uxtb	r2, r2
  uint16_t color) {

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
  if((x + w - 1) >= _width)  w = _width  - x;
  if((y + h - 1) >= _height) h = _height - y;
 80a06b6:	bfc8      	it	gt
 80a06b8:	b224      	sxthgt	r4, r4

  setAddrWindow(x, y, x+w-1, y+h-1);
 80a06ba:	b2c9      	uxtb	r1, r1
 80a06bc:	1e50      	subs	r0, r2, #1
 80a06be:	1e4b      	subs	r3, r1, #1
 80a06c0:	4420      	add	r0, r4
 80a06c2:	b2c0      	uxtb	r0, r0
 80a06c4:	4433      	add	r3, r6
 80a06c6:	9000      	str	r0, [sp, #0]
 80a06c8:	b2db      	uxtb	r3, r3
 80a06ca:	4628      	mov	r0, r5
 80a06cc:	f7ff ff1c 	bl	80a0508 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a06d0:	2101      	movs	r1, #1
 80a06d2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80a06d6:	f001 facc 	bl	80a1c72 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a06da:	2100      	movs	r1, #0
 80a06dc:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
  if((x + w - 1) >= _width)  w = _width  - x;
  if((y + h - 1) >= _height) h = _height - y;

  setAddrWindow(x, y, x+w-1, y+h-1);

  uint8_t hi = color >> 8, lo = color;
 80a06e0:	ea4f 2817 	mov.w	r8, r7, lsr #8
 80a06e4:	fa5f f987 	uxtb.w	r9, r7
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
  digitalWrite(_cs, LOW); 
 80a06e8:	f001 fac3 	bl	80a1c72 <digitalWrite>
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  for(y=h; y>0; y--) {
 80a06ec:	2c00      	cmp	r4, #0
 80a06ee:	dd0e      	ble.n	80a070e <_ZN15Adafruit_ST77358fillRectEsssst+0x92>
 80a06f0:	4637      	mov	r7, r6
    for(x=w; x>0; x--) {
 80a06f2:	2f00      	cmp	r7, #0
 80a06f4:	dd08      	ble.n	80a0708 <_ZN15Adafruit_ST77358fillRectEsssst+0x8c>
      spiwrite(hi);
 80a06f6:	4640      	mov	r0, r8
 80a06f8:	f7ff fe1c 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a06fc:	3f01      	subs	r7, #1
      spiwrite(lo);
 80a06fe:	4648      	mov	r0, r9
 80a0700:	f7ff fe18 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a0704:	b23f      	sxth	r7, r7
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  for(y=h; y>0; y--) {
    for(x=w; x>0; x--) {
 80a0706:	e7f4      	b.n	80a06f2 <_ZN15Adafruit_ST77358fillRectEsssst+0x76>
 80a0708:	3c01      	subs	r4, #1
 80a070a:	b224      	sxth	r4, r4
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  for(y=h; y>0; y--) {
 80a070c:	e7ee      	b.n	80a06ec <_ZN15Adafruit_ST77358fillRectEsssst+0x70>
      spiwrite(lo);
    }
  }

#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a070e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80a0712:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a0714:	b003      	add	sp, #12
 80a0716:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      spiwrite(lo);
    }
  }

#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a071a:	f001 baaa 	b.w	80a1c72 <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a071e:	b003      	add	sp, #12
 80a0720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a0724 <_ZN15Adafruit_ST77359drawPixelEsst>:
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}

void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0724:	b573      	push	{r0, r1, r4, r5, r6, lr}

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 80a0726:	2900      	cmp	r1, #0
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}

void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0728:	4604      	mov	r4, r0
 80a072a:	461e      	mov	r6, r3

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 80a072c:	db2a      	blt.n	80a0784 <_ZN15Adafruit_ST77359drawPixelEsst+0x60>
 80a072e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a0732:	428b      	cmp	r3, r1
 80a0734:	dd26      	ble.n	80a0784 <_ZN15Adafruit_ST77359drawPixelEsst+0x60>
 80a0736:	2a00      	cmp	r2, #0
 80a0738:	db24      	blt.n	80a0784 <_ZN15Adafruit_ST77359drawPixelEsst+0x60>
 80a073a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a073e:	4293      	cmp	r3, r2
 80a0740:	dd20      	ble.n	80a0784 <_ZN15Adafruit_ST77359drawPixelEsst+0x60>

  setAddrWindow(x,y,x+1,y+1);
 80a0742:	b2d2      	uxtb	r2, r2
 80a0744:	1c55      	adds	r5, r2, #1
 80a0746:	b2c9      	uxtb	r1, r1
 80a0748:	1c4b      	adds	r3, r1, #1
 80a074a:	b2ed      	uxtb	r5, r5
 80a074c:	b2db      	uxtb	r3, r3
 80a074e:	9500      	str	r5, [sp, #0]
 80a0750:	f7ff feda 	bl	80a0508 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a0754:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80a0758:	2101      	movs	r1, #1
 80a075a:	f001 fa8a 	bl	80a1c72 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a075e:	2100      	movs	r1, #0
 80a0760:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a0764:	f001 fa85 	bl	80a1c72 <digitalWrite>
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif

  spiwrite(color >> 8);
 80a0768:	0a30      	lsrs	r0, r6, #8
 80a076a:	f7ff fde3 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
  spiwrite(color);
 80a076e:	b2f0      	uxtb	r0, r6
 80a0770:	f7ff fde0 	bl	80a0334 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>

#if defined(SPARK)
    digitalWrite(_cs, HIGH); 
 80a0774:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a0778:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a077a:	b002      	add	sp, #8
 80a077c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  spiwrite(color >> 8);
  spiwrite(color);

#if defined(SPARK)
    digitalWrite(_cs, HIGH); 
 80a0780:	f001 ba77 	b.w	80a1c72 <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a0784:	b002      	add	sp, #8
 80a0786:	bd70      	pop	{r4, r5, r6, pc}

080a0788 <_GLOBAL__sub_I__ZN15Adafruit_ST7735C2Ehhh>:
 80a0788:	f000 ba64 	b.w	80a0c54 <HAL_Pin_Map>

080a078c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0790:	461e      	mov	r6, r3
 80a0792:	b085      	sub	sp, #20
 80a0794:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a0798:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a079a:	1a9a      	subs	r2, r3, r2
 80a079c:	2a00      	cmp	r2, #0
 80a079e:	bfb8      	it	lt
 80a07a0:	4252      	neglt	r2, r2
 80a07a2:	9200      	str	r2, [sp, #0]
 80a07a4:	1a72      	subs	r2, r6, r1
 80a07a6:	2a00      	cmp	r2, #0
 80a07a8:	bfb8      	it	lt
 80a07aa:	4252      	neglt	r2, r2
 80a07ac:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a07ae:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a07b0:	9a00      	ldr	r2, [sp, #0]
 80a07b2:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a07b4:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a07b6:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a07b8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a07bc:	dd05      	ble.n	80a07ca <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a07be:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 80a07c0:	461e      	mov	r6, r3
 80a07c2:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a07c4:	4622      	mov	r2, r4
    swap(x0, y0);
 80a07c6:	462c      	mov	r4, r5
 80a07c8:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a07ca:	42b4      	cmp	r4, r6
 80a07cc:	dd05      	ble.n	80a07da <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a07ce:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 80a07d0:	461d      	mov	r5, r3
 80a07d2:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a07d4:	4622      	mov	r2, r4
 80a07d6:	4634      	mov	r4, r6
 80a07d8:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a07da:	1b5a      	subs	r2, r3, r5
 80a07dc:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a07de:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a07e2:	bfb8      	it	lt
 80a07e4:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a07e6:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a07ea:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a07ec:	fa0f f788 	sxth.w	r7, r8
 80a07f0:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a07f2:	429d      	cmp	r5, r3
 80a07f4:	bfb4      	ite	lt
 80a07f6:	2301      	movlt	r3, #1
 80a07f8:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a07fc:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0800:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a0802:	42b4      	cmp	r4, r6
 80a0804:	dc1f      	bgt.n	80a0846 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a0806:	9a01      	ldr	r2, [sp, #4]
 80a0808:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a080a:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a080c:	4293      	cmp	r3, r2
 80a080e:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a0812:	bfc8      	it	gt
 80a0814:	4622      	movgt	r2, r4
 80a0816:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a081a:	bfc8      	it	gt
 80a081c:	4629      	movgt	r1, r5
 80a081e:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a0820:	bfdc      	itt	le
 80a0822:	462a      	movle	r2, r5
 80a0824:	4621      	movle	r1, r4
 80a0826:	47d8      	blx	fp
    }
    err -= dy;
 80a0828:	9b03      	ldr	r3, [sp, #12]
 80a082a:	1aff      	subs	r7, r7, r3
 80a082c:	b2bb      	uxth	r3, r7
 80a082e:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a0830:	2f00      	cmp	r7, #0
 80a0832:	da05      	bge.n	80a0840 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a0834:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a0836:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a083a:	4415      	add	r5, r2
 80a083c:	b22d      	sxth	r5, r5
      err += dx;
 80a083e:	b23f      	sxth	r7, r7
 80a0840:	3401      	adds	r4, #1
 80a0842:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a0844:	e7dd      	b.n	80a0802 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a0846:	b005      	add	sp, #20
 80a0848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a084c <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a084c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0850:	4604      	mov	r4, r0
 80a0852:	4691      	mov	r9, r2
 80a0854:	460d      	mov	r5, r1
 80a0856:	4698      	mov	r8, r3
 80a0858:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a085c:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a085e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a0862:	9600      	str	r6, [sp, #0]
 80a0864:	69ff      	ldr	r7, [r7, #28]
 80a0866:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a0868:	6823      	ldr	r3, [r4, #0]
 80a086a:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a086e:	9600      	str	r6, [sp, #0]
 80a0870:	444a      	add	r2, r9
 80a0872:	69df      	ldr	r7, [r3, #28]
 80a0874:	4629      	mov	r1, r5
 80a0876:	4643      	mov	r3, r8
 80a0878:	4620      	mov	r0, r4
 80a087a:	b212      	sxth	r2, r2
 80a087c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a087e:	6823      	ldr	r3, [r4, #0]
 80a0880:	9600      	str	r6, [sp, #0]
 80a0882:	699f      	ldr	r7, [r3, #24]
 80a0884:	464a      	mov	r2, r9
 80a0886:	4653      	mov	r3, sl
 80a0888:	4629      	mov	r1, r5
 80a088a:	4620      	mov	r0, r4
 80a088c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a088e:	6823      	ldr	r3, [r4, #0]
 80a0890:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80a0894:	960a      	str	r6, [sp, #40]	; 0x28
 80a0896:	4429      	add	r1, r5
 80a0898:	699d      	ldr	r5, [r3, #24]
 80a089a:	464a      	mov	r2, r9
 80a089c:	4653      	mov	r3, sl
 80a089e:	4620      	mov	r0, r4
 80a08a0:	46ac      	mov	ip, r5
 80a08a2:	b209      	sxth	r1, r1
}
 80a08a4:	b002      	add	sp, #8
 80a08a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a08aa:	4760      	bx	ip

080a08ac <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a08ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a08ae:	3b01      	subs	r3, #1
 80a08b0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a08b4:	4413      	add	r3, r2
 80a08b6:	6804      	ldr	r4, [r0, #0]
 80a08b8:	b21b      	sxth	r3, r3
 80a08ba:	9300      	str	r3, [sp, #0]
 80a08bc:	9501      	str	r5, [sp, #4]
 80a08be:	6964      	ldr	r4, [r4, #20]
 80a08c0:	460b      	mov	r3, r1
 80a08c2:	47a0      	blx	r4
}
 80a08c4:	b003      	add	sp, #12
 80a08c6:	bd30      	pop	{r4, r5, pc}

080a08c8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a08c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a08ca:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a08ce:	6804      	ldr	r4, [r0, #0]
 80a08d0:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a08d4:	3b01      	subs	r3, #1
 80a08d6:	440b      	add	r3, r1
 80a08d8:	6964      	ldr	r4, [r4, #20]
 80a08da:	b21b      	sxth	r3, r3
 80a08dc:	47a0      	blx	r4
}
 80a08de:	b003      	add	sp, #12
 80a08e0:	bd30      	pop	{r4, r5, pc}

080a08e2 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a08e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a08e6:	4605      	mov	r5, r0
 80a08e8:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a08ea:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a08ec:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a08f0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a08f4:	eb01 0a03 	add.w	sl, r1, r3
 80a08f8:	4554      	cmp	r4, sl
 80a08fa:	da0b      	bge.n	80a0914 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a08fc:	682b      	ldr	r3, [r5, #0]
 80a08fe:	f8cd 9000 	str.w	r9, [sp]
 80a0902:	699e      	ldr	r6, [r3, #24]
 80a0904:	4621      	mov	r1, r4
 80a0906:	4643      	mov	r3, r8
 80a0908:	463a      	mov	r2, r7
 80a090a:	4628      	mov	r0, r5
 80a090c:	3401      	adds	r4, #1
 80a090e:	47b0      	blx	r6
 80a0910:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0912:	e7f1      	b.n	80a08f8 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a0914:	b002      	add	sp, #8
 80a0916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a091a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a091a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a091c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a0920:	6804      	ldr	r4, [r0, #0]
 80a0922:	9101      	str	r1, [sp, #4]
 80a0924:	9200      	str	r2, [sp, #0]
 80a0926:	2200      	movs	r2, #0
 80a0928:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a092c:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a092e:	4611      	mov	r1, r2
 80a0930:	47a0      	blx	r4
}
 80a0932:	b002      	add	sp, #8
 80a0934:	bd10      	pop	{r4, pc}

080a0936 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a0936:	4770      	bx	lr

080a0938 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0938:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  if (c == '\n') {
 80a093a:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a093c:	b085      	sub	sp, #20
 80a093e:	4604      	mov	r4, r0
 80a0940:	460d      	mov	r5, r1
  
  if (c == '\n') {
 80a0942:	d107      	bne.n	80a0954 <_ZN12Adafruit_GFX5writeEh+0x1c>
    cursor_y += textsize*fontDesc[0].height;	//all chars are same height so use height of space char
 80a0944:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80a0946:	7e02      	ldrb	r2, [r0, #24]
 80a0948:	7859      	ldrb	r1, [r3, #1]
 80a094a:	8a43      	ldrh	r3, [r0, #18]
 80a094c:	fb01 3302 	mla	r3, r1, r2, r3
 80a0950:	8243      	strh	r3, [r0, #18]
 80a0952:	e049      	b.n	80a09e8 <_ZN12Adafruit_GFX5writeEh+0xb0>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a0954:	290d      	cmp	r1, #13
 80a0956:	d049      	beq.n	80a09ec <_ZN12Adafruit_GFX5writeEh+0xb4>
    // skip em
  } else {
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a0958:	7e06      	ldrb	r6, [r0, #24]
 80a095a:	6803      	ldr	r3, [r0, #0]
 80a095c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a0960:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a0964:	9602      	str	r6, [sp, #8]
 80a0966:	8ac6      	ldrh	r6, [r0, #22]
 80a0968:	9601      	str	r6, [sp, #4]
 80a096a:	8a86      	ldrh	r6, [r0, #20]
 80a096c:	9600      	str	r6, [sp, #0]
 80a096e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80a0970:	462b      	mov	r3, r5
 80a0972:	47b0      	blx	r6
	uint16_t w = fontDesc[c-fontStart].width;
 80a0974:	7ee3      	ldrb	r3, [r4, #27]
	uint16_t h = fontDesc[c-fontStart].height;
    if (fontKern > 0 && textcolor != textbgcolor) {
 80a0976:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
	uint16_t w = fontDesc[c-fontStart].width;
 80a097a:	1aed      	subs	r5, r5, r3
 80a097c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	uint16_t h = fontDesc[c-fontStart].height;
    if (fontKern > 0 && textcolor != textbgcolor) {
 80a097e:	f1be 0f00 	cmp.w	lr, #0
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
	uint16_t w = fontDesc[c-fontStart].width;
 80a0982:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 80a0986:	f813 6025 	ldrb.w	r6, [r3, r5, lsl #2]
	uint16_t h = fontDesc[c-fontStart].height;
 80a098a:	7855      	ldrb	r5, [r2, #1]
    if (fontKern > 0 && textcolor != textbgcolor) {
 80a098c:	dd15      	ble.n	80a09ba <_ZN12Adafruit_GFX5writeEh+0x82>
 80a098e:	8ae0      	ldrh	r0, [r4, #22]
 80a0990:	8aa3      	ldrh	r3, [r4, #20]
 80a0992:	4283      	cmp	r3, r0
 80a0994:	d011      	beq.n	80a09ba <_ZN12Adafruit_GFX5writeEh+0x82>
      fillRect(cursor_x+w*textsize,cursor_y,fontKern*textsize,h*textsize,textbgcolor);
 80a0996:	7e23      	ldrb	r3, [r4, #24]
 80a0998:	9001      	str	r0, [sp, #4]
 80a099a:	8a21      	ldrh	r1, [r4, #16]
 80a099c:	fb03 f005 	mul.w	r0, r3, r5
 80a09a0:	fb06 1103 	mla	r1, r6, r3, r1
 80a09a4:	b200      	sxth	r0, r0
 80a09a6:	6827      	ldr	r7, [r4, #0]
 80a09a8:	9000      	str	r0, [sp, #0]
 80a09aa:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a09ae:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 80a09b0:	fb0e f303 	mul.w	r3, lr, r3
 80a09b4:	b209      	sxth	r1, r1
 80a09b6:	4620      	mov	r0, r4
 80a09b8:	47b8      	blx	r7
    }
    cursor_x += textsize*(w+fontKern);
 80a09ba:	7e22      	ldrb	r2, [r4, #24]
 80a09bc:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80a09c0:	8a20      	ldrh	r0, [r4, #16]
 80a09c2:	b291      	uxth	r1, r2
 80a09c4:	4433      	add	r3, r6
 80a09c6:	fb03 0301 	mla	r3, r3, r1, r0
    if (wrap && (cursor_x > (_width - textsize*w))) {
 80a09ca:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
	uint16_t w = fontDesc[c-fontStart].width;
	uint16_t h = fontDesc[c-fontStart].height;
    if (fontKern > 0 && textcolor != textbgcolor) {
      fillRect(cursor_x+w*textsize,cursor_y,fontKern*textsize,h*textsize,textbgcolor);
    }
    cursor_x += textsize*(w+fontKern);
 80a09ce:	b21b      	sxth	r3, r3
 80a09d0:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*w))) {
 80a09d2:	b158      	cbz	r0, 80a09ec <_ZN12Adafruit_GFX5writeEh+0xb4>
 80a09d4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a09d8:	fb06 0212 	mls	r2, r6, r2, r0
 80a09dc:	4293      	cmp	r3, r2
 80a09de:	dd05      	ble.n	80a09ec <_ZN12Adafruit_GFX5writeEh+0xb4>
      cursor_y += textsize*h;
 80a09e0:	8a63      	ldrh	r3, [r4, #18]
 80a09e2:	fb01 3505 	mla	r5, r1, r5, r3
 80a09e6:	8265      	strh	r5, [r4, #18]
      cursor_x = 0;
 80a09e8:	2300      	movs	r3, #0
 80a09ea:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a09ec:	2001      	movs	r0, #1
 80a09ee:	b005      	add	sp, #20
 80a09f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a09f4 <_ZN12Adafruit_GFX7setFontEh>:
  // Default to GLCDFONT to be compatible with existing code
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 }

void Adafruit_GFX::setFont(uint8_t f) {
  font = f;
 80a09f4:	7681      	strb	r1, [r0, #26]
  switch(font) {
 80a09f6:	2903      	cmp	r1, #3
 80a09f8:	d813      	bhi.n	80a0a22 <_ZN12Adafruit_GFX7setFontEh+0x2e>
 80a09fa:	e8df f001 	tbb	[pc, r1]
 80a09fe:	0602      	.short	0x0602
 80a0a00:	0e0a      	.short	0x0e0a
#ifdef TIMESNEWROMAN8
    case TIMESNR_8:
      fontData = timesNewRoman_8ptBitmaps;
 80a0a02:	4b0f      	ldr	r3, [pc, #60]	; (80a0a40 <_ZN12Adafruit_GFX7setFontEh+0x4c>)
 80a0a04:	6203      	str	r3, [r0, #32]
	  fontDesc = timesNewRoman_8ptDescriptors;
 80a0a06:	4b0f      	ldr	r3, [pc, #60]	; (80a0a44 <_ZN12Adafruit_GFX7setFontEh+0x50>)
 80a0a08:	e010      	b.n	80a0a2c <_ZN12Adafruit_GFX7setFontEh+0x38>
      fontKern = 1;
      break;
#endif
#ifdef CENTURYGOTHIC8
    case CENTURY_8:
      fontData = centuryGothic_8ptBitmaps;
 80a0a0a:	4b0f      	ldr	r3, [pc, #60]	; (80a0a48 <_ZN12Adafruit_GFX7setFontEh+0x54>)
 80a0a0c:	6203      	str	r3, [r0, #32]
	  fontDesc = centuryGothic_8ptDescriptors;
 80a0a0e:	4b0f      	ldr	r3, [pc, #60]	; (80a0a4c <_ZN12Adafruit_GFX7setFontEh+0x58>)
 80a0a10:	e00c      	b.n	80a0a2c <_ZN12Adafruit_GFX7setFontEh+0x38>
      fontKern = 1;
      break;
#endif
#ifdef ARIAL8
    case ARIAL_8:
      fontData = arial_8ptBitmaps;
 80a0a12:	4b0f      	ldr	r3, [pc, #60]	; (80a0a50 <_ZN12Adafruit_GFX7setFontEh+0x5c>)
 80a0a14:	6203      	str	r3, [r0, #32]
	  fontDesc = arial_8ptDescriptors;
 80a0a16:	4b0f      	ldr	r3, [pc, #60]	; (80a0a54 <_ZN12Adafruit_GFX7setFontEh+0x60>)
 80a0a18:	e008      	b.n	80a0a2c <_ZN12Adafruit_GFX7setFontEh+0x38>
      fontKern = 1;
      break;
#endif
#ifdef COMICSANSMS8
    case COMICS_8:
      fontData = comicSansMS_8ptBitmaps;
 80a0a1a:	4b0f      	ldr	r3, [pc, #60]	; (80a0a58 <_ZN12Adafruit_GFX7setFontEh+0x64>)
 80a0a1c:	6203      	str	r3, [r0, #32]
	  fontDesc = comicSansMS_8ptDescriptors;
 80a0a1e:	4b0f      	ldr	r3, [pc, #60]	; (80a0a5c <_ZN12Adafruit_GFX7setFontEh+0x68>)
 80a0a20:	e004      	b.n	80a0a2c <_ZN12Adafruit_GFX7setFontEh+0x38>
	  fontDesc = testDescriptors;
      fontKern = 1;
      break;
#endif
	default:
      font = GLCDFONT;
 80a0a22:	2304      	movs	r3, #4
 80a0a24:	7683      	strb	r3, [r0, #26]
      fontData = glcdfontBitmaps;
 80a0a26:	4b0e      	ldr	r3, [pc, #56]	; (80a0a60 <_ZN12Adafruit_GFX7setFontEh+0x6c>)
 80a0a28:	6203      	str	r3, [r0, #32]
	  fontDesc = glcdfontDescriptors;
 80a0a2a:	4b0e      	ldr	r3, [pc, #56]	; (80a0a64 <_ZN12Adafruit_GFX7setFontEh+0x70>)
 80a0a2c:	6243      	str	r3, [r0, #36]	; 0x24
      fontKern = 1;
 80a0a2e:	2301      	movs	r3, #1
 80a0a30:	7743      	strb	r3, [r0, #29]
      break;
  }

  fontStart = pgm_read_byte(fontData+FONT_START);
 80a0a32:	6a03      	ldr	r3, [r0, #32]
 80a0a34:	781a      	ldrb	r2, [r3, #0]
 80a0a36:	76c2      	strb	r2, [r0, #27]
  fontEnd = pgm_read_byte(fontData+FONT_END);
 80a0a38:	785b      	ldrb	r3, [r3, #1]
 80a0a3a:	7703      	strb	r3, [r0, #28]
 80a0a3c:	4770      	bx	lr
 80a0a3e:	bf00      	nop
 80a0a40:	080a414a 	.word	0x080a414a
 80a0a44:	080a3fce 	.word	0x080a3fce
 80a0a48:	080a2fd6 	.word	0x080a2fd6
 80a0a4c:	080a3a52 	.word	0x080a3a52
 80a0a50:	080a2a7a 	.word	0x080a2a7a
 80a0a54:	080a2e5a 	.word	0x080a2e5a
 80a0a58:	080a3424 	.word	0x080a3424
 80a0a5c:	080a38d6 	.word	0x080a38d6
 80a0a60:	080a2280 	.word	0x080a2280
 80a0a64:	080a3bce 	.word	0x080a3bce

080a0a68 <_ZN12Adafruit_GFXC1Ess>:

#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0a68:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a0a6a:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a0a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff


#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a0a70:	b538      	push	{r3, r4, r5, lr}
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0a72:	2300      	movs	r3, #0
  WIDTH(w), HEIGHT(h)
 80a0a74:	4d08      	ldr	r5, [pc, #32]	; (80a0a98 <_ZN12Adafruit_GFXC1Ess+0x30>)
 80a0a76:	6043      	str	r3, [r0, #4]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a0a78:	7643      	strb	r3, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a0a7a:	8203      	strh	r3, [r0, #16]
 80a0a7c:	8243      	strh	r3, [r0, #18]
  textsize  = 1;
 80a0a7e:	2301      	movs	r3, #1

#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0a80:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a0a82:	8181      	strh	r1, [r0, #12]

#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0a84:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a0a86:	7603      	strb	r3, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a0a88:	82c2      	strh	r2, [r0, #22]
 80a0a8a:	8282      	strh	r2, [r0, #20]
  wrap      = true;
 80a0a8c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  // Default to GLCDFONT to be compatible with existing code
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 80a0a90:	2104      	movs	r1, #4
 80a0a92:	f7ff ffaf 	bl	80a09f4 <_ZN12Adafruit_GFX7setFontEh>
 }
 80a0a96:	bd38      	pop	{r3, r4, r5, pc}
 80a0a98:	080a224c 	.word	0x080a224c

080a0a9c <_ZN12Adafruit_GFX8drawCharEsshtth>:
  drawChar(x,y,c,color,bg,size);
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a0a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0aa0:	b08b      	sub	sp, #44	; 0x2c
 80a0aa2:	4692      	mov	sl, r2
 80a0aa4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80a0aa8:	4604      	mov	r4, r0
 80a0aaa:	9204      	str	r2, [sp, #16]
 80a0aac:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80a0ab0:	460d      	mov	r5, r1
 80a0ab2:	9205      	str	r2, [sp, #20]

  if (c < fontStart || c > fontEnd) {
 80a0ab4:	7ec2      	ldrb	r2, [r0, #27]
  drawChar(x,y,c,color,bg,size);
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a0ab6:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58

  if (c < fontStart || c > fontEnd) {
 80a0aba:	429a      	cmp	r2, r3
 80a0abc:	d805      	bhi.n	80a0aca <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
 80a0abe:	7f01      	ldrb	r1, [r0, #28]
 80a0ac0:	4299      	cmp	r1, r3
 80a0ac2:	d302      	bcc.n	80a0aca <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
    c = 0;
  }
  else {
    c -= fontStart;
 80a0ac4:	1a9b      	subs	r3, r3, r2
 80a0ac6:	b2db      	uxtb	r3, r3
 80a0ac8:	e000      	b.n	80a0acc <_ZN12Adafruit_GFX8drawCharEsshtth+0x30>
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if (c < fontStart || c > fontEnd) {
    c = 0;
 80a0aca:	2300      	movs	r3, #0
  }
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
 80a0acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80a0ad0:	42aa      	cmp	r2, r5
 80a0ad2:	dd7b      	ble.n	80a0bcc <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
 80a0ad4:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 80a0ad8:	4552      	cmp	r2, sl
 80a0ada:	dd77      	ble.n	80a0bcc <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
     (y >= _height)           || // Clip bottom
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a0adc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a0ade:	009a      	lsls	r2, r3, #2
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
 80a0ae0:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a0ae4:	9207      	str	r2, [sp, #28]
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
 80a0ae6:	fb06 5303 	mla	r3, r6, r3, r5
 80a0aea:	2b00      	cmp	r3, #0
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a0aec:	440a      	add	r2, r1
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
 80a0aee:	dd6d      	ble.n	80a0bcc <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a0af0:	7853      	ldrb	r3, [r2, #1]
 80a0af2:	fb06 a303 	mla	r3, r6, r3, sl
 80a0af6:	2b00      	cmp	r3, #0
 80a0af8:	dd68      	ble.n	80a0bcc <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
     ((y + (fontDesc[c].height * size) - 1) < 0))   // Clip top
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 80a0afa:	8853      	ldrh	r3, [r2, #2]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
        else {  // big size
          fillRect(x+j*size, y+i*size, size, size, bg);
 80a0afc:	fa0f f886 	sxth.w	r8, r6
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
     ((y + (fontDesc[c].height * size) - 1) < 0))   // Clip top
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 80a0b00:	3302      	adds	r3, #2
 80a0b02:	b29b      	uxth	r3, r3
 80a0b04:	9302      	str	r3, [sp, #8]
 80a0b06:	2300      	movs	r3, #0
 80a0b08:	9303      	str	r3, [sp, #12]
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a0b0a:	b2b3      	uxth	r3, r6
 80a0b0c:	9306      	str	r3, [sp, #24]
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 80a0b0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a0b10:	9907      	ldr	r1, [sp, #28]
 80a0b12:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 80a0b16:	440a      	add	r2, r1
 80a0b18:	7852      	ldrb	r2, [r2, #1]
 80a0b1a:	4293      	cmp	r3, r2
 80a0b1c:	da56      	bge.n	80a0bcc <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a0b1e:	9906      	ldr	r1, [sp, #24]
 80a0b20:	b29b      	uxth	r3, r3
 80a0b22:	fa1f f28a 	uxth.w	r2, sl
 80a0b26:	fb03 2101 	mla	r1, r3, r1, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
 80a0b2a:	4413      	add	r3, r2
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a0b2c:	b209      	sxth	r1, r1
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
 80a0b2e:	b21b      	sxth	r3, r3
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a0b30:	9108      	str	r1, [sp, #32]
 80a0b32:	f04f 0900 	mov.w	r9, #0
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
 80a0b36:	9309      	str	r3, [sp, #36]	; 0x24
	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
    uint8_t line;
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 80a0b38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a0b3a:	9807      	ldr	r0, [sp, #28]
 80a0b3c:	fa4f f189 	sxtb.w	r1, r9
 80a0b40:	5c12      	ldrb	r2, [r2, r0]
 80a0b42:	fa5f f389 	uxtb.w	r3, r9
 80a0b46:	4291      	cmp	r1, r2
 80a0b48:	da3c      	bge.n	80a0bc4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>
      if (bitCount++%8 == 0) {
 80a0b4a:	075a      	lsls	r2, r3, #29
 80a0b4c:	d106      	bne.n	80a0b5c <_ZN12Adafruit_GFX8drawCharEsshtth+0xc0>
        line = pgm_read_byte(fontData+fontIndex++);
 80a0b4e:	9b02      	ldr	r3, [sp, #8]
 80a0b50:	9802      	ldr	r0, [sp, #8]
 80a0b52:	6a22      	ldr	r2, [r4, #32]
 80a0b54:	3301      	adds	r3, #1
 80a0b56:	b29b      	uxth	r3, r3
 80a0b58:	5c17      	ldrb	r7, [r2, r0]
 80a0b5a:	9302      	str	r3, [sp, #8]
      }
      if (line & 0x80) {
 80a0b5c:	063b      	lsls	r3, r7, #24
 80a0b5e:	d50d      	bpl.n	80a0b7c <_ZN12Adafruit_GFX8drawCharEsshtth+0xe0>
        if (size == 1) {// default sizeFast
 80a0b60:	2e01      	cmp	r6, #1
 80a0b62:	d105      	bne.n	80a0b70 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd4>
          drawPixel(x+j, y+i, color);
 80a0b64:	6823      	ldr	r3, [r4, #0]
 80a0b66:	4429      	add	r1, r5
 80a0b68:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0b6c:	9b04      	ldr	r3, [sp, #16]
 80a0b6e:	e010      	b.n	80a0b92 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf6>
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a0b70:	9b06      	ldr	r3, [sp, #24]
 80a0b72:	9a04      	ldr	r2, [sp, #16]
 80a0b74:	fb01 5103 	mla	r1, r1, r3, r5
 80a0b78:	6823      	ldr	r3, [r4, #0]
 80a0b7a:	e014      	b.n	80a0ba6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10a>
        } 
      } else if (bg != color) {
 80a0b7c:	9b04      	ldr	r3, [sp, #16]
 80a0b7e:	9a05      	ldr	r2, [sp, #20]
 80a0b80:	4293      	cmp	r3, r2
 80a0b82:	d01a      	beq.n	80a0bba <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
        if (size == 1) // default size
 80a0b84:	2e01      	cmp	r6, #1
 80a0b86:	d109      	bne.n	80a0b9c <_ZN12Adafruit_GFX8drawCharEsshtth+0x100>
          drawPixel(x+j, y+i, bg);
 80a0b88:	6823      	ldr	r3, [r4, #0]
 80a0b8a:	4429      	add	r1, r5
 80a0b8c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0b90:	4613      	mov	r3, r2
 80a0b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a0b94:	b209      	sxth	r1, r1
 80a0b96:	4620      	mov	r0, r4
 80a0b98:	47d8      	blx	fp
 80a0b9a:	e00e      	b.n	80a0bba <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
        else {  // big size
          fillRect(x+j*size, y+i*size, size, size, bg);
 80a0b9c:	9b06      	ldr	r3, [sp, #24]
 80a0b9e:	9a05      	ldr	r2, [sp, #20]
 80a0ba0:	fb01 5103 	mla	r1, r1, r3, r5
 80a0ba4:	6823      	ldr	r3, [r4, #0]
 80a0ba6:	9201      	str	r2, [sp, #4]
 80a0ba8:	f8cd 8000 	str.w	r8, [sp]
 80a0bac:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a0bb0:	9a08      	ldr	r2, [sp, #32]
 80a0bb2:	4643      	mov	r3, r8
 80a0bb4:	b209      	sxth	r1, r1
 80a0bb6:	4620      	mov	r0, r4
 80a0bb8:	47d8      	blx	fp
        }
      }
      line <<= 1;
 80a0bba:	007f      	lsls	r7, r7, #1
 80a0bbc:	b2ff      	uxtb	r7, r7
 80a0bbe:	f109 0901 	add.w	r9, r9, #1
	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
    uint8_t line;
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 80a0bc2:	e7b9      	b.n	80a0b38 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9c>
 80a0bc4:	9b03      	ldr	r3, [sp, #12]
 80a0bc6:	3301      	adds	r3, #1
 80a0bc8:	9303      	str	r3, [sp, #12]
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 80a0bca:	e7a0      	b.n	80a0b0e <_ZN12Adafruit_GFX8drawCharEsshtth+0x72>
      }
      line <<= 1;
    }
    bitCount = 0;
  }
}
 80a0bcc:	b00b      	add	sp, #44	; 0x2c
 80a0bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0bd2 <_ZN12Adafruit_GFX12drawFastCharEsshtth>:
  }
  return 1;
}

void Adafruit_GFX::drawFastChar(int16_t x, int16_t y, unsigned char c,
                                    uint16_t color, uint16_t bg, uint8_t size) {
 80a0bd2:	b470      	push	{r4, r5, r6}
 80a0bd4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80a0bd8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80a0bdc:	f89d 6014 	ldrb.w	r6, [sp, #20]
  // Update in subclasses if desired!
  drawChar(x,y,c,color,bg,size);
 80a0be0:	9504      	str	r5, [sp, #16]
 80a0be2:	9605      	str	r6, [sp, #20]
 80a0be4:	9403      	str	r4, [sp, #12]
}
 80a0be6:	bc70      	pop	{r4, r5, r6}
}

void Adafruit_GFX::drawFastChar(int16_t x, int16_t y, unsigned char c,
                                    uint16_t color, uint16_t bg, uint8_t size) {
  // Update in subclasses if desired!
  drawChar(x,y,c,color,bg,size);
 80a0be8:	f7ff bf58 	b.w	80a0a9c <_ZN12Adafruit_GFX8drawCharEsshtth>

080a0bec <_ZN12Adafruit_GFX9setCursorEss>:
    bitCount = 0;
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 80a0bec:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 80a0bee:	8242      	strh	r2, [r0, #18]
 80a0bf0:	4770      	bx	lr

080a0bf2 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
 80a0bf2:	82c1      	strh	r1, [r0, #22]
 80a0bf4:	8281      	strh	r1, [r0, #20]
 80a0bf6:	4770      	bx	lr

080a0bf8 <_ZN12Adafruit_GFX11setTextWrapEb>:
  textcolor   = c;
  textbgcolor = b; 
}

void Adafruit_GFX::setTextWrap(boolean w) {
  wrap = w;
 80a0bf8:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 80a0bfc:	4770      	bx	lr

080a0bfe <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80a0bfe:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a0c02:	4770      	bx	lr

080a0c04 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80a0c04:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a0c08:	4770      	bx	lr

080a0c0a <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0c0a:	f000 b823 	b.w	80a0c54 <HAL_Pin_Map>

080a0c0e <_GLOBAL__sub_I_timesNewRoman_8ptBitmaps>:
 80a0c0e:	f000 b821 	b.w	80a0c54 <HAL_Pin_Map>
	...

080a0c14 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0c14:	b508      	push	{r3, lr}
 80a0c16:	4b02      	ldr	r3, [pc, #8]	; (80a0c20 <os_mutex_create+0xc>)
 80a0c18:	681b      	ldr	r3, [r3, #0]
 80a0c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c1c:	9301      	str	r3, [sp, #4]
 80a0c1e:	bd08      	pop	{r3, pc}
 80a0c20:	080601d0 	.word	0x080601d0

080a0c24 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0c24:	b508      	push	{r3, lr}
 80a0c26:	4b02      	ldr	r3, [pc, #8]	; (80a0c30 <HAL_RNG_GetRandomNumber+0xc>)
 80a0c28:	681b      	ldr	r3, [r3, #0]
 80a0c2a:	685b      	ldr	r3, [r3, #4]
 80a0c2c:	9301      	str	r3, [sp, #4]
 80a0c2e:	bd08      	pop	{r3, pc}
 80a0c30:	0806019c 	.word	0x0806019c

080a0c34 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0c34:	b508      	push	{r3, lr}
 80a0c36:	4b02      	ldr	r3, [pc, #8]	; (80a0c40 <HAL_Delay_Microseconds+0xc>)
 80a0c38:	681b      	ldr	r3, [r3, #0]
 80a0c3a:	68db      	ldr	r3, [r3, #12]
 80a0c3c:	9301      	str	r3, [sp, #4]
 80a0c3e:	bd08      	pop	{r3, pc}
 80a0c40:	0806019c 	.word	0x0806019c

080a0c44 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0c44:	b508      	push	{r3, lr}
 80a0c46:	4b02      	ldr	r3, [pc, #8]	; (80a0c50 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0c48:	681b      	ldr	r3, [r3, #0]
 80a0c4a:	695b      	ldr	r3, [r3, #20]
 80a0c4c:	9301      	str	r3, [sp, #4]
 80a0c4e:	bd08      	pop	{r3, pc}
 80a0c50:	0806019c 	.word	0x0806019c

080a0c54 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b02      	ldr	r3, [pc, #8]	; (80a0c60 <HAL_Pin_Map+0xc>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	681b      	ldr	r3, [r3, #0]
 80a0c5c:	9301      	str	r3, [sp, #4]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	080601b0 	.word	0x080601b0

080a0c64 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0c64:	b508      	push	{r3, lr}
 80a0c66:	4b02      	ldr	r3, [pc, #8]	; (80a0c70 <HAL_Validate_Pin_Function+0xc>)
 80a0c68:	681b      	ldr	r3, [r3, #0]
 80a0c6a:	685b      	ldr	r3, [r3, #4]
 80a0c6c:	9301      	str	r3, [sp, #4]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	080601b0 	.word	0x080601b0

080a0c74 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0c74:	b508      	push	{r3, lr}
 80a0c76:	4b02      	ldr	r3, [pc, #8]	; (80a0c80 <HAL_Pin_Mode+0xc>)
 80a0c78:	681b      	ldr	r3, [r3, #0]
 80a0c7a:	689b      	ldr	r3, [r3, #8]
 80a0c7c:	9301      	str	r3, [sp, #4]
 80a0c7e:	bd08      	pop	{r3, pc}
 80a0c80:	080601b0 	.word	0x080601b0

080a0c84 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0c84:	b508      	push	{r3, lr}
 80a0c86:	4b02      	ldr	r3, [pc, #8]	; (80a0c90 <HAL_Get_Pin_Mode+0xc>)
 80a0c88:	681b      	ldr	r3, [r3, #0]
 80a0c8a:	68db      	ldr	r3, [r3, #12]
 80a0c8c:	9301      	str	r3, [sp, #4]
 80a0c8e:	bd08      	pop	{r3, pc}
 80a0c90:	080601b0 	.word	0x080601b0

080a0c94 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0c94:	b508      	push	{r3, lr}
 80a0c96:	4b02      	ldr	r3, [pc, #8]	; (80a0ca0 <HAL_GPIO_Write+0xc>)
 80a0c98:	681b      	ldr	r3, [r3, #0]
 80a0c9a:	691b      	ldr	r3, [r3, #16]
 80a0c9c:	9301      	str	r3, [sp, #4]
 80a0c9e:	bd08      	pop	{r3, pc}
 80a0ca0:	080601b0 	.word	0x080601b0

080a0ca4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a0ca4:	b508      	push	{r3, lr}
 80a0ca6:	4b02      	ldr	r3, [pc, #8]	; (80a0cb0 <HAL_ADC_Read+0xc>)
 80a0ca8:	681b      	ldr	r3, [r3, #0]
 80a0caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0cac:	9301      	str	r3, [sp, #4]
 80a0cae:	bd08      	pop	{r3, pc}
 80a0cb0:	080601b0 	.word	0x080601b0

080a0cb4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0cb4:	b508      	push	{r3, lr}
 80a0cb6:	4b02      	ldr	r3, [pc, #8]	; (80a0cc0 <HAL_I2C_Write_Data+0xc>)
 80a0cb8:	681b      	ldr	r3, [r3, #0]
 80a0cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0cbc:	9301      	str	r3, [sp, #4]
 80a0cbe:	bd08      	pop	{r3, pc}
 80a0cc0:	080601ac 	.word	0x080601ac

080a0cc4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0cc4:	b508      	push	{r3, lr}
 80a0cc6:	4b02      	ldr	r3, [pc, #8]	; (80a0cd0 <HAL_I2C_Available_Data+0xc>)
 80a0cc8:	681b      	ldr	r3, [r3, #0]
 80a0cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0ccc:	9301      	str	r3, [sp, #4]
 80a0cce:	bd08      	pop	{r3, pc}
 80a0cd0:	080601ac 	.word	0x080601ac

080a0cd4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0cd4:	b508      	push	{r3, lr}
 80a0cd6:	4b02      	ldr	r3, [pc, #8]	; (80a0ce0 <HAL_I2C_Read_Data+0xc>)
 80a0cd8:	681b      	ldr	r3, [r3, #0]
 80a0cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0cdc:	9301      	str	r3, [sp, #4]
 80a0cde:	bd08      	pop	{r3, pc}
 80a0ce0:	080601ac 	.word	0x080601ac

080a0ce4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0ce4:	b508      	push	{r3, lr}
 80a0ce6:	4b02      	ldr	r3, [pc, #8]	; (80a0cf0 <HAL_I2C_Peek_Data+0xc>)
 80a0ce8:	681b      	ldr	r3, [r3, #0]
 80a0cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0cec:	9301      	str	r3, [sp, #4]
 80a0cee:	bd08      	pop	{r3, pc}
 80a0cf0:	080601ac 	.word	0x080601ac

080a0cf4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0cf4:	b508      	push	{r3, lr}
 80a0cf6:	4b02      	ldr	r3, [pc, #8]	; (80a0d00 <HAL_I2C_Flush_Data+0xc>)
 80a0cf8:	681b      	ldr	r3, [r3, #0]
 80a0cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0cfc:	9301      	str	r3, [sp, #4]
 80a0cfe:	bd08      	pop	{r3, pc}
 80a0d00:	080601ac 	.word	0x080601ac

080a0d04 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0d04:	b508      	push	{r3, lr}
 80a0d06:	4b02      	ldr	r3, [pc, #8]	; (80a0d10 <HAL_I2C_Is_Enabled+0xc>)
 80a0d08:	681b      	ldr	r3, [r3, #0]
 80a0d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0d0c:	9301      	str	r3, [sp, #4]
 80a0d0e:	bd08      	pop	{r3, pc}
 80a0d10:	080601ac 	.word	0x080601ac

080a0d14 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0d14:	b508      	push	{r3, lr}
 80a0d16:	4b03      	ldr	r3, [pc, #12]	; (80a0d24 <HAL_I2C_Init+0x10>)
 80a0d18:	681b      	ldr	r3, [r3, #0]
 80a0d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0d1e:	9301      	str	r3, [sp, #4]
 80a0d20:	bd08      	pop	{r3, pc}
 80a0d22:	0000      	.short	0x0000
 80a0d24:	080601ac 	.word	0x080601ac

080a0d28 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a0d28:	b508      	push	{r3, lr}
 80a0d2a:	4b02      	ldr	r3, [pc, #8]	; (80a0d34 <HAL_Servo_Attach+0xc>)
 80a0d2c:	681b      	ldr	r3, [r3, #0]
 80a0d2e:	691b      	ldr	r3, [r3, #16]
 80a0d30:	9301      	str	r3, [sp, #4]
 80a0d32:	bd08      	pop	{r3, pc}
 80a0d34:	080601a8 	.word	0x080601a8

080a0d38 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a0d38:	b508      	push	{r3, lr}
 80a0d3a:	4b02      	ldr	r3, [pc, #8]	; (80a0d44 <HAL_Servo_Detach+0xc>)
 80a0d3c:	681b      	ldr	r3, [r3, #0]
 80a0d3e:	695b      	ldr	r3, [r3, #20]
 80a0d40:	9301      	str	r3, [sp, #4]
 80a0d42:	bd08      	pop	{r3, pc}
 80a0d44:	080601a8 	.word	0x080601a8

080a0d48 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a0d48:	b508      	push	{r3, lr}
 80a0d4a:	4b02      	ldr	r3, [pc, #8]	; (80a0d54 <HAL_Servo_Write_Pulse_Width+0xc>)
 80a0d4c:	681b      	ldr	r3, [r3, #0]
 80a0d4e:	699b      	ldr	r3, [r3, #24]
 80a0d50:	9301      	str	r3, [sp, #4]
 80a0d52:	bd08      	pop	{r3, pc}
 80a0d54:	080601a8 	.word	0x080601a8

080a0d58 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a0d58:	b508      	push	{r3, lr}
 80a0d5a:	4b02      	ldr	r3, [pc, #8]	; (80a0d64 <HAL_SPI_Begin+0xc>)
 80a0d5c:	681b      	ldr	r3, [r3, #0]
 80a0d5e:	681b      	ldr	r3, [r3, #0]
 80a0d60:	9301      	str	r3, [sp, #4]
 80a0d62:	bd08      	pop	{r3, pc}
 80a0d64:	080601b4 	.word	0x080601b4

080a0d68 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a0d68:	b508      	push	{r3, lr}
 80a0d6a:	4b02      	ldr	r3, [pc, #8]	; (80a0d74 <HAL_SPI_Set_Bit_Order+0xc>)
 80a0d6c:	681b      	ldr	r3, [r3, #0]
 80a0d6e:	689b      	ldr	r3, [r3, #8]
 80a0d70:	9301      	str	r3, [sp, #4]
 80a0d72:	bd08      	pop	{r3, pc}
 80a0d74:	080601b4 	.word	0x080601b4

080a0d78 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a0d78:	b508      	push	{r3, lr}
 80a0d7a:	4b02      	ldr	r3, [pc, #8]	; (80a0d84 <HAL_SPI_Set_Data_Mode+0xc>)
 80a0d7c:	681b      	ldr	r3, [r3, #0]
 80a0d7e:	68db      	ldr	r3, [r3, #12]
 80a0d80:	9301      	str	r3, [sp, #4]
 80a0d82:	bd08      	pop	{r3, pc}
 80a0d84:	080601b4 	.word	0x080601b4

080a0d88 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a0d88:	b508      	push	{r3, lr}
 80a0d8a:	4b02      	ldr	r3, [pc, #8]	; (80a0d94 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a0d8c:	681b      	ldr	r3, [r3, #0]
 80a0d8e:	691b      	ldr	r3, [r3, #16]
 80a0d90:	9301      	str	r3, [sp, #4]
 80a0d92:	bd08      	pop	{r3, pc}
 80a0d94:	080601b4 	.word	0x080601b4

080a0d98 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a0d98:	b508      	push	{r3, lr}
 80a0d9a:	4b02      	ldr	r3, [pc, #8]	; (80a0da4 <HAL_SPI_Send_Receive_Data+0xc>)
 80a0d9c:	681b      	ldr	r3, [r3, #0]
 80a0d9e:	695b      	ldr	r3, [r3, #20]
 80a0da0:	9301      	str	r3, [sp, #4]
 80a0da2:	bd08      	pop	{r3, pc}
 80a0da4:	080601b4 	.word	0x080601b4

080a0da8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0da8:	b508      	push	{r3, lr}
 80a0daa:	4b02      	ldr	r3, [pc, #8]	; (80a0db4 <HAL_SPI_Init+0xc>)
 80a0dac:	681b      	ldr	r3, [r3, #0]
 80a0dae:	69db      	ldr	r3, [r3, #28]
 80a0db0:	9301      	str	r3, [sp, #4]
 80a0db2:	bd08      	pop	{r3, pc}
 80a0db4:	080601b4 	.word	0x080601b4

080a0db8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0db8:	b508      	push	{r3, lr}
 80a0dba:	4b02      	ldr	r3, [pc, #8]	; (80a0dc4 <HAL_SPI_Is_Enabled+0xc>)
 80a0dbc:	681b      	ldr	r3, [r3, #0]
 80a0dbe:	6a1b      	ldr	r3, [r3, #32]
 80a0dc0:	9301      	str	r3, [sp, #4]
 80a0dc2:	bd08      	pop	{r3, pc}
 80a0dc4:	080601b4 	.word	0x080601b4

080a0dc8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a0dc8:	b508      	push	{r3, lr}
 80a0dca:	4b02      	ldr	r3, [pc, #8]	; (80a0dd4 <HAL_SPI_Info+0xc>)
 80a0dcc:	681b      	ldr	r3, [r3, #0]
 80a0dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0dd0:	9301      	str	r3, [sp, #4]
 80a0dd2:	bd08      	pop	{r3, pc}
 80a0dd4:	080601b4 	.word	0x080601b4

080a0dd8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0dd8:	b508      	push	{r3, lr}
 80a0dda:	4b02      	ldr	r3, [pc, #8]	; (80a0de4 <HAL_USART_Init+0xc>)
 80a0ddc:	681b      	ldr	r3, [r3, #0]
 80a0dde:	699b      	ldr	r3, [r3, #24]
 80a0de0:	9301      	str	r3, [sp, #4]
 80a0de2:	bd08      	pop	{r3, pc}
 80a0de4:	080601c4 	.word	0x080601c4

080a0de8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0de8:	b508      	push	{r3, lr}
 80a0dea:	4b02      	ldr	r3, [pc, #8]	; (80a0df4 <HAL_USART_Write_Data+0xc>)
 80a0dec:	681b      	ldr	r3, [r3, #0]
 80a0dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0df0:	9301      	str	r3, [sp, #4]
 80a0df2:	bd08      	pop	{r3, pc}
 80a0df4:	080601c4 	.word	0x080601c4

080a0df8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0df8:	b508      	push	{r3, lr}
 80a0dfa:	4b02      	ldr	r3, [pc, #8]	; (80a0e04 <HAL_USART_Available_Data+0xc>)
 80a0dfc:	681b      	ldr	r3, [r3, #0]
 80a0dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0e00:	9301      	str	r3, [sp, #4]
 80a0e02:	bd08      	pop	{r3, pc}
 80a0e04:	080601c4 	.word	0x080601c4

080a0e08 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0e08:	b508      	push	{r3, lr}
 80a0e0a:	4b02      	ldr	r3, [pc, #8]	; (80a0e14 <HAL_USART_Read_Data+0xc>)
 80a0e0c:	681b      	ldr	r3, [r3, #0]
 80a0e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e10:	9301      	str	r3, [sp, #4]
 80a0e12:	bd08      	pop	{r3, pc}
 80a0e14:	080601c4 	.word	0x080601c4

080a0e18 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0e18:	b508      	push	{r3, lr}
 80a0e1a:	4b02      	ldr	r3, [pc, #8]	; (80a0e24 <HAL_USART_Peek_Data+0xc>)
 80a0e1c:	681b      	ldr	r3, [r3, #0]
 80a0e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e20:	9301      	str	r3, [sp, #4]
 80a0e22:	bd08      	pop	{r3, pc}
 80a0e24:	080601c4 	.word	0x080601c4

080a0e28 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0e28:	b508      	push	{r3, lr}
 80a0e2a:	4b02      	ldr	r3, [pc, #8]	; (80a0e34 <HAL_USART_Flush_Data+0xc>)
 80a0e2c:	681b      	ldr	r3, [r3, #0]
 80a0e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0e30:	9301      	str	r3, [sp, #4]
 80a0e32:	bd08      	pop	{r3, pc}
 80a0e34:	080601c4 	.word	0x080601c4

080a0e38 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0e38:	b508      	push	{r3, lr}
 80a0e3a:	4b02      	ldr	r3, [pc, #8]	; (80a0e44 <HAL_USART_Is_Enabled+0xc>)
 80a0e3c:	681b      	ldr	r3, [r3, #0]
 80a0e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0e40:	9301      	str	r3, [sp, #4]
 80a0e42:	bd08      	pop	{r3, pc}
 80a0e44:	080601c4 	.word	0x080601c4

080a0e48 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0e48:	b508      	push	{r3, lr}
 80a0e4a:	4b02      	ldr	r3, [pc, #8]	; (80a0e54 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0e4c:	681b      	ldr	r3, [r3, #0]
 80a0e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0e50:	9301      	str	r3, [sp, #4]
 80a0e52:	bd08      	pop	{r3, pc}
 80a0e54:	080601c4 	.word	0x080601c4

080a0e58 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0e58:	b508      	push	{r3, lr}
 80a0e5a:	4b02      	ldr	r3, [pc, #8]	; (80a0e64 <HAL_USB_USART_Init+0xc>)
 80a0e5c:	681b      	ldr	r3, [r3, #0]
 80a0e5e:	681b      	ldr	r3, [r3, #0]
 80a0e60:	9301      	str	r3, [sp, #4]
 80a0e62:	bd08      	pop	{r3, pc}
 80a0e64:	080601d8 	.word	0x080601d8

080a0e68 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0e68:	b508      	push	{r3, lr}
 80a0e6a:	4b02      	ldr	r3, [pc, #8]	; (80a0e74 <HAL_USB_USART_Begin+0xc>)
 80a0e6c:	681b      	ldr	r3, [r3, #0]
 80a0e6e:	685b      	ldr	r3, [r3, #4]
 80a0e70:	9301      	str	r3, [sp, #4]
 80a0e72:	bd08      	pop	{r3, pc}
 80a0e74:	080601d8 	.word	0x080601d8

080a0e78 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0e78:	b508      	push	{r3, lr}
 80a0e7a:	4b02      	ldr	r3, [pc, #8]	; (80a0e84 <HAL_USB_USART_Available_Data+0xc>)
 80a0e7c:	681b      	ldr	r3, [r3, #0]
 80a0e7e:	691b      	ldr	r3, [r3, #16]
 80a0e80:	9301      	str	r3, [sp, #4]
 80a0e82:	bd08      	pop	{r3, pc}
 80a0e84:	080601d8 	.word	0x080601d8

080a0e88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0e88:	b508      	push	{r3, lr}
 80a0e8a:	4b02      	ldr	r3, [pc, #8]	; (80a0e94 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0e8c:	681b      	ldr	r3, [r3, #0]
 80a0e8e:	695b      	ldr	r3, [r3, #20]
 80a0e90:	9301      	str	r3, [sp, #4]
 80a0e92:	bd08      	pop	{r3, pc}
 80a0e94:	080601d8 	.word	0x080601d8

080a0e98 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0e98:	b508      	push	{r3, lr}
 80a0e9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ea4 <HAL_USB_USART_Receive_Data+0xc>)
 80a0e9c:	681b      	ldr	r3, [r3, #0]
 80a0e9e:	699b      	ldr	r3, [r3, #24]
 80a0ea0:	9301      	str	r3, [sp, #4]
 80a0ea2:	bd08      	pop	{r3, pc}
 80a0ea4:	080601d8 	.word	0x080601d8

080a0ea8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0ea8:	b508      	push	{r3, lr}
 80a0eaa:	4b02      	ldr	r3, [pc, #8]	; (80a0eb4 <HAL_USB_USART_Send_Data+0xc>)
 80a0eac:	681b      	ldr	r3, [r3, #0]
 80a0eae:	69db      	ldr	r3, [r3, #28]
 80a0eb0:	9301      	str	r3, [sp, #4]
 80a0eb2:	bd08      	pop	{r3, pc}
 80a0eb4:	080601d8 	.word	0x080601d8

080a0eb8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0eb8:	b508      	push	{r3, lr}
 80a0eba:	4b02      	ldr	r3, [pc, #8]	; (80a0ec4 <HAL_USB_USART_Flush_Data+0xc>)
 80a0ebc:	681b      	ldr	r3, [r3, #0]
 80a0ebe:	6a1b      	ldr	r3, [r3, #32]
 80a0ec0:	9301      	str	r3, [sp, #4]
 80a0ec2:	bd08      	pop	{r3, pc}
 80a0ec4:	080601d8 	.word	0x080601d8

080a0ec8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0ec8:	b508      	push	{r3, lr}
 80a0eca:	4b02      	ldr	r3, [pc, #8]	; (80a0ed4 <inet_gethostbyname+0xc>)
 80a0ecc:	681b      	ldr	r3, [r3, #0]
 80a0ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0ed0:	9301      	str	r3, [sp, #4]
 80a0ed2:	bd08      	pop	{r3, pc}
 80a0ed4:	080601c0 	.word	0x080601c0

080a0ed8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0ed8:	b508      	push	{r3, lr}
 80a0eda:	4b02      	ldr	r3, [pc, #8]	; (80a0ee4 <panic_+0xc>)
 80a0edc:	681b      	ldr	r3, [r3, #0]
 80a0ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ee0:	9301      	str	r3, [sp, #4]
 80a0ee2:	bd08      	pop	{r3, pc}
 80a0ee4:	080201a8 	.word	0x080201a8

080a0ee8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0ee8:	b508      	push	{r3, lr}
 80a0eea:	4b02      	ldr	r3, [pc, #8]	; (80a0ef4 <set_system_mode+0xc>)
 80a0eec:	681b      	ldr	r3, [r3, #0]
 80a0eee:	685b      	ldr	r3, [r3, #4]
 80a0ef0:	9301      	str	r3, [sp, #4]
 80a0ef2:	bd08      	pop	{r3, pc}
 80a0ef4:	080601a4 	.word	0x080601a4

080a0ef8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0ef8:	b508      	push	{r3, lr}
 80a0efa:	4b02      	ldr	r3, [pc, #8]	; (80a0f04 <system_delay_ms+0xc>)
 80a0efc:	681b      	ldr	r3, [r3, #0]
 80a0efe:	695b      	ldr	r3, [r3, #20]
 80a0f00:	9301      	str	r3, [sp, #4]
 80a0f02:	bd08      	pop	{r3, pc}
 80a0f04:	080601a4 	.word	0x080601a4

080a0f08 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0f08:	b508      	push	{r3, lr}
 80a0f0a:	4b03      	ldr	r3, [pc, #12]	; (80a0f18 <system_ctrl_set_app_request_handler+0x10>)
 80a0f0c:	681b      	ldr	r3, [r3, #0]
 80a0f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0f12:	9301      	str	r3, [sp, #4]
 80a0f14:	bd08      	pop	{r3, pc}
 80a0f16:	0000      	.short	0x0000
 80a0f18:	080601a4 	.word	0x080601a4

080a0f1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0f1c:	b508      	push	{r3, lr}
 80a0f1e:	4b03      	ldr	r3, [pc, #12]	; (80a0f2c <system_ctrl_set_result+0x10>)
 80a0f20:	681b      	ldr	r3, [r3, #0]
 80a0f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0f26:	9301      	str	r3, [sp, #4]
 80a0f28:	bd08      	pop	{r3, pc}
 80a0f2a:	0000      	.short	0x0000
 80a0f2c:	080601a4 	.word	0x080601a4

080a0f30 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0f30:	b508      	push	{r3, lr}
 80a0f32:	4b02      	ldr	r3, [pc, #8]	; (80a0f3c <spark_function+0xc>)
 80a0f34:	681b      	ldr	r3, [r3, #0]
 80a0f36:	685b      	ldr	r3, [r3, #4]
 80a0f38:	9301      	str	r3, [sp, #4]
 80a0f3a:	bd08      	pop	{r3, pc}
 80a0f3c:	080601cc 	.word	0x080601cc

080a0f40 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0f40:	b508      	push	{r3, lr}
 80a0f42:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0f44:	681b      	ldr	r3, [r3, #0]
 80a0f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0f48:	9301      	str	r3, [sp, #4]
 80a0f4a:	bd08      	pop	{r3, pc}
 80a0f4c:	080601cc 	.word	0x080601cc

080a0f50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f50:	b508      	push	{r3, lr}
 80a0f52:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <network_connect+0xc>)
 80a0f54:	681b      	ldr	r3, [r3, #0]
 80a0f56:	685b      	ldr	r3, [r3, #4]
 80a0f58:	9301      	str	r3, [sp, #4]
 80a0f5a:	bd08      	pop	{r3, pc}
 80a0f5c:	080601c8 	.word	0x080601c8

080a0f60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0f60:	b508      	push	{r3, lr}
 80a0f62:	4b02      	ldr	r3, [pc, #8]	; (80a0f6c <network_connecting+0xc>)
 80a0f64:	681b      	ldr	r3, [r3, #0]
 80a0f66:	689b      	ldr	r3, [r3, #8]
 80a0f68:	9301      	str	r3, [sp, #4]
 80a0f6a:	bd08      	pop	{r3, pc}
 80a0f6c:	080601c8 	.word	0x080601c8

080a0f70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0f70:	b508      	push	{r3, lr}
 80a0f72:	4b02      	ldr	r3, [pc, #8]	; (80a0f7c <network_disconnect+0xc>)
 80a0f74:	681b      	ldr	r3, [r3, #0]
 80a0f76:	68db      	ldr	r3, [r3, #12]
 80a0f78:	9301      	str	r3, [sp, #4]
 80a0f7a:	bd08      	pop	{r3, pc}
 80a0f7c:	080601c8 	.word	0x080601c8

080a0f80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0f80:	b508      	push	{r3, lr}
 80a0f82:	4b02      	ldr	r3, [pc, #8]	; (80a0f8c <network_ready+0xc>)
 80a0f84:	681b      	ldr	r3, [r3, #0]
 80a0f86:	691b      	ldr	r3, [r3, #16]
 80a0f88:	9301      	str	r3, [sp, #4]
 80a0f8a:	bd08      	pop	{r3, pc}
 80a0f8c:	080601c8 	.word	0x080601c8

080a0f90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0f90:	b508      	push	{r3, lr}
 80a0f92:	4b02      	ldr	r3, [pc, #8]	; (80a0f9c <network_on+0xc>)
 80a0f94:	681b      	ldr	r3, [r3, #0]
 80a0f96:	695b      	ldr	r3, [r3, #20]
 80a0f98:	9301      	str	r3, [sp, #4]
 80a0f9a:	bd08      	pop	{r3, pc}
 80a0f9c:	080601c8 	.word	0x080601c8

080a0fa0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0fa0:	b508      	push	{r3, lr}
 80a0fa2:	4b02      	ldr	r3, [pc, #8]	; (80a0fac <network_off+0xc>)
 80a0fa4:	681b      	ldr	r3, [r3, #0]
 80a0fa6:	699b      	ldr	r3, [r3, #24]
 80a0fa8:	9301      	str	r3, [sp, #4]
 80a0faa:	bd08      	pop	{r3, pc}
 80a0fac:	080601c8 	.word	0x080601c8

080a0fb0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0fb0:	b508      	push	{r3, lr}
 80a0fb2:	4b02      	ldr	r3, [pc, #8]	; (80a0fbc <network_listen+0xc>)
 80a0fb4:	681b      	ldr	r3, [r3, #0]
 80a0fb6:	69db      	ldr	r3, [r3, #28]
 80a0fb8:	9301      	str	r3, [sp, #4]
 80a0fba:	bd08      	pop	{r3, pc}
 80a0fbc:	080601c8 	.word	0x080601c8

080a0fc0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0fc0:	b508      	push	{r3, lr}
 80a0fc2:	4b02      	ldr	r3, [pc, #8]	; (80a0fcc <network_listening+0xc>)
 80a0fc4:	681b      	ldr	r3, [r3, #0]
 80a0fc6:	6a1b      	ldr	r3, [r3, #32]
 80a0fc8:	9301      	str	r3, [sp, #4]
 80a0fca:	bd08      	pop	{r3, pc}
 80a0fcc:	080601c8 	.word	0x080601c8

080a0fd0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0fd0:	b508      	push	{r3, lr}
 80a0fd2:	4b02      	ldr	r3, [pc, #8]	; (80a0fdc <network_set_listen_timeout+0xc>)
 80a0fd4:	681b      	ldr	r3, [r3, #0]
 80a0fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fd8:	9301      	str	r3, [sp, #4]
 80a0fda:	bd08      	pop	{r3, pc}
 80a0fdc:	080601c8 	.word	0x080601c8

080a0fe0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0fe0:	b508      	push	{r3, lr}
 80a0fe2:	4b02      	ldr	r3, [pc, #8]	; (80a0fec <network_get_listen_timeout+0xc>)
 80a0fe4:	681b      	ldr	r3, [r3, #0]
 80a0fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0fe8:	9301      	str	r3, [sp, #4]
 80a0fea:	bd08      	pop	{r3, pc}
 80a0fec:	080601c8 	.word	0x080601c8

080a0ff0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0ff0:	b508      	push	{r3, lr}
 80a0ff2:	4b02      	ldr	r3, [pc, #8]	; (80a0ffc <malloc+0xc>)
 80a0ff4:	681b      	ldr	r3, [r3, #0]
 80a0ff6:	681b      	ldr	r3, [r3, #0]
 80a0ff8:	9301      	str	r3, [sp, #4]
 80a0ffa:	bd08      	pop	{r3, pc}
 80a0ffc:	080601a0 	.word	0x080601a0

080a1000 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1000:	b508      	push	{r3, lr}
 80a1002:	4b02      	ldr	r3, [pc, #8]	; (80a100c <free+0xc>)
 80a1004:	681b      	ldr	r3, [r3, #0]
 80a1006:	685b      	ldr	r3, [r3, #4]
 80a1008:	9301      	str	r3, [sp, #4]
 80a100a:	bd08      	pop	{r3, pc}
 80a100c:	080601a0 	.word	0x080601a0

080a1010 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1010:	b508      	push	{r3, lr}
 80a1012:	4b02      	ldr	r3, [pc, #8]	; (80a101c <realloc+0xc>)
 80a1014:	681b      	ldr	r3, [r3, #0]
 80a1016:	689b      	ldr	r3, [r3, #8]
 80a1018:	9301      	str	r3, [sp, #4]
 80a101a:	bd08      	pop	{r3, pc}
 80a101c:	080601a0 	.word	0x080601a0

080a1020 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a1020:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
 80a1022:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
 80a1024:	d007      	beq.n	80a1036 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a1026:	9d03      	ldr	r5, [sp, #12]
 80a1028:	1a44      	subs	r4, r0, r1
 80a102a:	1aed      	subs	r5, r5, r3
 80a102c:	436c      	muls	r4, r5
 80a102e:	1a52      	subs	r2, r2, r1
 80a1030:	fb94 f4f2 	sdiv	r4, r4, r2
 80a1034:	18e0      	adds	r0, r4, r3
}
 80a1036:	bd30      	pop	{r4, r5, pc}

080a1038 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1038:	2100      	movs	r1, #0
 80a103a:	f7ff bf5d 	b.w	80a0ef8 <system_delay_ms>

080a103e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a103e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1040:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1042:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1044:	b113      	cbz	r3, 80a104c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1046:	2203      	movs	r2, #3
 80a1048:	4601      	mov	r1, r0
 80a104a:	4798      	blx	r3
    }
 80a104c:	4620      	mov	r0, r4
 80a104e:	bd10      	pop	{r4, pc}

080a1050 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1050:	b510      	push	{r4, lr}
 80a1052:	b088      	sub	sp, #32
 80a1054:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1056:	4668      	mov	r0, sp
 80a1058:	f000 fb30 	bl	80a16bc <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a105c:	4669      	mov	r1, sp
 80a105e:	a804      	add	r0, sp, #16
 80a1060:	f000 fb4e 	bl	80a1700 <_ZN6StringC1ERKS_>
 80a1064:	a804      	add	r0, sp, #16
 80a1066:	47a0      	blx	r4
 80a1068:	4604      	mov	r4, r0
 80a106a:	a804      	add	r0, sp, #16
 80a106c:	f000 fadf 	bl	80a162e <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1070:	4668      	mov	r0, sp
 80a1072:	f000 fadc 	bl	80a162e <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a1076:	4620      	mov	r0, r4
 80a1078:	b008      	add	sp, #32
 80a107a:	bd10      	pop	{r4, pc}

080a107c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a107e:	4607      	mov	r7, r0
 80a1080:	460e      	mov	r6, r1
 80a1082:	4615      	mov	r5, r2
 80a1084:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a1086:	2410      	movs	r4, #16
 80a1088:	4622      	mov	r2, r4
 80a108a:	2100      	movs	r1, #0
 80a108c:	4668      	mov	r0, sp
 80a108e:	f000 ffe4 	bl	80a205a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1092:	2200      	movs	r2, #0
 80a1094:	4669      	mov	r1, sp
 80a1096:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a1098:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a109c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a109e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a10a0:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a10a2:	f7ff ff45 	bl	80a0f30 <spark_function>
}
 80a10a6:	b005      	add	sp, #20
 80a10a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a10aa <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a10aa:	4770      	bx	lr

080a10ac <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a10ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10ae:	4606      	mov	r6, r0
 80a10b0:	4615      	mov	r5, r2
 80a10b2:	460c      	mov	r4, r1
 80a10b4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a10b6:	42bc      	cmp	r4, r7
 80a10b8:	d006      	beq.n	80a10c8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a10ba:	6833      	ldr	r3, [r6, #0]
 80a10bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a10c0:	689b      	ldr	r3, [r3, #8]
 80a10c2:	4630      	mov	r0, r6
 80a10c4:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a10c6:	e7f6      	b.n	80a10b6 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a10c8:	4628      	mov	r0, r5
 80a10ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10cc <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a10cc:	2200      	movs	r2, #0
 80a10ce:	7c00      	ldrb	r0, [r0, #16]
 80a10d0:	f7ff bdf0 	b.w	80a0cb4 <HAL_I2C_Write_Data>

080a10d4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a10d4:	2100      	movs	r1, #0
 80a10d6:	7c00      	ldrb	r0, [r0, #16]
 80a10d8:	f7ff bdf4 	b.w	80a0cc4 <HAL_I2C_Available_Data>

080a10dc <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a10dc:	2100      	movs	r1, #0
 80a10de:	7c00      	ldrb	r0, [r0, #16]
 80a10e0:	f7ff bdf8 	b.w	80a0cd4 <HAL_I2C_Read_Data>

080a10e4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a10e4:	2100      	movs	r1, #0
 80a10e6:	7c00      	ldrb	r0, [r0, #16]
 80a10e8:	f7ff bdfc 	b.w	80a0ce4 <HAL_I2C_Peek_Data>

080a10ec <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a10ec:	2100      	movs	r1, #0
 80a10ee:	7c00      	ldrb	r0, [r0, #16]
 80a10f0:	f7ff be00 	b.w	80a0cf4 <HAL_I2C_Flush_Data>

080a10f4 <_ZN7TwoWireD0Ev>:
 80a10f4:	b510      	push	{r4, lr}
 80a10f6:	4604      	mov	r4, r0
 80a10f8:	2114      	movs	r1, #20
 80a10fa:	f000 fe4a 	bl	80a1d92 <_ZdlPvj>
 80a10fe:	4620      	mov	r0, r4
 80a1100:	bd10      	pop	{r4, pc}
	...

080a1104 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1104:	b510      	push	{r4, lr}
 80a1106:	4604      	mov	r4, r0
 80a1108:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a110e:	60a3      	str	r3, [r4, #8]
 80a1110:	4b04      	ldr	r3, [pc, #16]	; (80a1124 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1112:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1114:	7420      	strb	r0, [r4, #16]
 80a1116:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1118:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a111a:	f7ff fdfb 	bl	80a0d14 <HAL_I2C_Init>

}
 80a111e:	4620      	mov	r0, r4
 80a1120:	bd10      	pop	{r4, pc}
 80a1122:	bf00      	nop
 80a1124:	080a4604 	.word	0x080a4604

080a1128 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1128:	2100      	movs	r1, #0
 80a112a:	7c00      	ldrb	r0, [r0, #16]
 80a112c:	f7ff bdea 	b.w	80a0d04 <HAL_I2C_Is_Enabled>

080a1130 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1130:	4770      	bx	lr

080a1132 <_ZN9IPAddressD0Ev>:
 80a1132:	b510      	push	{r4, lr}
 80a1134:	4604      	mov	r4, r0
 80a1136:	2118      	movs	r1, #24
 80a1138:	f000 fe2b 	bl	80a1d92 <_ZdlPvj>
 80a113c:	4620      	mov	r0, r4
 80a113e:	bd10      	pop	{r4, pc}

080a1140 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1142:	460f      	mov	r7, r1
 80a1144:	f100 0608 	add.w	r6, r0, #8
 80a1148:	1d05      	adds	r5, r0, #4
 80a114a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a114c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1150:	220a      	movs	r2, #10
 80a1152:	4638      	mov	r0, r7
 80a1154:	f000 f921 	bl	80a139a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1158:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a115a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a115c:	d007      	beq.n	80a116e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a115e:	2c00      	cmp	r4, #0
 80a1160:	d0f4      	beq.n	80a114c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1162:	212e      	movs	r1, #46	; 0x2e
 80a1164:	4638      	mov	r0, r7
 80a1166:	f000 f8df 	bl	80a1328 <_ZN5Print5printEc>
 80a116a:	4404      	add	r4, r0
 80a116c:	e7ee      	b.n	80a114c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a116e:	4620      	mov	r0, r4
 80a1170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1174 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1174:	b510      	push	{r4, lr}
 80a1176:	4604      	mov	r4, r0
 80a1178:	4b04      	ldr	r3, [pc, #16]	; (80a118c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a117a:	2211      	movs	r2, #17
 80a117c:	f840 3b04 	str.w	r3, [r0], #4
 80a1180:	2100      	movs	r1, #0
 80a1182:	f000 ff6a 	bl	80a205a <memset>
{
    clear();
}
 80a1186:	4620      	mov	r0, r4
 80a1188:	bd10      	pop	{r4, pc}
 80a118a:	bf00      	nop
 80a118c:	080a462c 	.word	0x080a462c

080a1190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1190:	4603      	mov	r3, r0
 80a1192:	4a07      	ldr	r2, [pc, #28]	; (80a11b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1194:	b510      	push	{r4, lr}
 80a1196:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a119a:	f101 0210 	add.w	r2, r1, #16
 80a119e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a11a2:	4291      	cmp	r1, r2
 80a11a4:	f843 4b04 	str.w	r4, [r3], #4
 80a11a8:	d1f9      	bne.n	80a119e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a11aa:	780a      	ldrb	r2, [r1, #0]
 80a11ac:	701a      	strb	r2, [r3, #0]
}
 80a11ae:	bd10      	pop	{r4, pc}
 80a11b0:	080a462c 	.word	0x080a462c

080a11b4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a11b4:	4a02      	ldr	r2, [pc, #8]	; (80a11c0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a11b6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a11b8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a11ba:	2204      	movs	r2, #4
 80a11bc:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a11be:	4770      	bx	lr
 80a11c0:	080a462c 	.word	0x080a462c

080a11c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a11c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a11c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a11ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a11ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a11d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a11d6:	2304      	movs	r3, #4
 80a11d8:	6041      	str	r1, [r0, #4]
 80a11da:	7503      	strb	r3, [r0, #20]
 80a11dc:	bd10      	pop	{r4, pc}
	...

080a11e0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a11e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a11e2:	4d04      	ldr	r5, [pc, #16]	; (80a11f4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a11e4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a11e6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a11ea:	9500      	str	r5, [sp, #0]
 80a11ec:	f7ff ffea 	bl	80a11c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a11f0:	b003      	add	sp, #12
 80a11f2:	bd30      	pop	{r4, r5, pc}
 80a11f4:	080a462c 	.word	0x080a462c

080a11f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a11f8:	4a01      	ldr	r2, [pc, #4]	; (80a1200 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a11fa:	4b02      	ldr	r3, [pc, #8]	; (80a1204 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a11fc:	601a      	str	r2, [r3, #0]
 80a11fe:	4770      	bx	lr
 80a1200:	080a46ae 	.word	0x080a46ae
 80a1204:	200000b0 	.word	0x200000b0

080a1208 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1208:	2300      	movs	r3, #0
 80a120a:	461a      	mov	r2, r3
 80a120c:	6840      	ldr	r0, [r0, #4]
 80a120e:	f7ff be9f 	b.w	80a0f50 <network_connect>

080a1212 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1212:	2200      	movs	r2, #0
 80a1214:	2102      	movs	r1, #2
 80a1216:	6840      	ldr	r0, [r0, #4]
 80a1218:	f7ff beaa 	b.w	80a0f70 <network_disconnect>

080a121c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a121c:	2200      	movs	r2, #0
 80a121e:	4611      	mov	r1, r2
 80a1220:	6840      	ldr	r0, [r0, #4]
 80a1222:	f7ff be9d 	b.w	80a0f60 <network_connecting>

080a1226 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1226:	2200      	movs	r2, #0
 80a1228:	4611      	mov	r1, r2
 80a122a:	6840      	ldr	r0, [r0, #4]
 80a122c:	f7ff bea8 	b.w	80a0f80 <network_ready>

080a1230 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1230:	2300      	movs	r3, #0
 80a1232:	461a      	mov	r2, r3
 80a1234:	4619      	mov	r1, r3
 80a1236:	6840      	ldr	r0, [r0, #4]
 80a1238:	f7ff beaa 	b.w	80a0f90 <network_on>

080a123c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a123c:	2300      	movs	r3, #0
 80a123e:	461a      	mov	r2, r3
 80a1240:	4619      	mov	r1, r3
 80a1242:	6840      	ldr	r0, [r0, #4]
 80a1244:	f7ff beac 	b.w	80a0fa0 <network_off>

080a1248 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1248:	2200      	movs	r2, #0
 80a124a:	f081 0101 	eor.w	r1, r1, #1
 80a124e:	6840      	ldr	r0, [r0, #4]
 80a1250:	f7ff beae 	b.w	80a0fb0 <network_listen>

080a1254 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1254:	2200      	movs	r2, #0
 80a1256:	6840      	ldr	r0, [r0, #4]
 80a1258:	f7ff beba 	b.w	80a0fd0 <network_set_listen_timeout>

080a125c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a125c:	2200      	movs	r2, #0
 80a125e:	4611      	mov	r1, r2
 80a1260:	6840      	ldr	r0, [r0, #4]
 80a1262:	f7ff bebd 	b.w	80a0fe0 <network_get_listen_timeout>

080a1266 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1266:	2200      	movs	r2, #0
 80a1268:	4611      	mov	r1, r2
 80a126a:	6840      	ldr	r0, [r0, #4]
 80a126c:	f7ff bea8 	b.w	80a0fc0 <network_listening>

080a1270 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1270:	b570      	push	{r4, r5, r6, lr}
 80a1272:	4616      	mov	r6, r2
 80a1274:	b08e      	sub	sp, #56	; 0x38
 80a1276:	4604      	mov	r4, r0
    IPAddress addr;
 80a1278:	a808      	add	r0, sp, #32
 80a127a:	f7ff ff7b 	bl	80a1174 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a127e:	2211      	movs	r2, #17
 80a1280:	2100      	movs	r1, #0
 80a1282:	a803      	add	r0, sp, #12
 80a1284:	f000 fee9 	bl	80a205a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1288:	4630      	mov	r0, r6
 80a128a:	f000 ff21 	bl	80a20d0 <strlen>
 80a128e:	2500      	movs	r5, #0
 80a1290:	4b0a      	ldr	r3, [pc, #40]	; (80a12bc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1292:	9500      	str	r5, [sp, #0]
 80a1294:	b281      	uxth	r1, r0
 80a1296:	685b      	ldr	r3, [r3, #4]
 80a1298:	aa03      	add	r2, sp, #12
 80a129a:	4630      	mov	r0, r6
 80a129c:	f7ff fe14 	bl	80a0ec8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a12a0:	b120      	cbz	r0, 80a12ac <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a12a2:	4629      	mov	r1, r5
 80a12a4:	4620      	mov	r0, r4
 80a12a6:	f7ff ff85 	bl	80a11b4 <_ZN9IPAddressC1Em>
 80a12aa:	e003      	b.n	80a12b4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a12ac:	a903      	add	r1, sp, #12
 80a12ae:	4620      	mov	r0, r4
 80a12b0:	f7ff ff6e 	bl	80a1190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a12b4:	4620      	mov	r0, r4
 80a12b6:	b00e      	add	sp, #56	; 0x38
 80a12b8:	bd70      	pop	{r4, r5, r6, pc}
 80a12ba:	bf00      	nop
 80a12bc:	20000534 	.word	0x20000534

080a12c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a12c0:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a12c2:	4a03      	ldr	r2, [pc, #12]	; (80a12d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a12c4:	601a      	str	r2, [r3, #0]
 80a12c6:	2200      	movs	r2, #0
 80a12c8:	605a      	str	r2, [r3, #4]
 80a12ca:	4770      	bx	lr
 80a12cc:	200000b4 	.word	0x200000b4
 80a12d0:	080a4724 	.word	0x080a4724

080a12d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a12d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12d6:	4606      	mov	r6, r0
 80a12d8:	460d      	mov	r5, r1
 80a12da:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a12dc:	2400      	movs	r4, #0
  while (size--) {
 80a12de:	42bd      	cmp	r5, r7
 80a12e0:	d00c      	beq.n	80a12fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a12e2:	6833      	ldr	r3, [r6, #0]
 80a12e4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a12e8:	689b      	ldr	r3, [r3, #8]
 80a12ea:	4630      	mov	r0, r6
 80a12ec:	4798      	blx	r3
     if (chunk>=0)
 80a12ee:	2800      	cmp	r0, #0
 80a12f0:	db01      	blt.n	80a12f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a12f2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a12f4:	e7f3      	b.n	80a12de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a12f6:	2c00      	cmp	r4, #0
 80a12f8:	bf08      	it	eq
 80a12fa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a12fc:	4620      	mov	r0, r4
 80a12fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1300 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1300:	b570      	push	{r4, r5, r6, lr}
 80a1302:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1304:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1306:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1308:	b149      	cbz	r1, 80a131e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a130a:	f000 fee1 	bl	80a20d0 <strlen>
 80a130e:	682b      	ldr	r3, [r5, #0]
 80a1310:	4602      	mov	r2, r0
 80a1312:	4621      	mov	r1, r4
 80a1314:	4628      	mov	r0, r5
    }
 80a1316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a131a:	68db      	ldr	r3, [r3, #12]
 80a131c:	4718      	bx	r3
    }
 80a131e:	bd70      	pop	{r4, r5, r6, pc}

080a1320 <_ZN5Print5printEPKc>:
 80a1320:	b508      	push	{r3, lr}
 80a1322:	f7ff ffed 	bl	80a1300 <_ZN5Print5writeEPKc>
 80a1326:	bd08      	pop	{r3, pc}

080a1328 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1328:	6803      	ldr	r3, [r0, #0]
 80a132a:	689b      	ldr	r3, [r3, #8]
 80a132c:	4718      	bx	r3

080a132e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a132e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1330:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1332:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1334:	f7ff fff8 	bl	80a1328 <_ZN5Print5printEc>
  n += print('\n');
 80a1338:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a133a:	4604      	mov	r4, r0
  n += print('\n');
 80a133c:	4628      	mov	r0, r5
 80a133e:	f7ff fff3 	bl	80a1328 <_ZN5Print5printEc>
  return n;
}
 80a1342:	4420      	add	r0, r4
 80a1344:	bd38      	pop	{r3, r4, r5, pc}

080a1346 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1346:	2a01      	cmp	r2, #1
 80a1348:	bf98      	it	ls
 80a134a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a134c:	b530      	push	{r4, r5, lr}
 80a134e:	460b      	mov	r3, r1
 80a1350:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1352:	2100      	movs	r1, #0
 80a1354:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1358:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a135c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1360:	fb05 3312 	mls	r3, r5, r2, r3
 80a1364:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1366:	2b09      	cmp	r3, #9
 80a1368:	bf94      	ite	ls
 80a136a:	3330      	addls	r3, #48	; 0x30
 80a136c:	3337      	addhi	r3, #55	; 0x37
 80a136e:	b2db      	uxtb	r3, r3
 80a1370:	4621      	mov	r1, r4
 80a1372:	f804 3901 	strb.w	r3, [r4], #-1
 80a1376:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1378:	2d00      	cmp	r5, #0
 80a137a:	d1ef      	bne.n	80a135c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a137c:	f7ff ffc0 	bl	80a1300 <_ZN5Print5writeEPKc>
}
 80a1380:	b00b      	add	sp, #44	; 0x2c
 80a1382:	bd30      	pop	{r4, r5, pc}

080a1384 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1384:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1386:	b922      	cbnz	r2, 80a1392 <_ZN5Print5printEmi+0xe>
 80a1388:	6803      	ldr	r3, [r0, #0]
 80a138a:	b2c9      	uxtb	r1, r1
 80a138c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a138e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1390:	4718      	bx	r3
  else return printNumber(n, base);
 80a1392:	b2d2      	uxtb	r2, r2
}
 80a1394:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1396:	f7ff bfd6 	b.w	80a1346 <_ZN5Print11printNumberEmh>

080a139a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a139a:	f7ff bff3 	b.w	80a1384 <_ZN5Print5printEmi>

080a139e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a139e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a13a2:	4607      	mov	r7, r0
 80a13a4:	460e      	mov	r6, r1
  if (base == 0) {
 80a13a6:	4615      	mov	r5, r2
 80a13a8:	b92a      	cbnz	r2, 80a13b6 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a13aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a13ae:	6803      	ldr	r3, [r0, #0]
 80a13b0:	b2c9      	uxtb	r1, r1
 80a13b2:	689b      	ldr	r3, [r3, #8]
 80a13b4:	4718      	bx	r3
  } else if (base == 10) {
 80a13b6:	2a0a      	cmp	r2, #10
 80a13b8:	d102      	bne.n	80a13c0 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a13ba:	2900      	cmp	r1, #0
 80a13bc:	da01      	bge.n	80a13c2 <_ZN5Print5printEli+0x24>
 80a13be:	e004      	b.n	80a13ca <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a13c0:	b2d2      	uxtb	r2, r2
  }
}
 80a13c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a13c6:	f7ff bfbe 	b.w	80a1346 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a13ca:	212d      	movs	r1, #45	; 0x2d
 80a13cc:	f7ff ffac 	bl	80a1328 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a13d0:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a13d2:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a13d4:	4271      	negs	r1, r6
 80a13d6:	4638      	mov	r0, r7
 80a13d8:	f7ff ffb5 	bl	80a1346 <_ZN5Print11printNumberEmh>
 80a13dc:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a13de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a13e2 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a13e2:	b538      	push	{r3, r4, r5, lr}
 80a13e4:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a13e6:	f7ff ffda 	bl	80a139e <_ZN5Print5printEli>
 80a13ea:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a13ec:	4628      	mov	r0, r5
 80a13ee:	f7ff ff9e 	bl	80a132e <_ZN5Print7printlnEv>
  return n;
}
 80a13f2:	4420      	add	r0, r4
 80a13f4:	bd38      	pop	{r3, r4, r5, pc}

080a13f6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a13f6:	b510      	push	{r4, lr}
 80a13f8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a13fa:	f7ff fe20 	bl	80a103e <_ZNSt14_Function_baseD1Ev>
 80a13fe:	4620      	mov	r0, r4
 80a1400:	bd10      	pop	{r4, pc}
	...

080a1404 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1404:	4803      	ldr	r0, [pc, #12]	; (80a1414 <_GLOBAL__sub_I_RGB+0x10>)
 80a1406:	2300      	movs	r3, #0
 80a1408:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a140a:	4a03      	ldr	r2, [pc, #12]	; (80a1418 <_GLOBAL__sub_I_RGB+0x14>)
 80a140c:	4903      	ldr	r1, [pc, #12]	; (80a141c <_GLOBAL__sub_I_RGB+0x18>)
 80a140e:	f000 bcbb 	b.w	80a1d88 <__aeabi_atexit>
 80a1412:	bf00      	nop
 80a1414:	200000bc 	.word	0x200000bc
 80a1418:	2000006c 	.word	0x2000006c
 80a141c:	080a13f7 	.word	0x080a13f7

080a1420 <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a1420:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
 80a1424:	1c53      	adds	r3, r2, #1
 80a1426:	d00b      	beq.n	80a1440 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a1428:	8843      	ldrh	r3, [r0, #2]
 80a142a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a142c:	428b      	cmp	r3, r1
 80a142e:	d803      	bhi.n	80a1438 <_ZN5Servo17writeMicrosecondsEt+0x18>
 80a1430:	4288      	cmp	r0, r1
 80a1432:	4603      	mov	r3, r0
 80a1434:	bf28      	it	cs
 80a1436:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a1438:	4619      	mov	r1, r3
 80a143a:	b290      	uxth	r0, r2
 80a143c:	f7ff bc84 	b.w	80a0d48 <HAL_Servo_Write_Pulse_Width>
 80a1440:	4770      	bx	lr

080a1442 <_ZN5Servo5writeEi>:

  return true;
}

void Servo::write(int degrees)
{
 80a1442:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1444:	4604      	mov	r4, r0
 80a1446:	4608      	mov	r0, r1
 80a1448:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
 80a144c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80a1450:	4281      	cmp	r1, r0
 80a1452:	dc03      	bgt.n	80a145c <_ZN5Servo5writeEi+0x1a>
 80a1454:	4290      	cmp	r0, r2
 80a1456:	bfa8      	it	ge
 80a1458:	4610      	movge	r0, r2
 80a145a:	e000      	b.n	80a145e <_ZN5Servo5writeEi+0x1c>
 80a145c:	4608      	mov	r0, r1
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 80a145e:	88a5      	ldrh	r5, [r4, #4]
 80a1460:	8863      	ldrh	r3, [r4, #2]
 80a1462:	9500      	str	r5, [sp, #0]
 80a1464:	f7ff fddc 	bl	80a1020 <_Z3mapiiiii>
 80a1468:	68e1      	ldr	r1, [r4, #12]
 80a146a:	4401      	add	r1, r0
 80a146c:	4620      	mov	r0, r4
 80a146e:	b289      	uxth	r1, r1
}
 80a1470:	b003      	add	sp, #12
 80a1472:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
}

void Servo::write(int degrees)
{
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 80a1476:	f7ff bfd3 	b.w	80a1420 <_ZN5Servo17writeMicrosecondsEt>

080a147a <_ZN5Servo11resetFieldsEv>:
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a147a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a147e:	22b4      	movs	r2, #180	; 0xb4
 80a1480:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1482:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
 80a1486:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
 80a1488:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a148a:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a148c:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
 80a1490:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a1492:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
 80a1494:	60c3      	str	r3, [r0, #12]
 80a1496:	4770      	bx	lr

080a1498 <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
 80a1498:	b508      	push	{r3, lr}
{
  this->resetFields();
 80a149a:	f7ff ffee 	bl	80a147a <_ZN5Servo11resetFieldsEv>
}
 80a149e:	bd08      	pop	{r3, pc}

080a14a0 <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
 80a14a0:	b510      	push	{r4, lr}
 80a14a2:	4604      	mov	r4, r0
 80a14a4:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a14a8:	1c43      	adds	r3, r0, #1
 80a14aa:	d007      	beq.n	80a14bc <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
 80a14ac:	b280      	uxth	r0, r0
 80a14ae:	f7ff fc43 	bl	80a0d38 <HAL_Servo_Detach>

  this->resetFields();
 80a14b2:	4620      	mov	r0, r4
 80a14b4:	f7ff ffe1 	bl	80a147a <_ZN5Servo11resetFieldsEv>

  return true;
 80a14b8:	2001      	movs	r0, #1
 80a14ba:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
 80a14bc:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
 80a14be:	bd10      	pop	{r4, pc}

080a14c0 <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a14c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a14c4:	460d      	mov	r5, r1
 80a14c6:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a14c8:	2102      	movs	r1, #2
 80a14ca:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
 80a14cc:	4690      	mov	r8, r2
 80a14ce:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a14d0:	f7ff fbc8 	bl	80a0c64 <HAL_Validate_Pin_Function>
 80a14d4:	2802      	cmp	r0, #2
 80a14d6:	d001      	beq.n	80a14dc <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
 80a14d8:	2600      	movs	r6, #0
 80a14da:	e019      	b.n	80a1510 <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
 80a14dc:	4628      	mov	r0, r5
 80a14de:	f000 fb93 	bl	80a1c08 <pinAvailable>
 80a14e2:	4606      	mov	r6, r0
 80a14e4:	2800      	cmp	r0, #0
 80a14e6:	d0f7      	beq.n	80a14d8 <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
 80a14e8:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a14ec:	3301      	adds	r3, #1
 80a14ee:	d002      	beq.n	80a14f6 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
 80a14f0:	4620      	mov	r0, r4
 80a14f2:	f7ff ffd5 	bl	80a14a0 <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a14f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
 80a14fa:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
 80a14fc:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a14fe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  {
    this->detach();
  }

  this->pin = pin;
  this->minPW = minPW;
 80a1502:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a1506:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
 80a1508:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
 80a150a:	4628      	mov	r0, r5
 80a150c:	f7ff fc0c 	bl	80a0d28 <HAL_Servo_Attach>

  return true;
}
 80a1510:	4630      	mov	r0, r6
 80a1512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1516 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1516:	4770      	bx	lr

080a1518 <_ZN8SPIClassD0Ev>:
 80a1518:	b510      	push	{r4, lr}
 80a151a:	4604      	mov	r4, r0
 80a151c:	2110      	movs	r1, #16
 80a151e:	f000 fc38 	bl	80a1d92 <_ZdlPvj>
 80a1522:	4620      	mov	r0, r4
 80a1524:	bd10      	pop	{r4, pc}
	...

080a1528 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1528:	b570      	push	{r4, r5, r6, lr}
 80a152a:	4604      	mov	r4, r0
 80a152c:	460e      	mov	r6, r1
 80a152e:	4b07      	ldr	r3, [pc, #28]	; (80a154c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1530:	2500      	movs	r5, #0
 80a1532:	6003      	str	r3, [r0, #0]
 80a1534:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1538:	f7ff fb6c 	bl	80a0c14 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a153c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a153e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1540:	f7ff fc32 	bl	80a0da8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1544:	60a5      	str	r5, [r4, #8]
}
 80a1546:	4620      	mov	r0, r4
 80a1548:	bd70      	pop	{r4, r5, r6, pc}
 80a154a:	bf00      	nop
 80a154c:	080a4758 	.word	0x080a4758

080a1550 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1554:	7900      	ldrb	r0, [r0, #4]
 80a1556:	f7ff bbff 	b.w	80a0d58 <HAL_SPI_Begin>

080a155a <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a155a:	7900      	ldrb	r0, [r0, #4]
 80a155c:	f7ff bc04 	b.w	80a0d68 <HAL_SPI_Set_Bit_Order>

080a1560 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a1560:	7900      	ldrb	r0, [r0, #4]
 80a1562:	f7ff bc09 	b.w	80a0d78 <HAL_SPI_Set_Data_Mode>
	...

080a1568 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1568:	4a05      	ldr	r2, [pc, #20]	; (80a1580 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a156a:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a156c:	5c99      	ldrb	r1, [r3, r2]
 80a156e:	4281      	cmp	r1, r0
 80a1570:	d002      	beq.n	80a1578 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a1572:	3301      	adds	r3, #1
 80a1574:	2b08      	cmp	r3, #8
 80a1576:	d1f9      	bne.n	80a156c <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a1578:	1c58      	adds	r0, r3, #1
}
 80a157a:	b2c0      	uxtb	r0, r0
 80a157c:	4770      	bx	lr
 80a157e:	bf00      	nop
 80a1580:	080a4760 	.word	0x080a4760

080a1584 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1584:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a1586:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1588:	6018      	str	r0, [r3, #0]
 80a158a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a158c:	6818      	ldr	r0, [r3, #0]
 80a158e:	b2e5      	uxtb	r5, r4
 80a1590:	4288      	cmp	r0, r1
 80a1592:	d906      	bls.n	80a15a2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1594:	3401      	adds	r4, #1
 80a1596:	2c08      	cmp	r4, #8
 80a1598:	d002      	beq.n	80a15a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a159a:	0840      	lsrs	r0, r0, #1
 80a159c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a159e:	e7f5      	b.n	80a158c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a15a0:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a15a2:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a15a4:	5d5b      	ldrb	r3, [r3, r5]
 80a15a6:	7013      	strb	r3, [r2, #0]
 80a15a8:	bd30      	pop	{r4, r5, pc}
 80a15aa:	bf00      	nop
 80a15ac:	080a4760 	.word	0x080a4760

080a15b0 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a15b0:	b570      	push	{r4, r5, r6, lr}
 80a15b2:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a15b4:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a15b8:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a15ba:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a15bc:	2214      	movs	r2, #20
 80a15be:	2100      	movs	r1, #0
 80a15c0:	a803      	add	r0, sp, #12
 80a15c2:	f000 fd4a 	bl	80a205a <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a15c6:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a15c8:	a903      	add	r1, sp, #12
 80a15ca:	4630      	mov	r0, r6
 80a15cc:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a15ce:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a15d2:	f7ff fbf9 	bl	80a0dc8 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a15d6:	ab02      	add	r3, sp, #8
 80a15d8:	f10d 0207 	add.w	r2, sp, #7
 80a15dc:	4629      	mov	r1, r5
 80a15de:	9804      	ldr	r0, [sp, #16]
 80a15e0:	f7ff ffd0 	bl	80a1584 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a15e4:	7920      	ldrb	r0, [r4, #4]
 80a15e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a15ea:	f7ff fbcd 	bl	80a0d88 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a15ee:	9802      	ldr	r0, [sp, #8]
 80a15f0:	b008      	add	sp, #32
 80a15f2:	bd70      	pop	{r4, r5, r6, pc}

080a15f4 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a15f4:	b538      	push	{r3, r4, r5, lr}
 80a15f6:	4604      	mov	r4, r0
    if (dividerReference)
 80a15f8:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a15fa:	4608      	mov	r0, r1
    if (dividerReference)
 80a15fc:	b14d      	cbz	r5, 80a1612 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a15fe:	f7ff ffb3 	bl	80a1568 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1602:	2201      	movs	r2, #1
 80a1604:	fa25 f100 	lsr.w	r1, r5, r0
 80a1608:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a160a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a160e:	f7ff bfcf 	b.w	80a15b0 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1612:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a1614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1618:	f7ff bbb6 	b.w	80a0d88 <HAL_SPI_Set_Clock_Divider>

080a161c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a161c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a161e:	7900      	ldrb	r0, [r0, #4]
 80a1620:	f7ff fbba 	bl	80a0d98 <HAL_SPI_Send_Receive_Data>
}
 80a1624:	b2c0      	uxtb	r0, r0
 80a1626:	bd08      	pop	{r3, pc}

080a1628 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1628:	7900      	ldrb	r0, [r0, #4]
 80a162a:	f7ff bbc5 	b.w	80a0db8 <HAL_SPI_Is_Enabled>

080a162e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a162e:	b510      	push	{r4, lr}
 80a1630:	4604      	mov	r4, r0
{
	free(buffer);
 80a1632:	6800      	ldr	r0, [r0, #0]
 80a1634:	f7ff fce4 	bl	80a1000 <free>
}
 80a1638:	4620      	mov	r0, r4
 80a163a:	bd10      	pop	{r4, pc}

080a163c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a163c:	b510      	push	{r4, lr}
 80a163e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1640:	6800      	ldr	r0, [r0, #0]
 80a1642:	b108      	cbz	r0, 80a1648 <_ZN6String10invalidateEv+0xc>
 80a1644:	f7ff fcdc 	bl	80a1000 <free>
	buffer = NULL;
 80a1648:	2300      	movs	r3, #0
 80a164a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a164c:	60a3      	str	r3, [r4, #8]
 80a164e:	6063      	str	r3, [r4, #4]
 80a1650:	bd10      	pop	{r4, pc}

080a1652 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1652:	b538      	push	{r3, r4, r5, lr}
 80a1654:	4604      	mov	r4, r0
 80a1656:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1658:	6800      	ldr	r0, [r0, #0]
 80a165a:	3101      	adds	r1, #1
 80a165c:	f7ff fcd8 	bl	80a1010 <realloc>
	if (newbuffer) {
 80a1660:	b110      	cbz	r0, 80a1668 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1662:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1666:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1668:	bd38      	pop	{r3, r4, r5, pc}

080a166a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a166a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a166c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a166e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1670:	b113      	cbz	r3, 80a1678 <_ZN6String7reserveEj+0xe>
 80a1672:	6843      	ldr	r3, [r0, #4]
 80a1674:	428b      	cmp	r3, r1
 80a1676:	d207      	bcs.n	80a1688 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1678:	4620      	mov	r0, r4
 80a167a:	f7ff ffea 	bl	80a1652 <_ZN6String12changeBufferEj>
 80a167e:	b120      	cbz	r0, 80a168a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1680:	68a3      	ldr	r3, [r4, #8]
 80a1682:	b90b      	cbnz	r3, 80a1688 <_ZN6String7reserveEj+0x1e>
 80a1684:	6822      	ldr	r2, [r4, #0]
 80a1686:	7013      	strb	r3, [r2, #0]
 80a1688:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a168a:	bd10      	pop	{r4, pc}

080a168c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a168c:	b570      	push	{r4, r5, r6, lr}
 80a168e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1690:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1692:	4604      	mov	r4, r0
 80a1694:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1696:	f7ff ffe8 	bl	80a166a <_ZN6String7reserveEj>
 80a169a:	b918      	cbnz	r0, 80a16a4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a169c:	4620      	mov	r0, r4
 80a169e:	f7ff ffcd 	bl	80a163c <_ZN6String10invalidateEv>
		return *this;
 80a16a2:	e009      	b.n	80a16b8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a16a4:	462a      	mov	r2, r5
 80a16a6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a16a8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a16aa:	6820      	ldr	r0, [r4, #0]
 80a16ac:	f000 fcca 	bl	80a2044 <memcpy>
	buffer[len] = 0;
 80a16b0:	6822      	ldr	r2, [r4, #0]
 80a16b2:	68a3      	ldr	r3, [r4, #8]
 80a16b4:	2100      	movs	r1, #0
 80a16b6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a16b8:	4620      	mov	r0, r4
 80a16ba:	bd70      	pop	{r4, r5, r6, pc}

080a16bc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a16bc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a16be:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a16c0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a16c2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a16c4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a16c6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a16c8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a16ca:	460d      	mov	r5, r1
 80a16cc:	b139      	cbz	r1, 80a16de <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a16ce:	4608      	mov	r0, r1
 80a16d0:	f000 fcfe 	bl	80a20d0 <strlen>
 80a16d4:	4629      	mov	r1, r5
 80a16d6:	4602      	mov	r2, r0
 80a16d8:	4620      	mov	r0, r4
 80a16da:	f7ff ffd7 	bl	80a168c <_ZN6String4copyEPKcj>
}
 80a16de:	4620      	mov	r0, r4
 80a16e0:	bd38      	pop	{r3, r4, r5, pc}

080a16e2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a16e2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a16e4:	b510      	push	{r4, lr}
 80a16e6:	460b      	mov	r3, r1
 80a16e8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a16ea:	d007      	beq.n	80a16fc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a16ec:	6809      	ldr	r1, [r1, #0]
 80a16ee:	b119      	cbz	r1, 80a16f8 <_ZN6StringaSERKS_+0x16>
 80a16f0:	689a      	ldr	r2, [r3, #8]
 80a16f2:	f7ff ffcb 	bl	80a168c <_ZN6String4copyEPKcj>
 80a16f6:	e001      	b.n	80a16fc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a16f8:	f7ff ffa0 	bl	80a163c <_ZN6String10invalidateEv>

	return *this;
}
 80a16fc:	4620      	mov	r0, r4
 80a16fe:	bd10      	pop	{r4, pc}

080a1700 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1700:	b510      	push	{r4, lr}
 80a1702:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1704:	2300      	movs	r3, #0
 80a1706:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1708:	6043      	str	r3, [r0, #4]
	len = 0;
 80a170a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a170c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a170e:	f7ff ffe8 	bl	80a16e2 <_ZN6StringaSERKS_>
}
 80a1712:	4620      	mov	r0, r4
 80a1714:	bd10      	pop	{r4, pc}

080a1716 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1716:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1718:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a171a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a171c:	b912      	cbnz	r2, 80a1724 <_ZNK6String6equalsEPKc+0xe>
 80a171e:	b919      	cbnz	r1, 80a1728 <_ZNK6String6equalsEPKc+0x12>
 80a1720:	2001      	movs	r0, #1
 80a1722:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a1724:	b911      	cbnz	r1, 80a172c <_ZNK6String6equalsEPKc+0x16>
 80a1726:	6803      	ldr	r3, [r0, #0]
 80a1728:	7818      	ldrb	r0, [r3, #0]
 80a172a:	e002      	b.n	80a1732 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a172c:	6800      	ldr	r0, [r0, #0]
 80a172e:	f000 fcc5 	bl	80a20bc <strcmp>
 80a1732:	fab0 f080 	clz	r0, r0
 80a1736:	0940      	lsrs	r0, r0, #5
}
 80a1738:	bd08      	pop	{r3, pc}
	...

080a173c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a173c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1740:	4b03      	ldr	r3, [pc, #12]	; (80a1750 <_GLOBAL__sub_I_System+0x14>)
 80a1742:	2000      	movs	r0, #0
 80a1744:	7018      	strb	r0, [r3, #0]
 80a1746:	8058      	strh	r0, [r3, #2]
 80a1748:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a174a:	f7ff bbcd 	b.w	80a0ee8 <set_system_mode>
 80a174e:	bf00      	nop
 80a1750:	200000cc 	.word	0x200000cc

080a1754 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1754:	4b02      	ldr	r3, [pc, #8]	; (80a1760 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1756:	681a      	ldr	r2, [r3, #0]
 80a1758:	4b02      	ldr	r3, [pc, #8]	; (80a1764 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a175a:	601a      	str	r2, [r3, #0]
 80a175c:	4770      	bx	lr
 80a175e:	bf00      	nop
 80a1760:	20000004 	.word	0x20000004
 80a1764:	200000d4 	.word	0x200000d4

080a1768 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1768:	4770      	bx	lr

080a176a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a176a:	7441      	strb	r1, [r0, #17]
 80a176c:	4770      	bx	lr

080a176e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a176e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1770:	7c00      	ldrb	r0, [r0, #16]
 80a1772:	f7ff fb69 	bl	80a0e48 <HAL_USART_Available_Data_For_Write>
}
 80a1776:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a177a:	bd08      	pop	{r3, pc}

080a177c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a177c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a177e:	7c00      	ldrb	r0, [r0, #16]
 80a1780:	f7ff fb3a 	bl	80a0df8 <HAL_USART_Available_Data>
}
 80a1784:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1788:	bd08      	pop	{r3, pc}

080a178a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a178a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a178c:	7c00      	ldrb	r0, [r0, #16]
 80a178e:	f7ff fb43 	bl	80a0e18 <HAL_USART_Peek_Data>
}
 80a1792:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1796:	bf28      	it	cs
 80a1798:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a179c:	bd08      	pop	{r3, pc}

080a179e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a179e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a17a0:	7c00      	ldrb	r0, [r0, #16]
 80a17a2:	f7ff fb31 	bl	80a0e08 <HAL_USART_Read_Data>
}
 80a17a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a17aa:	bf28      	it	cs
 80a17ac:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a17b0:	bd08      	pop	{r3, pc}

080a17b2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a17b2:	7c00      	ldrb	r0, [r0, #16]
 80a17b4:	f7ff bb38 	b.w	80a0e28 <HAL_USART_Flush_Data>

080a17b8 <_ZN11USARTSerialD0Ev>:
 80a17b8:	b510      	push	{r4, lr}
 80a17ba:	4604      	mov	r4, r0
 80a17bc:	2114      	movs	r1, #20
 80a17be:	f000 fae8 	bl	80a1d92 <_ZdlPvj>
 80a17c2:	4620      	mov	r0, r4
 80a17c4:	bd10      	pop	{r4, pc}

080a17c6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a17c6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a17c8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a17ca:	4604      	mov	r4, r0
 80a17cc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a17ce:	b925      	cbnz	r5, 80a17da <_ZN11USARTSerial5writeEh+0x14>
 80a17d0:	7c00      	ldrb	r0, [r0, #16]
 80a17d2:	f7ff fb39 	bl	80a0e48 <HAL_USART_Available_Data_For_Write>
 80a17d6:	2800      	cmp	r0, #0
 80a17d8:	dd05      	ble.n	80a17e6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a17da:	4631      	mov	r1, r6
 80a17dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a17de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a17e2:	f7ff bb01 	b.w	80a0de8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a17e6:	4628      	mov	r0, r5
 80a17e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a17ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a17ec:	b510      	push	{r4, lr}
 80a17ee:	4604      	mov	r4, r0
 80a17f0:	4608      	mov	r0, r1
 80a17f2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a17f4:	2200      	movs	r2, #0
 80a17f6:	6062      	str	r2, [r4, #4]
 80a17f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a17fc:	60a2      	str	r2, [r4, #8]
 80a17fe:	4a05      	ldr	r2, [pc, #20]	; (80a1814 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1800:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1802:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1804:	2201      	movs	r2, #1
 80a1806:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1808:	461a      	mov	r2, r3
 80a180a:	f7ff fae5 	bl	80a0dd8 <HAL_USART_Init>
}
 80a180e:	4620      	mov	r0, r4
 80a1810:	bd10      	pop	{r4, pc}
 80a1812:	bf00      	nop
 80a1814:	080a479c 	.word	0x080a479c

080a1818 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1818:	7c00      	ldrb	r0, [r0, #16]
 80a181a:	f7ff bb0d 	b.w	80a0e38 <HAL_USART_Is_Enabled>
	...

080a1820 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1820:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1822:	4d0c      	ldr	r5, [pc, #48]	; (80a1854 <_Z22__fetch_global_Serial1v+0x34>)
 80a1824:	6829      	ldr	r1, [r5, #0]
 80a1826:	f011 0401 	ands.w	r4, r1, #1
 80a182a:	d111      	bne.n	80a1850 <_Z22__fetch_global_Serial1v+0x30>
 80a182c:	4628      	mov	r0, r5
 80a182e:	f7fe fc41 	bl	80a00b4 <__cxa_guard_acquire>
 80a1832:	b168      	cbz	r0, 80a1850 <_Z22__fetch_global_Serial1v+0x30>
 80a1834:	4a08      	ldr	r2, [pc, #32]	; (80a1858 <_Z22__fetch_global_Serial1v+0x38>)
 80a1836:	4621      	mov	r1, r4
 80a1838:	4b08      	ldr	r3, [pc, #32]	; (80a185c <_Z22__fetch_global_Serial1v+0x3c>)
 80a183a:	4809      	ldr	r0, [pc, #36]	; (80a1860 <_Z22__fetch_global_Serial1v+0x40>)
 80a183c:	f7ff ffd6 	bl	80a17ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1840:	4628      	mov	r0, r5
 80a1842:	f7fe fc3c 	bl	80a00be <__cxa_guard_release>
 80a1846:	4a07      	ldr	r2, [pc, #28]	; (80a1864 <_Z22__fetch_global_Serial1v+0x44>)
 80a1848:	4907      	ldr	r1, [pc, #28]	; (80a1868 <_Z22__fetch_global_Serial1v+0x48>)
 80a184a:	4805      	ldr	r0, [pc, #20]	; (80a1860 <_Z22__fetch_global_Serial1v+0x40>)
 80a184c:	f000 fa9c 	bl	80a1d88 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1850:	4803      	ldr	r0, [pc, #12]	; (80a1860 <_Z22__fetch_global_Serial1v+0x40>)
 80a1852:	bd38      	pop	{r3, r4, r5, pc}
 80a1854:	20000170 	.word	0x20000170
 80a1858:	20000174 	.word	0x20000174
 80a185c:	200000ec 	.word	0x200000ec
 80a1860:	200000d8 	.word	0x200000d8
 80a1864:	2000006c 	.word	0x2000006c
 80a1868:	080a1769 	.word	0x080a1769

080a186c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a186c:	7441      	strb	r1, [r0, #17]
 80a186e:	4770      	bx	lr

080a1870 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1870:	4770      	bx	lr

080a1872 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1872:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1874:	2100      	movs	r1, #0
 80a1876:	7c00      	ldrb	r0, [r0, #16]
 80a1878:	f7ff fb0e 	bl	80a0e98 <HAL_USB_USART_Receive_Data>
}
 80a187c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1880:	bf28      	it	cs
 80a1882:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1886:	bd08      	pop	{r3, pc}

080a1888 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1888:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a188a:	2101      	movs	r1, #1
 80a188c:	7c00      	ldrb	r0, [r0, #16]
 80a188e:	f7ff fb03 	bl	80a0e98 <HAL_USB_USART_Receive_Data>
}
 80a1892:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1896:	bf28      	it	cs
 80a1898:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a189c:	bd08      	pop	{r3, pc}

080a189e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a189e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a18a0:	7c00      	ldrb	r0, [r0, #16]
 80a18a2:	f7ff faf1 	bl	80a0e88 <HAL_USB_USART_Available_Data_For_Write>
}
 80a18a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a18aa:	bd08      	pop	{r3, pc}

080a18ac <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a18ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a18ae:	7c00      	ldrb	r0, [r0, #16]
 80a18b0:	f7ff fae2 	bl	80a0e78 <HAL_USB_USART_Available_Data>
}
 80a18b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a18b8:	bd08      	pop	{r3, pc}

080a18ba <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a18ba:	7c00      	ldrb	r0, [r0, #16]
 80a18bc:	f7ff bafc 	b.w	80a0eb8 <HAL_USB_USART_Flush_Data>

080a18c0 <_ZN9USBSerialD0Ev>:
 80a18c0:	b510      	push	{r4, lr}
 80a18c2:	4604      	mov	r4, r0
 80a18c4:	2114      	movs	r1, #20
 80a18c6:	f000 fa64 	bl	80a1d92 <_ZdlPvj>
 80a18ca:	4620      	mov	r0, r4
 80a18cc:	bd10      	pop	{r4, pc}

080a18ce <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a18ce:	b538      	push	{r3, r4, r5, lr}
 80a18d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a18d2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a18d4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a18d6:	f7ff fad7 	bl	80a0e88 <HAL_USB_USART_Available_Data_For_Write>
 80a18da:	2800      	cmp	r0, #0
 80a18dc:	dc01      	bgt.n	80a18e2 <_ZN9USBSerial5writeEh+0x14>
 80a18de:	7c60      	ldrb	r0, [r4, #17]
 80a18e0:	b128      	cbz	r0, 80a18ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a18e2:	4629      	mov	r1, r5
 80a18e4:	7c20      	ldrb	r0, [r4, #16]
 80a18e6:	f7ff fadf 	bl	80a0ea8 <HAL_USB_USART_Send_Data>
 80a18ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a18ee:	bd38      	pop	{r3, r4, r5, pc}

080a18f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a18f0:	b510      	push	{r4, lr}
 80a18f2:	4604      	mov	r4, r0
 80a18f4:	2300      	movs	r3, #0
 80a18f6:	6063      	str	r3, [r4, #4]
 80a18f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a18fc:	60a3      	str	r3, [r4, #8]
 80a18fe:	4b05      	ldr	r3, [pc, #20]	; (80a1914 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1900:	4608      	mov	r0, r1
 80a1902:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1904:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1906:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1908:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a190a:	4611      	mov	r1, r2
 80a190c:	f7ff faa4 	bl	80a0e58 <HAL_USB_USART_Init>
}
 80a1910:	4620      	mov	r0, r4
 80a1912:	bd10      	pop	{r4, pc}
 80a1914:	080a47cc 	.word	0x080a47cc

080a1918 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1918:	2200      	movs	r2, #0
 80a191a:	7c00      	ldrb	r0, [r0, #16]
 80a191c:	f7ff baa4 	b.w	80a0e68 <HAL_USB_USART_Begin>

080a1920 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1920:	b510      	push	{r4, lr}
 80a1922:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1924:	2214      	movs	r2, #20
 80a1926:	2100      	movs	r1, #0
 80a1928:	f000 fb97 	bl	80a205a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a192c:	4b05      	ldr	r3, [pc, #20]	; (80a1944 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a192e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1930:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1932:	4b05      	ldr	r3, [pc, #20]	; (80a1948 <_Z19acquireSerialBufferv+0x28>)
 80a1934:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1936:	f240 1301 	movw	r3, #257	; 0x101
 80a193a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a193c:	2381      	movs	r3, #129	; 0x81
 80a193e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1940:	bd10      	pop	{r4, pc}
 80a1942:	bf00      	nop
 80a1944:	2000027d 	.word	0x2000027d
 80a1948:	200001fc 	.word	0x200001fc

080a194c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a194c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a194e:	4d0e      	ldr	r5, [pc, #56]	; (80a1988 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1950:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1952:	a801      	add	r0, sp, #4
 80a1954:	f7ff ffe4 	bl	80a1920 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1958:	6829      	ldr	r1, [r5, #0]
 80a195a:	f011 0401 	ands.w	r4, r1, #1
 80a195e:	d110      	bne.n	80a1982 <_Z16_fetch_usbserialv+0x36>
 80a1960:	4628      	mov	r0, r5
 80a1962:	f7fe fba7 	bl	80a00b4 <__cxa_guard_acquire>
 80a1966:	b160      	cbz	r0, 80a1982 <_Z16_fetch_usbserialv+0x36>
 80a1968:	aa01      	add	r2, sp, #4
 80a196a:	4621      	mov	r1, r4
 80a196c:	4807      	ldr	r0, [pc, #28]	; (80a198c <_Z16_fetch_usbserialv+0x40>)
 80a196e:	f7ff ffbf 	bl	80a18f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1972:	4628      	mov	r0, r5
 80a1974:	f7fe fba3 	bl	80a00be <__cxa_guard_release>
 80a1978:	4a05      	ldr	r2, [pc, #20]	; (80a1990 <_Z16_fetch_usbserialv+0x44>)
 80a197a:	4906      	ldr	r1, [pc, #24]	; (80a1994 <_Z16_fetch_usbserialv+0x48>)
 80a197c:	4803      	ldr	r0, [pc, #12]	; (80a198c <_Z16_fetch_usbserialv+0x40>)
 80a197e:	f000 fa03 	bl	80a1d88 <__aeabi_atexit>
	return _usbserial;
}
 80a1982:	4802      	ldr	r0, [pc, #8]	; (80a198c <_Z16_fetch_usbserialv+0x40>)
 80a1984:	b007      	add	sp, #28
 80a1986:	bd30      	pop	{r4, r5, pc}
 80a1988:	200001f8 	.word	0x200001f8
 80a198c:	20000380 	.word	0x20000380
 80a1990:	2000006c 	.word	0x2000006c
 80a1994:	080a1871 	.word	0x080a1871

080a1998 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1998:	b510      	push	{r4, lr}
 80a199a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a199c:	2214      	movs	r2, #20
 80a199e:	2100      	movs	r1, #0
 80a19a0:	f000 fb5b 	bl	80a205a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a19a4:	4b05      	ldr	r3, [pc, #20]	; (80a19bc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a19a6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a19a8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a19aa:	4b05      	ldr	r3, [pc, #20]	; (80a19c0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a19ac:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a19ae:	f240 1301 	movw	r3, #257	; 0x101
 80a19b2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a19b4:	2381      	movs	r3, #129	; 0x81
 80a19b6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a19b8:	bd10      	pop	{r4, pc}
 80a19ba:	bf00      	nop
 80a19bc:	20000430 	.word	0x20000430
 80a19c0:	20000398 	.word	0x20000398

080a19c4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a19c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a19c6:	4c0e      	ldr	r4, [pc, #56]	; (80a1a00 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a19c8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a19ca:	a801      	add	r0, sp, #4
 80a19cc:	f7ff ffe4 	bl	80a1998 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a19d0:	6823      	ldr	r3, [r4, #0]
 80a19d2:	07db      	lsls	r3, r3, #31
 80a19d4:	d410      	bmi.n	80a19f8 <_Z17_fetch_usbserial1v+0x34>
 80a19d6:	4620      	mov	r0, r4
 80a19d8:	f7fe fb6c 	bl	80a00b4 <__cxa_guard_acquire>
 80a19dc:	b160      	cbz	r0, 80a19f8 <_Z17_fetch_usbserial1v+0x34>
 80a19de:	aa01      	add	r2, sp, #4
 80a19e0:	2101      	movs	r1, #1
 80a19e2:	4808      	ldr	r0, [pc, #32]	; (80a1a04 <_Z17_fetch_usbserial1v+0x40>)
 80a19e4:	f7ff ff84 	bl	80a18f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a19e8:	4620      	mov	r0, r4
 80a19ea:	f7fe fb68 	bl	80a00be <__cxa_guard_release>
 80a19ee:	4a06      	ldr	r2, [pc, #24]	; (80a1a08 <_Z17_fetch_usbserial1v+0x44>)
 80a19f0:	4906      	ldr	r1, [pc, #24]	; (80a1a0c <_Z17_fetch_usbserial1v+0x48>)
 80a19f2:	4804      	ldr	r0, [pc, #16]	; (80a1a04 <_Z17_fetch_usbserial1v+0x40>)
 80a19f4:	f000 f9c8 	bl	80a1d88 <__aeabi_atexit>
  return _usbserial1;
}
 80a19f8:	4802      	ldr	r0, [pc, #8]	; (80a1a04 <_Z17_fetch_usbserial1v+0x40>)
 80a19fa:	b006      	add	sp, #24
 80a19fc:	bd10      	pop	{r4, pc}
 80a19fe:	bf00      	nop
 80a1a00:	20000394 	.word	0x20000394
 80a1a04:	2000041c 	.word	0x2000041c
 80a1a08:	2000006c 	.word	0x2000006c
 80a1a0c:	080a1871 	.word	0x080a1871

080a1a10 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1a10:	2200      	movs	r2, #0
 80a1a12:	4611      	mov	r1, r2
 80a1a14:	6840      	ldr	r0, [r0, #4]
 80a1a16:	f7ff bab3 	b.w	80a0f80 <network_ready>

080a1a1a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1a1c:	4616      	mov	r6, r2
 80a1a1e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1a20:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1a22:	460f      	mov	r7, r1
 80a1a24:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1a26:	2100      	movs	r1, #0
 80a1a28:	a803      	add	r0, sp, #12
 80a1a2a:	f000 fb16 	bl	80a205a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1a2e:	4630      	mov	r0, r6
 80a1a30:	f000 fb4e 	bl	80a20d0 <strlen>
 80a1a34:	2500      	movs	r5, #0
 80a1a36:	9500      	str	r5, [sp, #0]
 80a1a38:	b281      	uxth	r1, r0
 80a1a3a:	687b      	ldr	r3, [r7, #4]
 80a1a3c:	aa03      	add	r2, sp, #12
 80a1a3e:	4630      	mov	r0, r6
 80a1a40:	f7ff fa42 	bl	80a0ec8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1a44:	b120      	cbz	r0, 80a1a50 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1a46:	4629      	mov	r1, r5
 80a1a48:	4620      	mov	r0, r4
 80a1a4a:	f7ff fbb3 	bl	80a11b4 <_ZN9IPAddressC1Em>
 80a1a4e:	e003      	b.n	80a1a58 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1a50:	a903      	add	r1, sp, #12
 80a1a52:	4620      	mov	r0, r4
 80a1a54:	f7ff fb9c 	bl	80a1190 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1a58:	4620      	mov	r0, r4
 80a1a5a:	b009      	add	sp, #36	; 0x24
 80a1a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1a5e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1a5e:	2200      	movs	r2, #0
 80a1a60:	4611      	mov	r1, r2
 80a1a62:	6840      	ldr	r0, [r0, #4]
 80a1a64:	f7ff baac 	b.w	80a0fc0 <network_listening>

080a1a68 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1a68:	2200      	movs	r2, #0
 80a1a6a:	4611      	mov	r1, r2
 80a1a6c:	6840      	ldr	r0, [r0, #4]
 80a1a6e:	f7ff bab7 	b.w	80a0fe0 <network_get_listen_timeout>

080a1a72 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1a72:	2200      	movs	r2, #0
 80a1a74:	6840      	ldr	r0, [r0, #4]
 80a1a76:	f7ff baab 	b.w	80a0fd0 <network_set_listen_timeout>

080a1a7a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1a7a:	2200      	movs	r2, #0
 80a1a7c:	f081 0101 	eor.w	r1, r1, #1
 80a1a80:	6840      	ldr	r0, [r0, #4]
 80a1a82:	f7ff ba95 	b.w	80a0fb0 <network_listen>

080a1a86 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1a86:	2300      	movs	r3, #0
 80a1a88:	461a      	mov	r2, r3
 80a1a8a:	4619      	mov	r1, r3
 80a1a8c:	6840      	ldr	r0, [r0, #4]
 80a1a8e:	f7ff ba87 	b.w	80a0fa0 <network_off>

080a1a92 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1a92:	2300      	movs	r3, #0
 80a1a94:	461a      	mov	r2, r3
 80a1a96:	4619      	mov	r1, r3
 80a1a98:	6840      	ldr	r0, [r0, #4]
 80a1a9a:	f7ff ba79 	b.w	80a0f90 <network_on>

080a1a9e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1a9e:	2200      	movs	r2, #0
 80a1aa0:	4611      	mov	r1, r2
 80a1aa2:	6840      	ldr	r0, [r0, #4]
 80a1aa4:	f7ff ba5c 	b.w	80a0f60 <network_connecting>

080a1aa8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1aa8:	2200      	movs	r2, #0
 80a1aaa:	2102      	movs	r1, #2
 80a1aac:	6840      	ldr	r0, [r0, #4]
 80a1aae:	f7ff ba5f 	b.w	80a0f70 <network_disconnect>

080a1ab2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1ab2:	2300      	movs	r3, #0
 80a1ab4:	461a      	mov	r2, r3
 80a1ab6:	6840      	ldr	r0, [r0, #4]
 80a1ab8:	f7ff ba4a 	b.w	80a0f50 <network_connect>

080a1abc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1abc:	4b02      	ldr	r3, [pc, #8]	; (80a1ac8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1abe:	2204      	movs	r2, #4
 80a1ac0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1ac2:	4a02      	ldr	r2, [pc, #8]	; (80a1acc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1ac4:	601a      	str	r2, [r3, #0]
 80a1ac6:	4770      	bx	lr
 80a1ac8:	20000534 	.word	0x20000534
 80a1acc:	080a47fc 	.word	0x080a47fc

080a1ad0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1ad0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1ad2:	4b14      	ldr	r3, [pc, #80]	; (80a1b24 <serialEventRun+0x54>)
 80a1ad4:	b133      	cbz	r3, 80a1ae4 <serialEventRun+0x14>
 80a1ad6:	f7ff ff39 	bl	80a194c <_Z16_fetch_usbserialv>
 80a1ada:	6803      	ldr	r3, [r0, #0]
 80a1adc:	691b      	ldr	r3, [r3, #16]
 80a1ade:	4798      	blx	r3
 80a1ae0:	2800      	cmp	r0, #0
 80a1ae2:	dc16      	bgt.n	80a1b12 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1ae4:	4b10      	ldr	r3, [pc, #64]	; (80a1b28 <serialEventRun+0x58>)
 80a1ae6:	b133      	cbz	r3, 80a1af6 <serialEventRun+0x26>
 80a1ae8:	f7ff fe9a 	bl	80a1820 <_Z22__fetch_global_Serial1v>
 80a1aec:	6803      	ldr	r3, [r0, #0]
 80a1aee:	691b      	ldr	r3, [r3, #16]
 80a1af0:	4798      	blx	r3
 80a1af2:	2800      	cmp	r0, #0
 80a1af4:	dc10      	bgt.n	80a1b18 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1af6:	4b0d      	ldr	r3, [pc, #52]	; (80a1b2c <serialEventRun+0x5c>)
 80a1af8:	b10b      	cbz	r3, 80a1afe <serialEventRun+0x2e>
 80a1afa:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1afe:	4b0c      	ldr	r3, [pc, #48]	; (80a1b30 <serialEventRun+0x60>)
 80a1b00:	b17b      	cbz	r3, 80a1b22 <serialEventRun+0x52>
 80a1b02:	f7ff ff5f 	bl	80a19c4 <_Z17_fetch_usbserial1v>
 80a1b06:	6803      	ldr	r3, [r0, #0]
 80a1b08:	691b      	ldr	r3, [r3, #16]
 80a1b0a:	4798      	blx	r3
 80a1b0c:	2800      	cmp	r0, #0
 80a1b0e:	dc06      	bgt.n	80a1b1e <serialEventRun+0x4e>
 80a1b10:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1b12:	f3af 8000 	nop.w
 80a1b16:	e7e5      	b.n	80a1ae4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1b18:	f3af 8000 	nop.w
 80a1b1c:	e7eb      	b.n	80a1af6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1b1e:	f3af 8000 	nop.w
 80a1b22:	bd08      	pop	{r3, pc}
	...

080a1b34 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1b34:	b508      	push	{r3, lr}
	serialEventRun();
 80a1b36:	f7ff ffcb 	bl	80a1ad0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1b3a:	f7ff f883 	bl	80a0c44 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1b3e:	4b01      	ldr	r3, [pc, #4]	; (80a1b44 <_post_loop+0x10>)
 80a1b40:	6018      	str	r0, [r3, #0]
 80a1b42:	bd08      	pop	{r3, pc}
 80a1b44:	20000544 	.word	0x20000544

080a1b48 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1b48:	4802      	ldr	r0, [pc, #8]	; (80a1b54 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1b4a:	4a03      	ldr	r2, [pc, #12]	; (80a1b58 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1b4c:	4903      	ldr	r1, [pc, #12]	; (80a1b5c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1b4e:	1a12      	subs	r2, r2, r0
 80a1b50:	f000 ba78 	b.w	80a2044 <memcpy>
 80a1b54:	40024000 	.word	0x40024000
 80a1b58:	40024004 	.word	0x40024004
 80a1b5c:	080a48d0 	.word	0x080a48d0

080a1b60 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1b60:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1b62:	2300      	movs	r3, #0
 80a1b64:	9300      	str	r3, [sp, #0]
 80a1b66:	461a      	mov	r2, r3
 80a1b68:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1b6c:	f7ff f9d6 	bl	80a0f1c <system_ctrl_set_result>
}
 80a1b70:	b003      	add	sp, #12
 80a1b72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1b78 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1b78:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1b7a:	8843      	ldrh	r3, [r0, #2]
 80a1b7c:	2b0a      	cmp	r3, #10
 80a1b7e:	d008      	beq.n	80a1b92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1b80:	2b50      	cmp	r3, #80	; 0x50
 80a1b82:	d109      	bne.n	80a1b98 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1b84:	4b09      	ldr	r3, [pc, #36]	; (80a1bac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1b86:	681b      	ldr	r3, [r3, #0]
 80a1b88:	b13b      	cbz	r3, 80a1b9a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1b8a:	b003      	add	sp, #12
 80a1b8c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1b90:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1b92:	f7ff ffe5 	bl	80a1b60 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1b96:	e006      	b.n	80a1ba6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1b98:	2300      	movs	r3, #0
 80a1b9a:	9300      	str	r3, [sp, #0]
 80a1b9c:	461a      	mov	r2, r3
 80a1b9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1ba2:	f7ff f9bb 	bl	80a0f1c <system_ctrl_set_result>
        break;
    }
}
 80a1ba6:	b003      	add	sp, #12
 80a1ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1bac:	2000053c 	.word	0x2000053c

080a1bb0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1bb0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1bb2:	4c10      	ldr	r4, [pc, #64]	; (80a1bf4 <module_user_init_hook+0x44>)
 80a1bb4:	4d10      	ldr	r5, [pc, #64]	; (80a1bf8 <module_user_init_hook+0x48>)
 80a1bb6:	6823      	ldr	r3, [r4, #0]
 80a1bb8:	42ab      	cmp	r3, r5
 80a1bba:	4b10      	ldr	r3, [pc, #64]	; (80a1bfc <module_user_init_hook+0x4c>)
 80a1bbc:	bf0c      	ite	eq
 80a1bbe:	2201      	moveq	r2, #1
 80a1bc0:	2200      	movne	r2, #0
 80a1bc2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1bc4:	d002      	beq.n	80a1bcc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1bc6:	f7ff ffbf 	bl	80a1b48 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1bca:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1bcc:	f7ff f82a 	bl	80a0c24 <HAL_RNG_GetRandomNumber>
 80a1bd0:	4604      	mov	r4, r0
    srand(seed);
 80a1bd2:	f000 fa4b 	bl	80a206c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1bd6:	4b0a      	ldr	r3, [pc, #40]	; (80a1c00 <module_user_init_hook+0x50>)
 80a1bd8:	b113      	cbz	r3, 80a1be0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1bda:	4620      	mov	r0, r4
 80a1bdc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1be0:	2100      	movs	r1, #0
 80a1be2:	4807      	ldr	r0, [pc, #28]	; (80a1c00 <module_user_init_hook+0x50>)
 80a1be4:	f7ff f9ac 	bl	80a0f40 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1bec:	2100      	movs	r1, #0
 80a1bee:	4805      	ldr	r0, [pc, #20]	; (80a1c04 <module_user_init_hook+0x54>)
 80a1bf0:	f7ff b98a 	b.w	80a0f08 <system_ctrl_set_app_request_handler>
 80a1bf4:	40024000 	.word	0x40024000
 80a1bf8:	9a271c1e 	.word	0x9a271c1e
 80a1bfc:	20000540 	.word	0x20000540
 80a1c00:	00000000 	.word	0x00000000
 80a1c04:	080a1b79 	.word	0x080a1b79

080a1c08 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1c08:	b510      	push	{r4, lr}
 80a1c0a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1c0c:	480f      	ldr	r0, [pc, #60]	; (80a1c4c <pinAvailable+0x44>)
 80a1c0e:	f7ff fd0b 	bl	80a1628 <_ZN8SPIClass9isEnabledEv>
 80a1c12:	b128      	cbz	r0, 80a1c20 <pinAvailable+0x18>
 80a1c14:	f1a4 030d 	sub.w	r3, r4, #13
 80a1c18:	2b02      	cmp	r3, #2
 80a1c1a:	d801      	bhi.n	80a1c20 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1c1c:	2000      	movs	r0, #0
 80a1c1e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1c20:	f000 f858 	bl	80a1cd4 <_Z19__fetch_global_Wirev>
 80a1c24:	f7ff fa80 	bl	80a1128 <_ZN7TwoWire9isEnabledEv>
 80a1c28:	b108      	cbz	r0, 80a1c2e <pinAvailable+0x26>
 80a1c2a:	2c01      	cmp	r4, #1
 80a1c2c:	d9f6      	bls.n	80a1c1c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1c2e:	f7ff fdf7 	bl	80a1820 <_Z22__fetch_global_Serial1v>
 80a1c32:	f7ff fdf1 	bl	80a1818 <_ZN11USARTSerial9isEnabledEv>
 80a1c36:	b118      	cbz	r0, 80a1c40 <pinAvailable+0x38>
 80a1c38:	f1a4 0312 	sub.w	r3, r4, #18
 80a1c3c:	2b01      	cmp	r3, #1
 80a1c3e:	d9ed      	bls.n	80a1c1c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1c40:	2c17      	cmp	r4, #23
 80a1c42:	bf8c      	ite	hi
 80a1c44:	2000      	movhi	r0, #0
 80a1c46:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1c48:	bd10      	pop	{r4, pc}
 80a1c4a:	bf00      	nop
 80a1c4c:	20000578 	.word	0x20000578

080a1c50 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1c50:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1c52:	b538      	push	{r3, r4, r5, lr}
 80a1c54:	4604      	mov	r4, r0
 80a1c56:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1c58:	d80a      	bhi.n	80a1c70 <pinMode+0x20>
 80a1c5a:	29ff      	cmp	r1, #255	; 0xff
 80a1c5c:	d008      	beq.n	80a1c70 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1c5e:	f7ff ffd3 	bl	80a1c08 <pinAvailable>
 80a1c62:	b128      	cbz	r0, 80a1c70 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1c64:	4629      	mov	r1, r5
 80a1c66:	4620      	mov	r0, r4
}
 80a1c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1c6c:	f7ff b802 	b.w	80a0c74 <HAL_Pin_Mode>
 80a1c70:	bd38      	pop	{r3, r4, r5, pc}

080a1c72 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1c72:	b538      	push	{r3, r4, r5, lr}
 80a1c74:	4604      	mov	r4, r0
 80a1c76:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1c78:	f7ff f804 	bl	80a0c84 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1c7c:	28ff      	cmp	r0, #255	; 0xff
 80a1c7e:	d010      	beq.n	80a1ca2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1c80:	2806      	cmp	r0, #6
 80a1c82:	d804      	bhi.n	80a1c8e <digitalWrite+0x1c>
 80a1c84:	234d      	movs	r3, #77	; 0x4d
 80a1c86:	fa23 f000 	lsr.w	r0, r3, r0
 80a1c8a:	07c3      	lsls	r3, r0, #31
 80a1c8c:	d409      	bmi.n	80a1ca2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1c8e:	4620      	mov	r0, r4
 80a1c90:	f7ff ffba 	bl	80a1c08 <pinAvailable>
 80a1c94:	b128      	cbz	r0, 80a1ca2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1c96:	4629      	mov	r1, r5
 80a1c98:	4620      	mov	r0, r4
}
 80a1c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1c9e:	f7fe bff9 	b.w	80a0c94 <HAL_GPIO_Write>
 80a1ca2:	bd38      	pop	{r3, r4, r5, pc}

080a1ca4 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1ca4:	b510      	push	{r4, lr}
 80a1ca6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a1ca8:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a1caa:	bf9c      	itt	ls
 80a1cac:	340a      	addls	r4, #10
 80a1cae:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1cb0:	4620      	mov	r0, r4
 80a1cb2:	f7ff ffa9 	bl	80a1c08 <pinAvailable>
 80a1cb6:	b150      	cbz	r0, 80a1cce <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a1cb8:	2103      	movs	r1, #3
 80a1cba:	4620      	mov	r0, r4
 80a1cbc:	f7fe ffd2 	bl	80a0c64 <HAL_Validate_Pin_Function>
 80a1cc0:	2803      	cmp	r0, #3
 80a1cc2:	d104      	bne.n	80a1cce <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1cc4:	4620      	mov	r0, r4
}
 80a1cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1cca:	f7fe bfeb 	b.w	80a0ca4 <HAL_ADC_Read>
}
 80a1cce:	2000      	movs	r0, #0
 80a1cd0:	bd10      	pop	{r4, pc}
	...

080a1cd4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1cd4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1cd6:	4d0b      	ldr	r5, [pc, #44]	; (80a1d04 <_Z19__fetch_global_Wirev+0x30>)
 80a1cd8:	6829      	ldr	r1, [r5, #0]
 80a1cda:	f011 0401 	ands.w	r4, r1, #1
 80a1cde:	d10f      	bne.n	80a1d00 <_Z19__fetch_global_Wirev+0x2c>
 80a1ce0:	4628      	mov	r0, r5
 80a1ce2:	f7fe f9e7 	bl	80a00b4 <__cxa_guard_acquire>
 80a1ce6:	b158      	cbz	r0, 80a1d00 <_Z19__fetch_global_Wirev+0x2c>
 80a1ce8:	4621      	mov	r1, r4
 80a1cea:	4807      	ldr	r0, [pc, #28]	; (80a1d08 <_Z19__fetch_global_Wirev+0x34>)
 80a1cec:	f7ff fa0a 	bl	80a1104 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1cf0:	4628      	mov	r0, r5
 80a1cf2:	f7fe f9e4 	bl	80a00be <__cxa_guard_release>
 80a1cf6:	4a05      	ldr	r2, [pc, #20]	; (80a1d0c <_Z19__fetch_global_Wirev+0x38>)
 80a1cf8:	4905      	ldr	r1, [pc, #20]	; (80a1d10 <_Z19__fetch_global_Wirev+0x3c>)
 80a1cfa:	4803      	ldr	r0, [pc, #12]	; (80a1d08 <_Z19__fetch_global_Wirev+0x34>)
 80a1cfc:	f000 f844 	bl	80a1d88 <__aeabi_atexit>
	return wire;
}
 80a1d00:	4801      	ldr	r0, [pc, #4]	; (80a1d08 <_Z19__fetch_global_Wirev+0x34>)
 80a1d02:	bd38      	pop	{r3, r4, r5, pc}
 80a1d04:	20000548 	.word	0x20000548
 80a1d08:	2000054c 	.word	0x2000054c
 80a1d0c:	2000006c 	.word	0x2000006c
 80a1d10:	080a10ab 	.word	0x080a10ab

080a1d14 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1d14:	b513      	push	{r0, r1, r4, lr}
 80a1d16:	4c08      	ldr	r4, [pc, #32]	; (80a1d38 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1d18:	2300      	movs	r3, #0
 80a1d1a:	461a      	mov	r2, r3
 80a1d1c:	4619      	mov	r1, r3
 80a1d1e:	9300      	str	r3, [sp, #0]
 80a1d20:	4620      	mov	r0, r4
 80a1d22:	f7ff fa5d 	bl	80a11e0 <_ZN9IPAddressC1Ehhhh>
 80a1d26:	4620      	mov	r0, r4
 80a1d28:	4a04      	ldr	r2, [pc, #16]	; (80a1d3c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1d2a:	4905      	ldr	r1, [pc, #20]	; (80a1d40 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1d2c:	b002      	add	sp, #8
 80a1d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1d32:	f000 b829 	b.w	80a1d88 <__aeabi_atexit>
 80a1d36:	bf00      	nop
 80a1d38:	20000560 	.word	0x20000560
 80a1d3c:	2000006c 	.word	0x2000006c
 80a1d40:	080a1131 	.word	0x080a1131

080a1d44 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1d44:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1d46:	4c0c      	ldr	r4, [pc, #48]	; (80a1d78 <_GLOBAL__sub_I_SPI+0x34>)
 80a1d48:	4e0c      	ldr	r6, [pc, #48]	; (80a1d7c <_GLOBAL__sub_I_SPI+0x38>)
 80a1d4a:	4d0d      	ldr	r5, [pc, #52]	; (80a1d80 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1d4c:	2100      	movs	r1, #0
 80a1d4e:	4620      	mov	r0, r4
 80a1d50:	f7ff fbea 	bl	80a1528 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1d54:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1d56:	4c0b      	ldr	r4, [pc, #44]	; (80a1d84 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1d58:	4632      	mov	r2, r6
 80a1d5a:	4629      	mov	r1, r5
 80a1d5c:	f000 f814 	bl	80a1d88 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1d60:	2101      	movs	r1, #1
 80a1d62:	4620      	mov	r0, r4
 80a1d64:	f7ff fbe0 	bl	80a1528 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1d68:	4632      	mov	r2, r6
 80a1d6a:	4629      	mov	r1, r5
 80a1d6c:	4620      	mov	r0, r4
 80a1d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1d72:	f000 b809 	b.w	80a1d88 <__aeabi_atexit>
 80a1d76:	bf00      	nop
 80a1d78:	20000578 	.word	0x20000578
 80a1d7c:	2000006c 	.word	0x2000006c
 80a1d80:	080a1517 	.word	0x080a1517
 80a1d84:	20000588 	.word	0x20000588

080a1d88 <__aeabi_atexit>:
 80a1d88:	460b      	mov	r3, r1
 80a1d8a:	4601      	mov	r1, r0
 80a1d8c:	4618      	mov	r0, r3
 80a1d8e:	f000 b94b 	b.w	80a2028 <__cxa_atexit>

080a1d92 <_ZdlPvj>:
 80a1d92:	f7fe b982 	b.w	80a009a <_ZdlPv>
	...

080a1d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1d98:	4b24      	ldr	r3, [pc, #144]	; (80a1e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1d9a:	681a      	ldr	r2, [r3, #0]
 80a1d9c:	07d0      	lsls	r0, r2, #31
 80a1d9e:	bf5c      	itt	pl
 80a1da0:	2201      	movpl	r2, #1
 80a1da2:	601a      	strpl	r2, [r3, #0]
 80a1da4:	4b22      	ldr	r3, [pc, #136]	; (80a1e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1da6:	681a      	ldr	r2, [r3, #0]
 80a1da8:	07d1      	lsls	r1, r2, #31
 80a1daa:	bf5c      	itt	pl
 80a1dac:	2201      	movpl	r2, #1
 80a1dae:	601a      	strpl	r2, [r3, #0]
 80a1db0:	4b20      	ldr	r3, [pc, #128]	; (80a1e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1db2:	681a      	ldr	r2, [r3, #0]
 80a1db4:	07d2      	lsls	r2, r2, #31
 80a1db6:	bf5c      	itt	pl
 80a1db8:	2201      	movpl	r2, #1
 80a1dba:	601a      	strpl	r2, [r3, #0]
 80a1dbc:	4b1e      	ldr	r3, [pc, #120]	; (80a1e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1dbe:	681a      	ldr	r2, [r3, #0]
 80a1dc0:	07d0      	lsls	r0, r2, #31
 80a1dc2:	bf5c      	itt	pl
 80a1dc4:	2201      	movpl	r2, #1
 80a1dc6:	601a      	strpl	r2, [r3, #0]
 80a1dc8:	4b1c      	ldr	r3, [pc, #112]	; (80a1e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1dca:	681a      	ldr	r2, [r3, #0]
 80a1dcc:	07d1      	lsls	r1, r2, #31
 80a1dce:	bf5c      	itt	pl
 80a1dd0:	2201      	movpl	r2, #1
 80a1dd2:	601a      	strpl	r2, [r3, #0]
 80a1dd4:	4b1a      	ldr	r3, [pc, #104]	; (80a1e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1dd6:	681a      	ldr	r2, [r3, #0]
 80a1dd8:	07d2      	lsls	r2, r2, #31
 80a1dda:	bf5c      	itt	pl
 80a1ddc:	2201      	movpl	r2, #1
 80a1dde:	601a      	strpl	r2, [r3, #0]
 80a1de0:	4b18      	ldr	r3, [pc, #96]	; (80a1e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1de2:	681a      	ldr	r2, [r3, #0]
 80a1de4:	07d0      	lsls	r0, r2, #31
 80a1de6:	bf5c      	itt	pl
 80a1de8:	2201      	movpl	r2, #1
 80a1dea:	601a      	strpl	r2, [r3, #0]
 80a1dec:	4b16      	ldr	r3, [pc, #88]	; (80a1e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1dee:	681a      	ldr	r2, [r3, #0]
 80a1df0:	07d1      	lsls	r1, r2, #31
 80a1df2:	bf5c      	itt	pl
 80a1df4:	2201      	movpl	r2, #1
 80a1df6:	601a      	strpl	r2, [r3, #0]
 80a1df8:	4b14      	ldr	r3, [pc, #80]	; (80a1e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1dfa:	681a      	ldr	r2, [r3, #0]
 80a1dfc:	07d2      	lsls	r2, r2, #31
 80a1dfe:	bf5c      	itt	pl
 80a1e00:	2201      	movpl	r2, #1
 80a1e02:	601a      	strpl	r2, [r3, #0]
 80a1e04:	4b12      	ldr	r3, [pc, #72]	; (80a1e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1e06:	681a      	ldr	r2, [r3, #0]
 80a1e08:	07d0      	lsls	r0, r2, #31
 80a1e0a:	bf5c      	itt	pl
 80a1e0c:	2201      	movpl	r2, #1
 80a1e0e:	601a      	strpl	r2, [r3, #0]
 80a1e10:	4b10      	ldr	r3, [pc, #64]	; (80a1e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1e12:	681a      	ldr	r2, [r3, #0]
 80a1e14:	07d1      	lsls	r1, r2, #31
 80a1e16:	bf5c      	itt	pl
 80a1e18:	2201      	movpl	r2, #1
 80a1e1a:	601a      	strpl	r2, [r3, #0]
 80a1e1c:	4b0e      	ldr	r3, [pc, #56]	; (80a1e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1e1e:	681a      	ldr	r2, [r3, #0]
 80a1e20:	07d2      	lsls	r2, r2, #31
 80a1e22:	bf5c      	itt	pl
 80a1e24:	2201      	movpl	r2, #1
 80a1e26:	601a      	strpl	r2, [r3, #0]
 80a1e28:	4770      	bx	lr
 80a1e2a:	bf00      	nop
 80a1e2c:	200005c4 	.word	0x200005c4
 80a1e30:	200005c0 	.word	0x200005c0
 80a1e34:	200005bc 	.word	0x200005bc
 80a1e38:	200005b8 	.word	0x200005b8
 80a1e3c:	200005b4 	.word	0x200005b4
 80a1e40:	200005b0 	.word	0x200005b0
 80a1e44:	200005ac 	.word	0x200005ac
 80a1e48:	200005a8 	.word	0x200005a8
 80a1e4c:	200005a4 	.word	0x200005a4
 80a1e50:	200005a0 	.word	0x200005a0
 80a1e54:	2000059c 	.word	0x2000059c
 80a1e58:	20000598 	.word	0x20000598

080a1e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1e5c:	4b18      	ldr	r3, [pc, #96]	; (80a1ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1e5e:	681a      	ldr	r2, [r3, #0]
 80a1e60:	07d1      	lsls	r1, r2, #31
 80a1e62:	bf5c      	itt	pl
 80a1e64:	2201      	movpl	r2, #1
 80a1e66:	601a      	strpl	r2, [r3, #0]
 80a1e68:	4b16      	ldr	r3, [pc, #88]	; (80a1ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1e6a:	681a      	ldr	r2, [r3, #0]
 80a1e6c:	07d2      	lsls	r2, r2, #31
 80a1e6e:	bf5c      	itt	pl
 80a1e70:	2201      	movpl	r2, #1
 80a1e72:	601a      	strpl	r2, [r3, #0]
 80a1e74:	4b14      	ldr	r3, [pc, #80]	; (80a1ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1e76:	681a      	ldr	r2, [r3, #0]
 80a1e78:	07d0      	lsls	r0, r2, #31
 80a1e7a:	bf5c      	itt	pl
 80a1e7c:	2201      	movpl	r2, #1
 80a1e7e:	601a      	strpl	r2, [r3, #0]
 80a1e80:	4b12      	ldr	r3, [pc, #72]	; (80a1ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1e82:	681a      	ldr	r2, [r3, #0]
 80a1e84:	07d1      	lsls	r1, r2, #31
 80a1e86:	bf5c      	itt	pl
 80a1e88:	2201      	movpl	r2, #1
 80a1e8a:	601a      	strpl	r2, [r3, #0]
 80a1e8c:	4b10      	ldr	r3, [pc, #64]	; (80a1ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1e8e:	681a      	ldr	r2, [r3, #0]
 80a1e90:	07d2      	lsls	r2, r2, #31
 80a1e92:	bf5c      	itt	pl
 80a1e94:	2201      	movpl	r2, #1
 80a1e96:	601a      	strpl	r2, [r3, #0]
 80a1e98:	4b0e      	ldr	r3, [pc, #56]	; (80a1ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1e9a:	681a      	ldr	r2, [r3, #0]
 80a1e9c:	07d0      	lsls	r0, r2, #31
 80a1e9e:	bf5c      	itt	pl
 80a1ea0:	2201      	movpl	r2, #1
 80a1ea2:	601a      	strpl	r2, [r3, #0]
 80a1ea4:	4b0c      	ldr	r3, [pc, #48]	; (80a1ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1ea6:	681a      	ldr	r2, [r3, #0]
 80a1ea8:	07d1      	lsls	r1, r2, #31
 80a1eaa:	bf5c      	itt	pl
 80a1eac:	2201      	movpl	r2, #1
 80a1eae:	601a      	strpl	r2, [r3, #0]
 80a1eb0:	4b0a      	ldr	r3, [pc, #40]	; (80a1edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1eb2:	681a      	ldr	r2, [r3, #0]
 80a1eb4:	07d2      	lsls	r2, r2, #31
 80a1eb6:	bf5c      	itt	pl
 80a1eb8:	2201      	movpl	r2, #1
 80a1eba:	601a      	strpl	r2, [r3, #0]
 80a1ebc:	4770      	bx	lr
 80a1ebe:	bf00      	nop
 80a1ec0:	200005e4 	.word	0x200005e4
 80a1ec4:	200005e0 	.word	0x200005e0
 80a1ec8:	200005dc 	.word	0x200005dc
 80a1ecc:	200005d8 	.word	0x200005d8
 80a1ed0:	200005d4 	.word	0x200005d4
 80a1ed4:	200005d0 	.word	0x200005d0
 80a1ed8:	200005cc 	.word	0x200005cc
 80a1edc:	200005c8 	.word	0x200005c8

080a1ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1ee0:	4b18      	ldr	r3, [pc, #96]	; (80a1f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1ee2:	681a      	ldr	r2, [r3, #0]
 80a1ee4:	07d1      	lsls	r1, r2, #31
 80a1ee6:	bf5c      	itt	pl
 80a1ee8:	2201      	movpl	r2, #1
 80a1eea:	601a      	strpl	r2, [r3, #0]
 80a1eec:	4b16      	ldr	r3, [pc, #88]	; (80a1f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1eee:	681a      	ldr	r2, [r3, #0]
 80a1ef0:	07d2      	lsls	r2, r2, #31
 80a1ef2:	bf5c      	itt	pl
 80a1ef4:	2201      	movpl	r2, #1
 80a1ef6:	601a      	strpl	r2, [r3, #0]
 80a1ef8:	4b14      	ldr	r3, [pc, #80]	; (80a1f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1efa:	681a      	ldr	r2, [r3, #0]
 80a1efc:	07d0      	lsls	r0, r2, #31
 80a1efe:	bf5c      	itt	pl
 80a1f00:	2201      	movpl	r2, #1
 80a1f02:	601a      	strpl	r2, [r3, #0]
 80a1f04:	4b12      	ldr	r3, [pc, #72]	; (80a1f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1f06:	681a      	ldr	r2, [r3, #0]
 80a1f08:	07d1      	lsls	r1, r2, #31
 80a1f0a:	bf5c      	itt	pl
 80a1f0c:	2201      	movpl	r2, #1
 80a1f0e:	601a      	strpl	r2, [r3, #0]
 80a1f10:	4b10      	ldr	r3, [pc, #64]	; (80a1f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1f12:	681a      	ldr	r2, [r3, #0]
 80a1f14:	07d2      	lsls	r2, r2, #31
 80a1f16:	bf5c      	itt	pl
 80a1f18:	2201      	movpl	r2, #1
 80a1f1a:	601a      	strpl	r2, [r3, #0]
 80a1f1c:	4b0e      	ldr	r3, [pc, #56]	; (80a1f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1f1e:	681a      	ldr	r2, [r3, #0]
 80a1f20:	07d0      	lsls	r0, r2, #31
 80a1f22:	bf5c      	itt	pl
 80a1f24:	2201      	movpl	r2, #1
 80a1f26:	601a      	strpl	r2, [r3, #0]
 80a1f28:	4b0c      	ldr	r3, [pc, #48]	; (80a1f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1f2a:	681a      	ldr	r2, [r3, #0]
 80a1f2c:	07d1      	lsls	r1, r2, #31
 80a1f2e:	bf5c      	itt	pl
 80a1f30:	2201      	movpl	r2, #1
 80a1f32:	601a      	strpl	r2, [r3, #0]
 80a1f34:	4b0a      	ldr	r3, [pc, #40]	; (80a1f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1f36:	681a      	ldr	r2, [r3, #0]
 80a1f38:	07d2      	lsls	r2, r2, #31
 80a1f3a:	bf5c      	itt	pl
 80a1f3c:	2201      	movpl	r2, #1
 80a1f3e:	601a      	strpl	r2, [r3, #0]
 80a1f40:	4770      	bx	lr
 80a1f42:	bf00      	nop
 80a1f44:	20000604 	.word	0x20000604
 80a1f48:	20000600 	.word	0x20000600
 80a1f4c:	200005fc 	.word	0x200005fc
 80a1f50:	200005f8 	.word	0x200005f8
 80a1f54:	200005f4 	.word	0x200005f4
 80a1f58:	200005f0 	.word	0x200005f0
 80a1f5c:	200005ec 	.word	0x200005ec
 80a1f60:	200005e8 	.word	0x200005e8

080a1f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1f64:	4b24      	ldr	r3, [pc, #144]	; (80a1ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1f66:	681a      	ldr	r2, [r3, #0]
 80a1f68:	07d0      	lsls	r0, r2, #31
 80a1f6a:	bf5c      	itt	pl
 80a1f6c:	2201      	movpl	r2, #1
 80a1f6e:	601a      	strpl	r2, [r3, #0]
 80a1f70:	4b22      	ldr	r3, [pc, #136]	; (80a1ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1f72:	681a      	ldr	r2, [r3, #0]
 80a1f74:	07d1      	lsls	r1, r2, #31
 80a1f76:	bf5c      	itt	pl
 80a1f78:	2201      	movpl	r2, #1
 80a1f7a:	601a      	strpl	r2, [r3, #0]
 80a1f7c:	4b20      	ldr	r3, [pc, #128]	; (80a2000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1f7e:	681a      	ldr	r2, [r3, #0]
 80a1f80:	07d2      	lsls	r2, r2, #31
 80a1f82:	bf5c      	itt	pl
 80a1f84:	2201      	movpl	r2, #1
 80a1f86:	601a      	strpl	r2, [r3, #0]
 80a1f88:	4b1e      	ldr	r3, [pc, #120]	; (80a2004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1f8a:	681a      	ldr	r2, [r3, #0]
 80a1f8c:	07d0      	lsls	r0, r2, #31
 80a1f8e:	bf5c      	itt	pl
 80a1f90:	2201      	movpl	r2, #1
 80a1f92:	601a      	strpl	r2, [r3, #0]
 80a1f94:	4b1c      	ldr	r3, [pc, #112]	; (80a2008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1f96:	681a      	ldr	r2, [r3, #0]
 80a1f98:	07d1      	lsls	r1, r2, #31
 80a1f9a:	bf5c      	itt	pl
 80a1f9c:	2201      	movpl	r2, #1
 80a1f9e:	601a      	strpl	r2, [r3, #0]
 80a1fa0:	4b1a      	ldr	r3, [pc, #104]	; (80a200c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1fa2:	681a      	ldr	r2, [r3, #0]
 80a1fa4:	07d2      	lsls	r2, r2, #31
 80a1fa6:	bf5c      	itt	pl
 80a1fa8:	2201      	movpl	r2, #1
 80a1faa:	601a      	strpl	r2, [r3, #0]
 80a1fac:	4b18      	ldr	r3, [pc, #96]	; (80a2010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1fae:	681a      	ldr	r2, [r3, #0]
 80a1fb0:	07d0      	lsls	r0, r2, #31
 80a1fb2:	bf5c      	itt	pl
 80a1fb4:	2201      	movpl	r2, #1
 80a1fb6:	601a      	strpl	r2, [r3, #0]
 80a1fb8:	4b16      	ldr	r3, [pc, #88]	; (80a2014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1fba:	681a      	ldr	r2, [r3, #0]
 80a1fbc:	07d1      	lsls	r1, r2, #31
 80a1fbe:	bf5c      	itt	pl
 80a1fc0:	2201      	movpl	r2, #1
 80a1fc2:	601a      	strpl	r2, [r3, #0]
 80a1fc4:	4b14      	ldr	r3, [pc, #80]	; (80a2018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1fc6:	681a      	ldr	r2, [r3, #0]
 80a1fc8:	07d2      	lsls	r2, r2, #31
 80a1fca:	bf5c      	itt	pl
 80a1fcc:	2201      	movpl	r2, #1
 80a1fce:	601a      	strpl	r2, [r3, #0]
 80a1fd0:	4b12      	ldr	r3, [pc, #72]	; (80a201c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1fd2:	681a      	ldr	r2, [r3, #0]
 80a1fd4:	07d0      	lsls	r0, r2, #31
 80a1fd6:	bf5c      	itt	pl
 80a1fd8:	2201      	movpl	r2, #1
 80a1fda:	601a      	strpl	r2, [r3, #0]
 80a1fdc:	4b10      	ldr	r3, [pc, #64]	; (80a2020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1fde:	681a      	ldr	r2, [r3, #0]
 80a1fe0:	07d1      	lsls	r1, r2, #31
 80a1fe2:	bf5c      	itt	pl
 80a1fe4:	2201      	movpl	r2, #1
 80a1fe6:	601a      	strpl	r2, [r3, #0]
 80a1fe8:	4b0e      	ldr	r3, [pc, #56]	; (80a2024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1fea:	681a      	ldr	r2, [r3, #0]
 80a1fec:	07d2      	lsls	r2, r2, #31
 80a1fee:	bf5c      	itt	pl
 80a1ff0:	2201      	movpl	r2, #1
 80a1ff2:	601a      	strpl	r2, [r3, #0]
 80a1ff4:	4770      	bx	lr
 80a1ff6:	bf00      	nop
 80a1ff8:	20000634 	.word	0x20000634
 80a1ffc:	20000630 	.word	0x20000630
 80a2000:	2000062c 	.word	0x2000062c
 80a2004:	20000628 	.word	0x20000628
 80a2008:	20000624 	.word	0x20000624
 80a200c:	20000620 	.word	0x20000620
 80a2010:	2000061c 	.word	0x2000061c
 80a2014:	20000618 	.word	0x20000618
 80a2018:	20000614 	.word	0x20000614
 80a201c:	20000610 	.word	0x20000610
 80a2020:	2000060c 	.word	0x2000060c
 80a2024:	20000608 	.word	0x20000608

080a2028 <__cxa_atexit>:
 80a2028:	b510      	push	{r4, lr}
 80a202a:	4c05      	ldr	r4, [pc, #20]	; (80a2040 <__cxa_atexit+0x18>)
 80a202c:	4613      	mov	r3, r2
 80a202e:	b12c      	cbz	r4, 80a203c <__cxa_atexit+0x14>
 80a2030:	460a      	mov	r2, r1
 80a2032:	4601      	mov	r1, r0
 80a2034:	2002      	movs	r0, #2
 80a2036:	f3af 8000 	nop.w
 80a203a:	bd10      	pop	{r4, pc}
 80a203c:	4620      	mov	r0, r4
 80a203e:	bd10      	pop	{r4, pc}
 80a2040:	00000000 	.word	0x00000000

080a2044 <memcpy>:
 80a2044:	b510      	push	{r4, lr}
 80a2046:	1e43      	subs	r3, r0, #1
 80a2048:	440a      	add	r2, r1
 80a204a:	4291      	cmp	r1, r2
 80a204c:	d004      	beq.n	80a2058 <memcpy+0x14>
 80a204e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2052:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2056:	e7f8      	b.n	80a204a <memcpy+0x6>
 80a2058:	bd10      	pop	{r4, pc}

080a205a <memset>:
 80a205a:	4603      	mov	r3, r0
 80a205c:	4402      	add	r2, r0
 80a205e:	4293      	cmp	r3, r2
 80a2060:	d002      	beq.n	80a2068 <memset+0xe>
 80a2062:	f803 1b01 	strb.w	r1, [r3], #1
 80a2066:	e7fa      	b.n	80a205e <memset+0x4>
 80a2068:	4770      	bx	lr
	...

080a206c <srand>:
 80a206c:	b538      	push	{r3, r4, r5, lr}
 80a206e:	4b12      	ldr	r3, [pc, #72]	; (80a20b8 <srand+0x4c>)
 80a2070:	4605      	mov	r5, r0
 80a2072:	681c      	ldr	r4, [r3, #0]
 80a2074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2076:	b9d3      	cbnz	r3, 80a20ae <srand+0x42>
 80a2078:	2018      	movs	r0, #24
 80a207a:	f7fe ffb9 	bl	80a0ff0 <malloc>
 80a207e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2082:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2084:	8003      	strh	r3, [r0, #0]
 80a2086:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a208a:	8043      	strh	r3, [r0, #2]
 80a208c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2090:	8083      	strh	r3, [r0, #4]
 80a2092:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2096:	80c3      	strh	r3, [r0, #6]
 80a2098:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a209c:	8103      	strh	r3, [r0, #8]
 80a209e:	2305      	movs	r3, #5
 80a20a0:	8143      	strh	r3, [r0, #10]
 80a20a2:	230b      	movs	r3, #11
 80a20a4:	8183      	strh	r3, [r0, #12]
 80a20a6:	2201      	movs	r2, #1
 80a20a8:	2300      	movs	r3, #0
 80a20aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a20ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a20b0:	2200      	movs	r2, #0
 80a20b2:	611d      	str	r5, [r3, #16]
 80a20b4:	615a      	str	r2, [r3, #20]
 80a20b6:	bd38      	pop	{r3, r4, r5, pc}
 80a20b8:	20000068 	.word	0x20000068

080a20bc <strcmp>:
 80a20bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a20c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a20c4:	2a01      	cmp	r2, #1
 80a20c6:	bf28      	it	cs
 80a20c8:	429a      	cmpcs	r2, r3
 80a20ca:	d0f7      	beq.n	80a20bc <strcmp>
 80a20cc:	1ad0      	subs	r0, r2, r3
 80a20ce:	4770      	bx	lr

080a20d0 <strlen>:
 80a20d0:	4603      	mov	r3, r0
 80a20d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a20d6:	2a00      	cmp	r2, #0
 80a20d8:	d1fb      	bne.n	80a20d2 <strlen+0x2>
 80a20da:	1a18      	subs	r0, r3, r0
 80a20dc:	3801      	subs	r0, #1
 80a20de:	4770      	bx	lr

080a20e0 <dynalib_user>:
 80a20e0:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a20f0:	0000 0000 6f6e 0077 6c61 7261 006d 6f4c     ....now.alarm.Lo
 80a2100:	6572 206d 7069 7573 206d 6f64 6f6c 2072     rem ipsum dolor 
 80a2110:	6973 2074 6d61 7465 202c 6f63 736e 6365     sit amet, consec
 80a2120:	6574 7574 2072 6461 7069 7369 6963 676e     tetur adipiscing
 80a2130:	6520 696c 2e74 4320 7275 6261 7469 7275      elit. Curabitur
 80a2140:	6120 6964 6970 6373 6e69 2067 6e61 6574      adipiscing ante
 80a2150:	7320 6465 6e20 6269 2068 6974 636e 6469      sed nibh tincid
 80a2160:	6e75 2074 6566 6775 6169 2e74 4d20 6561     unt feugiat. Mae
 80a2170:	6563 616e 2073 6e65 6d69 6d20 7361 6173     cenas enim massa
 80a2180:	202c 7266 6e69 6967 6c6c 0061 6f67 676e     , fringilla.gong
 80a2190:	7000 736f 5300 6e65 6f73 2072 6176 756c     .pos.Sensor valu
 80a21a0:	3a65 0020                                   e: .

080a21a4 <_ZTV15Adafruit_ST7735>:
	...
 80a21ac:	00c5 080a 02d1 080a 0939 080a 12d5 080a     ........9.......
 80a21bc:	0725 080a 078d 080a 058b 080a 0605 080a     %...............
 80a21cc:	084d 080a 067d 080a 0319 080a 039f 080a     M...}...........
 80a21dc:	0bd3 080a                                   ....

080a21e0 <_ZL4Gcmd>:
 80a21e0:	0113 3280 8011 2664 0401 02b1 140b 02c0     ...2..d&........
 80a21f0:	0008 01c1 c505 4102 c730 c101 01ec 3a1b     .......A0......:
 80a2200:	5581 2a64 0004 0000 2b7f 0004 0000 369f     .Ud*.....+.....6
 80a2210:	c801 01b7 f200 0001 8fe0 2428 3122 0e2b     ..........($"1+.
 80a2220:	a553 1642 1218 141a 3203 8fe1 1b17 0e1d     S.B......2......
 80a2230:	1114 a52c 093d 2d27 2b25 323c 8013 290a     ..,.=.'-%+<2...)
 80a2240:	ff80 0000                                   ....

080a2244 <_ZTV12Adafruit_GFX>:
	...
 80a2254:	0939 080a 12d5 080a 00a1 080a 078d 080a     9...............
 80a2264:	08ad 080a 08c9 080a 084d 080a 08e3 080a     ........M.......
 80a2274:	091b 080a 0937 080a 0bd3 080a               ....7.......

080a2280 <glcdfontBitmaps>:
 80a2280:	ff00 0000 0000 0000 0000 f870 f8a8 88d8     ..........p.....
 80a2290:	0070 f870 f8a8 d888 0070 5000 f8f8 70f8     p.p.....p..P...p
 80a22a0:	0020 2000 f870 70f8 0020 5070 a8f8 20f8      .. p..p .pP... 
 80a22b0:	0070 7020 f8f8 20f8 0070 0000 7020 2070     p. p... p... pp 
 80a22c0:	0000 f8f8 88d8 d888 f8f8 0000 5020 2050     ............ PP 
 80a22d0:	0000 f8f8 a8d8 d8a8 f8f8 3800 6818 a0a0     ...........8.h..
 80a22e0:	0040 8870 7088 f820 0020 4878 4078 4040     @.p..p . .xHx@@@
 80a22f0:	00c0 4878 4878 5848 00c0 a820 d870 70d8     ..xHxHHX.. .p..p
 80a2300:	20a8 c080 f8f0 c0f0 0080 1808 f878 1878     . ..........x.x.
 80a2310:	0008 7020 20a8 70a8 0020 d8d8 d8d8 00d8     .. p. .p .......
 80a2320:	00d8 a878 68a8 2828 0028 4830 2850 4810     ..x..h(((.0HP(.H
 80a2330:	3048 0000 0000 f800 00f8 7020 20a8 70a8     H0........ p. .p
 80a2340:	f820 2000 a870 2020 0020 2000 2020 70a8      .. p.   ..   .p
 80a2350:	0020 2000 f810 2010 0000 2000 f840 2040      .. ... ... @.@ 
 80a2360:	0000 8000 8080 00f8 0000 5000 f8f8 0050     ...........P..P.
 80a2370:	0000 2000 7020 f8f8 0000 f800 70f8 2020     ...  p.......p  
	...
 80a2388:	0000 2020 2020 0020 0020 5050 0050 0000     ..     . .PPP...
 80a2398:	0000 5050 50f8 50f8 0050 7820 70a0 f028     ..PP.P.PP. x.p(.
 80a23a8:	0020 c8c0 2010 9840 0018 a040 40a0 90a8      .... @...@..@..
 80a23b8:	0068 3030 4020 0000 0000 2010 4040 2040     h.00 @..... @@@ 
 80a23c8:	0010 2040 1010 2010 0040 a820 f870 a870     ..@ ... @. .p.p.
 80a23d8:	0020 2000 f820 2020 0000 0000 0000 3030      ..  .  ......00
 80a23e8:	4020 0000 f800 0000 0000 0000 0000 3000      @.............0
 80a23f8:	0030 0800 2010 8040 0000 8870 a898 88c8     0.... @...p.....
 80a2408:	0070 6020 2020 2020 0070 8870 7008 8080     p. `    p.p..p..
 80a2418:	00f8 08f8 3010 8808 0070 3010 9050 10f8     .....0..p..0P...
 80a2428:	0010 80f8 08f0 8808 0070 4038 f080 8888     ........p.8@....
 80a2438:	0070 08f8 1008 4020 0080 8870 7088 8888     p..... @..p..p..
 80a2448:	0070 8870 7888 1008 00e0 0000 0020 0020     p.p..x...... . .
 80a2458:	0000 0000 0020 2020 0040 1008 4020 1020     .... .  @... @ .
 80a2468:	0008 0000 00f8 00f8 0000 2040 0810 2010     ..........@ ... 
 80a2478:	0040 8870 3008 0020 0020 8870 b8a8 80b0     @.p..0 . .p.....
 80a2488:	0078 5020 8888 88f8 0088 88f0 f088 8888     x. P............
 80a2498:	00f0 8870 8080 8880 0070 88f0 8888 8888     ..p.....p.......
 80a24a8:	00f0 80f8 f080 8080 00f8 80f8 f080 8080     ................
 80a24b8:	0080 8878 8080 8898 0078 8888 f888 8888     ..x.....x.......
 80a24c8:	0088 2070 2020 2020 0070 1038 1010 9010     ..p     p.8.....
 80a24d8:	0060 9088 c0a0 90a0 0088 8080 8080 8080     `...............
 80a24e8:	00f8 d888 a8a8 88a8 0088 8888 a8c8 8898     ................
 80a24f8:	0088 8870 8888 8888 0070 88f0 f088 8080     ..p.....p.......
 80a2508:	0080 8870 8888 90a8 0068 88f0 f088 90a0     ..p.....h.......
 80a2518:	0088 8870 7080 8808 0070 a8f8 2020 2020     ..p..p..p...    
 80a2528:	0020 8888 8888 8888 0070 8888 8888 5088      .......p......P
 80a2538:	0020 8888 a888 a8a8 0050 8888 2050 8850      .......P...P P.
 80a2548:	0088 8888 2050 2020 0020 08f8 7010 8040     ....P    ....p@.
 80a2558:	00f8 4078 4040 4040 0078 8000 2040 0810     ..x@@@@@x...@ ..
 80a2568:	0000 0878 0808 0808 0078 5020 0088 0000     ..x.....x. P....
	...
 80a2580:	00f8 6060 1020 0000 0000 0000 1060 9070     ..`` .......`.p.
 80a2590:	0078 8080 c8b0 c888 00b0 0000 8870 8880     x...........p...
 80a25a0:	0070 0808 9868 9888 0068 0000 8870 80f8     p...h...h...p...
 80a25b0:	0070 2810 7020 2020 0020 0000 9870 6898     p..( p   ...p..h
 80a25c0:	7008 8080 c8b0 8888 0088 0020 2060 2020     .p........ .`   
 80a25d0:	0070 0010 1010 9010 0060 8080 a090 a0c0     p.......`.......
 80a25e0:	0090 2060 2020 2020 0070 0000 a8d0 a8a8     ..`     p.......
 80a25f0:	00a8 0000 c8b0 8888 0088 0000 8870 8888     ............p...
 80a2600:	0070 0000 c8b0 b0c8 8080 0000 9868 6898     p...........h..h
 80a2610:	0808 0000 c8b0 8080 0080 0000 8078 0870     ............x.p.
 80a2620:	00f0 2020 20f8 2820 0010 0000 8888 9888     ..  .  (........
 80a2630:	0068 0000 8888 5088 0020 0000 8888 a8a8     h......P .......
 80a2640:	0050 0000 5088 5020 0088 0000 8888 0878     P....P P......x.
 80a2650:	7088 0000 10f8 4020 00f8 2010 4020 2020     .p.... @...  @  
 80a2660:	0010 2020 0020 2020 0020 2040 1020 2020     ..   .   .@  .  
 80a2670:	0040 a840 0010 0000 0000 7020 88d8 f888     @.@....... p....
 80a2680:	0000 8870 8080 7088 6010 8800 8800 9888     ..p....p.`......
 80a2690:	0068 0018 8870 80f8 0078 00f8 1060 9070     h...p...x...`.p.
 80a26a0:	0078 0088 1060 9070 0078 00c0 1060 9070     x...`.p.x...`.p.
 80a26b0:	0078 0030 1060 9070 0078 7800 c0c0 1078     x.0.`.p.x..x..x.
 80a26c0:	0030 00f8 8870 80f8 0078 0088 8870 80f8     0...p...x...p...
 80a26d0:	0078 00c0 8870 80f8 0078 0028 1030 1010     x...p...x.(.0...
 80a26e0:	0038 4830 1030 1010 0038 0060 1030 1010     8.0H0...8.`.0...
 80a26f0:	0038 0050 5020 f888 8888 0020 5020 f888     8.P. P.... . P..
 80a2700:	8888 0030 80f0 80e0 00f0 0000 1078 9078     ..0.........x.x.
 80a2710:	0078 5038 f890 9090 0098 8870 7000 8888     x.8P......p..p..
 80a2720:	0070 8800 7000 8888 0070 c000 7000 8888     p....p..p....p..
 80a2730:	0070 8870 8800 9888 0068 c000 8800 9888     p.p.....h.......
 80a2740:	0068 0048 4848 3848 7008 0088 8870 8888     h.H.HHH8.p..p...
 80a2750:	0070 0088 8888 8888 0070 2020 a0f8 f8a0     p.......p.  ....
 80a2760:	2020 5830 e048 4840 00f8 d8d8 f870 f820       0XH.@H....p. .
 80a2770:	2020 90e0 e090 b890 9090 2818 7020 2020       .........( p  
 80a2780:	c0a0 0018 1060 9070 0078 0018 1030 1010     ....`.p.x...0...
 80a2790:	0038 1800 7000 8888 0070 1800 8800 9888     8....p..p.......
 80a27a0:	0068 7800 7000 4848 0048 00f8 e8c8 98b8     h..x.pHHH.......
 80a27b0:	0088 9070 7890 f800 0000 8870 7088 f800     ..p..x....p..p..
 80a27c0:	0000 0020 6020 8880 0070 0000 f800 8080     .. . `..p.......
 80a27d0:	0000 0000 f800 0808 0000 8880 b890 9848     ..............H.
 80a27e0:	3820 8880 a890 b858 0808 2020 2000 2020      8....X...  .   
 80a27f0:	0020 2800 a050 2850 0000 a000 2850 a050      ..(P.P(....P(P.
 80a2800:	0000 8820 8820 8820 8820 a850 a850 a850     .. . . . .P.P.P.
 80a2810:	a850 1010 1010 1010 1010 1010 1010 10f0     P...............
 80a2820:	1010 1010 10f0 10f0 1010 2828 2828 28e8     ..........((((.(
 80a2830:	2828 0000 0000 28f8 2828 0000 10f0 10f0     ((.....(((......
 80a2840:	1010 2828 08e8 28e8 2828 2828 2828 2828     ..((...(((((((((
 80a2850:	2828 0000 08f8 28e8 2828 2828 08e8 00f8     ((.....(((((....
 80a2860:	0000 2828 2828 00f8 0000 1010 10f0 00f0     ..((((..........
 80a2870:	0000 0000 0000 10f0 1010 1010 1010 0018     ................
 80a2880:	0000 1010 1010 00f8 0000 0000 0000 10f8     ................
 80a2890:	1010 1010 1010 1018 1010 0000 0000 00f8     ................
 80a28a0:	0000 1010 1010 10f8 1010 1010 1018 1018     ................
 80a28b0:	1010 2828 2828 2828 2828 2828 2028 0038     ..((((((((((( 8.
 80a28c0:	0000 0000 2038 2828 2828 2828 00e8 00f8     ....8 ((((((....
 80a28d0:	0000 0000 00f8 28e8 2828 2828 2028 2828     .......(((((( ((
 80a28e0:	2828 0000 00f8 00f8 0000 2828 00e8 28e8     ((........((...(
 80a28f0:	2828 1010 00f8 00f8 0000 2828 2828 00f8     ((........((((..
 80a2900:	0000 0000 00f8 10f8 1010 0000 0000 28f8     ...............(
 80a2910:	2828 2828 2828 0038 0000 1010 1018 0018     ((((((8.........
 80a2920:	0000 0000 1018 1018 1010 0000 0000 2838     ..............8(
 80a2930:	2828 2828 2828 28f8 2828 1010 10f8 10f8     ((((((.(((......
 80a2940:	1010 1010 1010 00f0 0000 0000 0000 1018     ................
 80a2950:	1010 f8f8 f8f8 f8f8 f8f8 0000 0000 f8f8     ................
 80a2960:	f8f8 e0e0 e0e0 e0e0 e0e0 1818 1818 1818     ................
 80a2970:	1818 f8f8 f8f8 0000 0000 0000 9068 9090     ............h...
 80a2980:	0068 7000 f098 f098 0080 f800 8098 8080     h..p............
 80a2990:	0080 f800 5050 5050 0050 88f8 2040 8840     ....PPPPP...@ @.
 80a29a0:	00f8 0000 9078 9090 0060 5000 5050 6850     ....x...`..PPPPh
 80a29b0:	00c0 f800 20a0 2020 0020 20f8 8870 7088     .....    .. p..p
 80a29c0:	f820 5020 f888 5088 0020 5020 8888 5050      . P...P . P..PP
 80a29d0:	00d8 4030 7030 8888 0070 0000 7000 a8a8     ..0@0p..p....p..
 80a29e0:	0070 7008 a898 c8a8 8070 8070 f080 8080     p..p....p.p.....
 80a29f0:	0070 8870 8888 8888 0088 f800 f800 f800     p.p.............
 80a2a00:	0000 2020 20f8 0020 00f8 2040 2010 0040     ..  .  ...@ . @.
 80a2a10:	00f8 2010 2040 0010 00f8 2838 2020 2020     ... @ ....8(    
 80a2a20:	2020 2020 2020 a020 e0a0 3030 f800 3000            ...00...0
 80a2a30:	0030 e800 00b8 b8e8 0000 d870 70d8 0000     0.........p..p..
 80a2a40:	0000 0000 3000 0030 0000 0000 0000 0030     .....00.......0.
 80a2a50:	0000 2038 2020 a0a0 2060 4870 4848 0048     ..8   ..` pHHHH.
 80a2a60:	0000 1870 6030 0078 0000 0000 7878 7878     ..p.0`x.....xxxx
	...

080a2a7a <arial_8ptBitmaps>:
 80a2a7a:	7f20 0000 0000 0000 0000 0000 8080 8080      ...............
 80a2a8a:	8080 8000 0000 a0a0 00a0 0000 0000 0000     ................
 80a2a9a:	2828 50f8 f850 a0a0 0000 a870 70a0 2828     ((.PP.....p..p((
 80a2aaa:	70a8 0020 0062 0094 0094 0068 000b 8014     .p .b.....h.....
 80a2aba:	8014 0023 0000 0000 4830 3048 8c50 7488     ..#.....0HH0P..t
 80a2aca:	0000 8080 0080 0000 0000 0000 4020 8080     ............ @..
 80a2ada:	8080 8080 2040 4080 2020 2020 2020 8040     ....@ .@      @.
 80a2aea:	e040 a040 0000 0000 0000 0000 2020 20f8     @.@.........  . 
 80a2afa:	0020 0000 0000 0000 0000 8000 8080 0000      ...............
 80a2b0a:	0000 e000 0000 0000 0000 0000 0000 8000     ................
 80a2b1a:	0000 2020 4040 4040 8080 0000 8870 8888     ..  @@@@....p...
 80a2b2a:	8888 7088 0000 6020 20a0 2020 2020 0000     ...p.. `.     ..
 80a2b3a:	8870 0808 2010 f840 0000 8870 3008 0808     p.... @...p..0..
 80a2b4a:	7088 0000 3010 5050 f890 1010 0000 4078     .p...0PP......x@
 80a2b5a:	f080 0808 7088 0000 8870 f080 8888 7088     .....p..p......p
 80a2b6a:	0000 10f8 2010 4020 4040 0000 8870 7088     .....  @@@..p..p
 80a2b7a:	8888 7088 0000 8870 8888 0878 7088 0000     ...p..p...x..p..
 80a2b8a:	0000 0080 0000 8000 0000 0000 0080 0000     ................
 80a2b9a:	8000 8080 0000 7008 7080 0008 0000 0000     .......p.p......
 80a2baa:	f800 f800 0000 0000 0000 7080 7008 0080     ...........p.p..
 80a2bba:	0000 8870 1008 2020 2000 0000 001f 8060     ..p...  . ....`.
 80a2bca:	404d 4093 40a2 40a2 80a6 009b 4040 803f     M@.@.@.@....@@?.
 80a2bda:	2810 2828 7c44 8282 0000 84f8 fc84 8484     .(((D|..........
 80a2bea:	f884 0000 4438 8080 8080 3844 0000 88f0     ....8D....D8....
 80a2bfa:	8484 8484 f088 0000 80f8 f880 8080 f880     ................
 80a2c0a:	0000 80f8 f080 8080 8080 0000 4438 8082     ............8D..
 80a2c1a:	828e 3844 0000 8484 fc84 8484 8484 0000     ..D8............
 80a2c2a:	8080 8080 8080 8080 0000 1010 1010 9010     ................
 80a2c3a:	6090 0000 8884 b090 88d0 8488 0000 8080     .`..............
 80a2c4a:	8080 8080 f880 0000 c682 aac6 aaaa 9292     ................
 80a2c5a:	0000 c484 a4a4 9494 848c 0000 4438 8282     ............8D..
 80a2c6a:	8282 3844 0000 88f0 8888 80f0 8080 0000     ..D8............
 80a2c7a:	4438 8282 9a82 3a44 0000 84f8 f884 8890     8D....D:........
 80a2c8a:	8488 0000 8478 6080 0418 7884 0000 20f8     ....x..`...x... 
 80a2c9a:	2020 2020 2020 0000 8484 8484 8484 7884           .........x
 80a2caa:	0000 8282 4444 2828 1010 0000 2084 208a     ....DD((..... . 
 80a2cba:	404a 404a 4051 4051 8020 8020 0000 0000     J@J@Q@Q@ . .....
 80a2cca:	4884 3048 4830 8448 0000 4482 2844 1010     .HH00HH....DD(..
 80a2cda:	1010 0000 087c 1010 2020 fc40 0000 80c0     ....|...  @.....
 80a2cea:	8080 8080 8080 c080 8080 4040 4040 2020     ..........@@@@  
 80a2cfa:	0000 40c0 4040 4040 4040 c040 5020 8850     ...@@@@@@@@. PP.
	...
 80a2d16:	0000 fc00 4080 0000 0000 0000 0000 0000     .....@..........
 80a2d26:	8870 8878 6898 0000 8080 c8b0 8888 b0c8     p.x..h..........
 80a2d36:	0000 0000 8870 8080 7088 0000 0808 9868     ....p....p....h.
 80a2d46:	8888 6898 0000 0000 8870 80f8 7088 0000     ...h....p....p..
 80a2d56:	4020 40e0 4040 4040 0000 0000 9868 8888      @.@@@@@....h...
 80a2d66:	6898 f008 8080 c8b0 8888 8888 0000 0080     .h..............
 80a2d76:	8080 8080 8080 0000 0040 4040 4040 4040     ........@.@@@@@@
 80a2d86:	8040 8080 a090 a0c0 90a0 0000 8080 8080     @...............
 80a2d96:	8080 8080 0000 0000 d2bc 9292 9292 0000     ................
 80a2da6:	0000 88f0 8888 8888 0000 0000 8870 8888     ............p...
 80a2db6:	7088 0000 0000 c8b0 8888 b0c8 8080 0000     .p..............
 80a2dc6:	9868 8888 6898 0808 0000 c0a0 8080 8080     h....h..........
 80a2dd6:	0000 0000 8870 1060 7088 0000 4040 40e0     ....p.`..p..@@.@
 80a2de6:	4040 6040 0000 0000 8888 8888 6898 0000     @@@`.........h..
 80a2df6:	0000 8888 5050 2020 0000 0000 0000 8088     ....PP  ........
 80a2e06:	8094 0055 0055 0022 0022 0000 0000 0000     ..U.U.".".......
 80a2e16:	5088 2020 8850 0000 0000 8888 5050 2020     .P  P.......PP  
 80a2e26:	4020 0000 10f8 2020 f840 0000 4020 4040      @....  @... @@@
 80a2e36:	4080 4040 2040 8080 8080 8080 8080 8080     .@@@@ ..........
 80a2e46:	4080 4040 4020 4040 8040 0000 e800 00b0     .@@@ @@@@.......
 80a2e56:	0000 0000                                   ....

080a2e5a <arial_8ptDescriptors>:
 80a2e5a:	0a02 0000 0a01 000a 0a03 0014 0a05 001e     ................
 80a2e6a:	0a05 0028 0a09 0032 0a06 0046 0a01 0050     ..(...2...F...P.
 80a2e7a:	0a03 005a 0a03 0064 0a03 006e 0a05 0078     ..Z...d...n...x.
 80a2e8a:	0a01 0082 0a03 008c 0a01 0096 0a03 00a0     ................
 80a2e9a:	0a05 00aa 0a03 00b4 0a05 00be 0a05 00c8     ................
 80a2eaa:	0a05 00d2 0a05 00dc 0a05 00e6 0a05 00f0     ................
 80a2eba:	0a05 00fa 0a05 0104 0a01 010e 0a01 0118     ................
 80a2eca:	0a05 0122 0a05 012c 0a05 0136 0a05 0140     .."...,...6...@.
 80a2eda:	0a0a 014a 0a07 015e 0a06 0168 0a06 0172     ..J...^...h...r.
 80a2eea:	0a06 017c 0a05 0186 0a05 0190 0a07 019a     ..|.............
 80a2efa:	0a06 01a4 0a01 01ae 0a04 01b8 0a06 01c2     ................
 80a2f0a:	0a05 01cc 0a07 01d6 0a06 01e0 0a07 01ea     ................
 80a2f1a:	0a05 01f4 0a07 01fe 0a06 0208 0a06 0212     ................
 80a2f2a:	0a05 021c 0a06 0226 0a07 0230 0a0b 023a     ......&...0...:.
 80a2f3a:	0a06 024e 0a07 0258 0a06 0262 0a02 026c     ..N...X...b...l.
 80a2f4a:	0a03 0276 0a02 0280 0a05 028a 0a06 0294     ..v.............
 80a2f5a:	0a02 029e 0a05 02a8 0a05 02b2 0a05 02bc     ................
 80a2f6a:	0a05 02c6 0a05 02d0 0a03 02da 0a05 02e4     ................
 80a2f7a:	0a05 02ee 0a01 02f8 0a02 0302 0a04 030c     ................
 80a2f8a:	0a01 0316 0a07 0320 0a05 032a 0a05 0334     ...... ...*...4.
 80a2f9a:	0a05 033e 0a05 0348 0a03 0352 0a05 035c     ..>...H...R...\.
 80a2faa:	0a03 0366 0a05 0370 0a05 037a 0a09 0384     ..f...p...z.....
 80a2fba:	0a05 0398 0a05 03a2 0a05 03ac 0a03 03b6     ................
 80a2fca:	0a01 03c0 0a03 03ca 0a05 03d4               ............

080a2fd6 <centuryGothic_8ptBitmaps>:
 80a2fd6:	7f20 0000 0000 0000 0000 0000 0000 8080      ...............
 80a2fe6:	8080 8080 8000 0000 a000 00a0 0000 0000     ................
 80a2ff6:	0000 0000 2828 28fc fc50 5050 0000 7020     ....((.(P.PP.. p
 80a3006:	a0a8 3060 a828 2070 0020 947e 6898 1916     ..`0(.p  .~..h..
 80a3016:	4629 0000 2000 5050 5420 8c88 0072 0000     )F... PP T..r...
 80a3026:	8080 0000 0000 0000 0000 4000 8080 8080     ...........@....
 80a3036:	8080 8080 0040 4080 4040 4040 4040 8040     ....@..@@@@@@@@.
 80a3046:	4000 e0e0 0040 0000 0000 0000 2000 f820     .@..@........  .
 80a3056:	2020 0000 0000 0000 0000 0000 0000 8040       ............@.
 80a3066:	0000 0000 0000 00e0 0000 0000 0000 0000     ................
 80a3076:	0000 0000 0080 0000 2010 2020 4040 8040     .........   @@@.
 80a3086:	0080 2000 8850 8888 5088 0020 0000 40c0     ... P....P ....@
 80a3096:	4040 4040 4040 0000 7000 8888 1008 4020     @@@@@@...p.... @
 80a30a6:	00f8 0000 8870 3008 8808 7088 0000 0800     ....p..0...p....
 80a30b6:	1808 4828 08fc 0008 0000 2038 7040 0808     ..(H......8 @p..
 80a30c6:	7088 0000 1000 4020 8870 8888 0070 0000     .p.... @p...p...
 80a30d6:	10f8 2010 4020 8040 0000 7000 8888 8870     ...  @@....p..p.
 80a30e6:	8888 0070 0000 8870 8888 1070 4020 0000     ..p...p...p. @..
 80a30f6:	0000 8000 0000 0000 0080 0000 0000 0040     ..............@.
 80a3106:	0000 4000 0080 0000 0c00 8070 0c70 0000     ...@......p.p...
 80a3116:	0000 0000 00fc fc00 0000 0000 0000 c000     ................
 80a3126:	0438 c038 0000 0000 8870 7008 7880 2000     8.8.....p..p.x. 
 80a3136:	0000 0000 003e 0041 809a 80a4 80a4 009b     ....>.A.........
 80a3146:	0041 003e 0000 0000 1000 2828 4428 447c     A.>.......(((D|D
 80a3156:	0082 0000 a0c0 e0a0 9090 e090 0000 3c00     ...............<
 80a3166:	8042 8080 4280 003c 0000 88f0 8484 8484     B....B<.........
 80a3176:	f088 0000 f800 8080 80f8 8080 00f8 0000     ................
 80a3186:	80f0 f080 8080 8080 0000 3c00 8042 8780     ...........<B...
 80a3196:	4281 003c 0000 8484 fc84 8484 8484 0000     .B<.............
 80a31a6:	8000 8080 8080 8080 0080 0000 1010 1010     ................
 80a31b6:	1010 6090 0000 8800 a090 c0c0 90a0 0088     ...`............
 80a31c6:	0000 8080 8080 8080 f080 0000 0000 0041     ..............A.
 80a31d6:	0041 80a2 80a2 80a4 8094 8094 8088 0000     A...............
 80a31e6:	0000 8400 c484 94a4 848c 0084 0000 423c     ..............<B
 80a31f6:	8181 8181 3c42 0000 f000 8888 80f0 8080     ....B<..........
 80a3206:	0080 0000 423c 8181 8981 3d46 0000 f000     ....<B....F=....
 80a3216:	8888 a0f0 9090 0088 0000 9060 4080 1020     ..........`..@ .
 80a3226:	6090 0000 f800 2020 2020 2020 0020 0000     .`....       ...
 80a3236:	8484 8484 8484 7884 0000 8200 4444 2844     .......x....DDD(
 80a3246:	2828 0010 0000 8800 8880 5580 5500 5500     ((.........U.U.U
 80a3256:	5500 2200 2200 0000 0000 0000 8888 2050     .U."."........P 
 80a3266:	5020 8888 0000 8200 2844 1028 1010 0010      P......D((.....
 80a3276:	0000 10f8 2010 4020 f840 0000 c000 8080     .....  @@.......
 80a3286:	8080 8080 8080 00c0 4080 2040 1020 0808     .........@@  ...
 80a3296:	0004 c000 4040 4040 4040 4040 00c0 2810     ....@@@@@@@@...(
 80a32a6:	4428 8244 0000 0000 0000 0000 0000 0000     (DD.............
 80a32b6:	0000 80fc 0040 0000 0000 0000 0000 0000     ....@...........
 80a32c6:	3a00 8246 4682 003a 0000 8080 c4b8 8282     .:F..F:.........
 80a32d6:	b8c4 0000 0000 3800 8044 4480 0038 0000     .......8D..D8...
 80a32e6:	0202 463a 8282 3a46 0000 0000 3800 fc44     ..:F..F:.....8D.
 80a32f6:	4480 0038 0000 4020 40e0 4040 4040 0000     .D8... @.@@@@@..
 80a3306:	0000 3400 844c 4c84 8834 0070 8080 c8b0     ...4L..L4.p.....
 80a3316:	8484 8484 0000 8000 8000 8080 8080 0080     ................
 80a3326:	0000 0040 4040 4040 4040 8040 8000 9080     ..@.@@@@@@@.....
 80a3336:	c0a0 a0c0 0090 0000 8080 8080 8080 8080     ................
	...
 80a334e:	00b3 80cc 8088 8088 8088 8088 0000 0000     ................
 80a335e:	0000 b000 84c8 8484 0084 0000 0000 4830     ..............0H
 80a336e:	8484 3048 0000 0000 b800 82c4 c482 80b8     ..H0............
 80a337e:	0080 0000 463a 8282 3a46 0202 0000 a000     ....:F..F:......
 80a338e:	80c0 8080 0080 0000 0000 8060 2040 40a0     ..........`.@ .@
 80a339e:	0000 4000 e040 4040 4040 0040 0000 0000     ...@@.@@@@@.....
 80a33ae:	8484 8484 3048 0000 0000 8200 4444 2828     ....H0......DD((
 80a33be:	0010 0000 0000 0000 8800 8980 5500 5500     .............U.U
 80a33ce:	2200 2200 0000 0000 0000 0000 5088 2020     .".".........P  
 80a33de:	8850 0000 0000 8800 5048 3050 2020 0040     P.......HPP0  @.
 80a33ee:	0000 10f8 2020 f840 0000 6000 4040 8040     ....  @....`@@@.
 80a33fe:	4040 4040 0060 8080 8080 8080 8080 8080     @@@@`...........
 80a340e:	c000 4040 2040 4040 4040 00c0 0000 6400     ..@@@ @@@@.....d
 80a341e:	0098 0000 0000                              ......

080a3424 <comicSansMS_8ptBitmaps>:
 80a3424:	7f20 0000 0000 0000 0000 0000 0000 8080      ...............
 80a3434:	8080 8080 0080 0080 0000 a000 a0a0 0000     ................
	...
 80a344c:	0011 0011 807f 0022 0022 00ff 0044 0044     ......"."...D.D.
 80a345c:	0000 0000 0000 7820 a0a0 2870 2828 20f0     ...... x..p(((. 
 80a346c:	0020 0002 0066 0094 009c 0068 001b 8014      ...f.....h.....
 80a347c:	8034 0023 0000 0000 0000 1800 3028 d474     4.#.........(0t.
 80a348c:	888c 0074 0000 8000 8080 0000 0000 0000     ..t.............
 80a349c:	0000 4020 8040 8080 8080 4080 0020 4080     .. @@......@ ..@
 80a34ac:	2040 2020 2020 4020 0080 2000 70f8 00d0     @      @... .p..
	...
 80a34c4:	2000 f820 2020 0000 0000 0000 0000 0000     .  .  ..........
 80a34d4:	0000 8040 0000 0000 0000 0000 00e0 0000     ..@.............
	...
 80a34ec:	0000 0080 0000 1008 1010 4020 8040 0080     .......... @@...
 80a34fc:	0000 7000 8888 8888 8888 0070 0000 4000     ...p......p....@
 80a350c:	40c0 4040 4040 00e0 0000 7000 0888 2010     .@@@@@.....p... 
 80a351c:	8040 00f8 0000 7000 0888 0870 8808 0070     @......p..p...p.
 80a352c:	0000 0800 2818 4828 08fc 0008 0000 f800     .....((H........
 80a353c:	f080 0888 8808 0070 0000 1000 4020 88f0     ......p..... @..
 80a354c:	8888 0070 0000 fc00 1008 2010 2020 0040     ..p........   @.
 80a355c:	0000 7000 8888 8870 8888 0070 0000 7000     ...p..p...p....p
 80a356c:	8888 7888 2010 00c0 0000 0000 8000 0000     ...x. ..........
 80a357c:	8000 0000 0000 0000 4000 0000 0000 8040     .........@....@.
 80a358c:	0000 0000 2000 8040 2040 0000 0000 0000     ..... @.@ ......
 80a359c:	f000 0000 00f0 0000 0000 0000 8000 2040     ..............@ 
 80a35ac:	8040 0000 0000 f000 0808 2010 0040 0040     @.......... @.@.
 80a35bc:	0000 003e 0041 809c 80b6 80a6 009b 0080     ..>.A...........
 80a35cc:	0041 003e 0000 0000 0000 0800 1408 3c24     A.>...........$<
 80a35dc:	4244 0082 0000 f000 8888 f090 8888 00f0     DB..............
 80a35ec:	0000 1c00 4024 8080 8480 0078 0000 c000     ....$@....x.....
 80a35fc:	88b0 8484 8884 00f0 0000 f800 8080 80f8     ................
 80a360c:	8080 00f8 0000 f800 8080 80f0 8080 0080     ................
 80a361c:	0000 1c00 4022 be80 8482 0078 0000 8400     ...."@....x.....
 80a362c:	8484 84fc 8484 0084 0000 f800 2020 2020     ............    
 80a363c:	2020 00f8 0000 3e00 0808 0808 8888 0078       .....>......x.
 80a364c:	0000 8800 a090 c0c0 90a0 0088 0000 8000     ................
 80a365c:	8080 8080 8080 00f0 0000 0000 0022 0022     ............".".
 80a366c:	0022 0055 0055 0055 8088 8088 0000 0000     ".U.U.U.........
 80a367c:	0000 8200 a2c2 92a2 868a 0082 0000 3c00     ...............<
 80a368c:	8242 8282 8482 0078 0000 e000 9090 9090     B.....x.........
 80a369c:	80e0 0080 0000 3c00 8142 8181 4a91 033e     .......<B....J>.
 80a36ac:	0001 e000 9090 e090 90a0 0088 0000 3c00     ...............<
 80a36bc:	4040 0438 8404 0078 0000 fe00 1010 1010     @@8...x.........
 80a36cc:	1010 0010 0000 8400 8484 8484 8484 0078     ..............x.
 80a36dc:	0000 8800 8888 5050 5050 0020 0000 0000     ......PPPP .....
 80a36ec:	2084 2084 404a 404a 8052 8052 8022 0021     . . J@J@R.R.".!.
 80a36fc:	0000 0000 0000 8200 2844 1010 4428 0082     ........D(..(D..
 80a370c:	0000 8400 4848 3028 2010 0020 0000 fe00     ....HH(0.  .....
 80a371c:	0804 2010 8040 00fe 0000 80e0 8080 8080     ... @...........
 80a372c:	8080 8080 00e0 8000 4080 2040 2020 1010     .........@@   ..
 80a373c:	0000 20e0 2020 2020 2020 2020 00e0 6060     ...         ..``
 80a374c:	0090 0000 0000 0000 0000 0000 0000 0000     ................
 80a375c:	0000 0000 00fe 4080 0000 0000 0000 0000     .......@........
 80a376c:	0000 0000 3800 8848 8888 0074 0000 8080     .....8H...t.....
 80a377c:	f080 8888 8888 00f0 0000 0000 3000 8048     .............0H.
 80a378c:	8880 0070 0000 0808 7808 8888 8888 0078     ..p......x....x.
 80a379c:	0000 0000 7000 9088 88e0 0070 0000 2018     .....p....p.... 
 80a37ac:	f820 2020 2020 0020 0000 0000 3000 8848      .     ......0H.
 80a37bc:	8888 0878 e010 8080 b080 88c8 8888 0088     ..x.............
 80a37cc:	0000 8000 8000 8080 8080 0080 0000 1000     ................
 80a37dc:	1000 1010 1010 1010 6090 8080 8880 a090     .........`......
 80a37ec:	90e0 0088 0000 8080 8080 8080 8080 0080     ................
 80a37fc:	0000 0000 a400 92da 9292 0092 0000 0000     ................
 80a380c:	b000 88c8 8888 0088 0000 0000 7000 8888     .............p..
 80a381c:	8888 0070 0000 0000 f000 8888 8888 80f0     ..p.............
 80a382c:	8080 0000 3800 8848 8888 0878 0808 0000     .....8H...x.....
 80a383c:	e000 80a0 8080 0080 0000 0000 7000 4080     .............p.@
 80a384c:	1020 00e0 0000 4000 e040 4040 4040 0040      ......@@.@@@@@.
 80a385c:	0000 0000 8800 8888 8888 0078 0000 0000     ..........x.....
 80a386c:	8800 5088 2050 0020 0000 0000 9200 b492     ...PP  .........
 80a387c:	54b4 0048 0000 0000 8400 3048 4830 0084     .TH.......H00H..
 80a388c:	0000 0000 8400 4888 3050 2020 4040 0000     .......HP0  @@..
 80a389c:	f000 2010 8040 00f0 0000 4030 4040 c040     ... @.....0@@@@.
 80a38ac:	4040 4040 0030 8080 8080 8080 8080 8080     @@@@0...........
 80a38bc:	0080 20c0 2020 3020 2020 2020 00c0 0000     ...    0    ....
 80a38cc:	6400 98e4 0000 0000 0000                    .d........

080a38d6 <comicSansMS_8ptDescriptors>:
 80a38d6:	0c02 0000 0c01 000c 0c03 0018 0c09 0024     ..............$.
 80a38e6:	0c05 003c 0c09 0048 0c06 0060 0c01 006c     ..<...H...`...l.
 80a38f6:	0c03 0078 0c03 0084 0c05 0090 0c05 009c     ..x.............
 80a3906:	0c02 00a8 0c03 00b4 0c01 00c0 0c05 00cc     ................
 80a3916:	0c05 00d8 0c03 00e4 0c05 00f0 0c05 00fc     ................
 80a3926:	0c06 0108 0c05 0114 0c05 0120 0c06 012c     .......... ...,.
 80a3936:	0c05 0138 0c05 0144 0c01 0150 0c02 015c     ..8...D...P...\.
 80a3946:	0c03 0168 0c04 0174 0c03 0180 0c05 018c     ..h...t.........
 80a3956:	0c09 0198 0c07 01b0 0c05 01bc 0c06 01c8     ................
 80a3966:	0c06 01d4 0c05 01e0 0c05 01ec 0c07 01f8     ................
 80a3976:	0c06 0204 0c05 0210 0c07 021c 0c05 0228     ..............(.
 80a3986:	0c04 0234 0c09 0240 0c07 0258 0c07 0264     ..4...@...X...d.
 80a3996:	0c04 0270 0c08 027c 0c05 0288 0c06 0294     ..p...|.........
 80a39a6:	0c07 02a0 0c06 02ac 0c05 02b8 0c0b 02c4     ................
 80a39b6:	0c07 02dc 0c06 02e8 0c07 02f4 0c03 0300     ................
 80a39c6:	0c04 030c 0c03 0318 0c04 0324 0c07 0330     ..........$...0.
 80a39d6:	0c02 033c 0c06 0348 0c05 0354 0c05 0360     ..<...H...T...`.
 80a39e6:	0c05 036c 0c05 0378 0c05 0384 0c05 0390     ..l...x.........
 80a39f6:	0c05 039c 0c01 03a8 0c04 03b4 0c05 03c0     ................
 80a3a06:	0c01 03cc 0c07 03d8 0c05 03e4 0c05 03f0     ................
 80a3a16:	0c05 03fc 0c05 0408 0c03 0414 0c04 0420     .............. .
 80a3a26:	0c03 042c 0c05 0438 0c05 0444 0c07 0450     ..,...8...D...P.
 80a3a36:	0c06 045c 0c06 0468 0c04 0474 0c04 0480     ..\...h...t.....
 80a3a46:	0c01 048c 0c04 0498 0c06 04a4               ............

080a3a52 <centuryGothic_8ptDescriptors>:
 80a3a52:	0b02 0000 0b01 000b 0b03 0016 0b06 0021     ..............!.
 80a3a62:	0b05 002c 0b08 0037 0b07 0042 0b01 004d     ..,...7...B...M.
 80a3a72:	0b02 0058 0b02 0063 0b03 006e 0b05 0079     ..X...c...n...y.
 80a3a82:	0b02 0084 0b03 008f 0b01 009a 0b04 00a5     ................
 80a3a92:	0b05 00b0 0b02 00bb 0b05 00c6 0b05 00d1     ................
 80a3aa2:	0b06 00dc 0b05 00e7 0b05 00f2 0b05 00fd     ................
 80a3ab2:	0b05 0108 0b05 0113 0b01 011e 0b02 0129     ..............).
 80a3ac2:	0b06 0134 0b06 013f 0b06 014a 0b05 0155     ..4...?...J...U.
 80a3ad2:	0b09 0160 0b07 0176 0b04 0181 0b07 018c     ..`...v.........
 80a3ae2:	0b06 0197 0b05 01a2 0b04 01ad 0b08 01b8     ................
 80a3af2:	0b06 01c3 0b01 01ce 0b04 01d9 0b05 01e4     ................
 80a3b02:	0b04 01ef 0b09 01fa 0b06 0210 0b08 021b     ................
 80a3b12:	0b05 0226 0b08 0231 0b05 023c 0b04 0247     ..&...1...<...G.
 80a3b22:	0b05 0252 0b06 025d 0b07 0268 0b09 0273     ..R...]...h...s.
 80a3b32:	0b05 0289 0b07 0294 0b05 029f 0b02 02aa     ................
 80a3b42:	0b06 02b5 0b02 02c0 0b07 02cb 0b06 02d6     ................
 80a3b52:	0b02 02e1 0b07 02ec 0b07 02f7 0b06 0302     ................
 80a3b62:	0b07 030d 0b06 0318 0b03 0323 0b06 032e     ..........#.....
 80a3b72:	0b06 0339 0b01 0344 0b02 034f 0b04 035a     ..9...D...O...Z.
 80a3b82:	0b01 0365 0b09 0370 0b06 0386 0b06 0391     ..e...p.........
 80a3b92:	0b07 039c 0b07 03a7 0b03 03b2 0b03 03bd     ................
 80a3ba2:	0b03 03c8 0b06 03d3 0b07 03de 0b09 03e9     ................
 80a3bb2:	0b05 03ff 0b05 040a 0b05 0415 0b03 0420     .............. .
 80a3bc2:	0b01 042b 0b03 0436 0b06 0441               ..+...6...A.

080a3bce <glcdfontDescriptors>:
 80a3bce:	0805 0000 0805 0008 0805 0010 0805 0018     ................
 80a3bde:	0805 0020 0805 0028 0805 0030 0805 0038     .. ...(...0...8.
 80a3bee:	0805 0040 0805 0048 0805 0050 0805 0058     ..@...H...P...X.
 80a3bfe:	0805 0060 0805 0068 0805 0070 0805 0078     ..`...h...p...x.
 80a3c0e:	0805 0080 0805 0088 0805 0090 0805 0098     ................
 80a3c1e:	0805 00a0 0805 00a8 0805 00b0 0805 00b8     ................
 80a3c2e:	0805 00c0 0805 00c8 0805 00d0 0805 00d8     ................
 80a3c3e:	0805 00e0 0805 00e8 0805 00f0 0805 00f8     ................
 80a3c4e:	0805 0100 0805 0108 0805 0110 0805 0118     ................
 80a3c5e:	0805 0120 0805 0128 0805 0130 0805 0138     .. ...(...0...8.
 80a3c6e:	0805 0140 0805 0148 0805 0150 0805 0158     ..@...H...P...X.
 80a3c7e:	0805 0160 0805 0168 0805 0170 0805 0178     ..`...h...p...x.
 80a3c8e:	0805 0180 0805 0188 0805 0190 0805 0198     ................
 80a3c9e:	0805 01a0 0805 01a8 0805 01b0 0805 01b8     ................
 80a3cae:	0805 01c0 0805 01c8 0805 01d0 0805 01d8     ................
 80a3cbe:	0805 01e0 0805 01e8 0805 01f0 0805 01f8     ................
 80a3cce:	0805 0200 0805 0208 0805 0210 0805 0218     ................
 80a3cde:	0805 0220 0805 0228 0805 0230 0805 0238     .. ...(...0...8.
 80a3cee:	0805 0240 0805 0248 0805 0250 0805 0258     ..@...H...P...X.
 80a3cfe:	0805 0260 0805 0268 0805 0270 0805 0278     ..`...h...p...x.
 80a3d0e:	0805 0280 0805 0288 0805 0290 0805 0298     ................
 80a3d1e:	0805 02a0 0805 02a8 0805 02b0 0805 02b8     ................
 80a3d2e:	0805 02c0 0805 02c8 0805 02d0 0805 02d8     ................
 80a3d3e:	0805 02e0 0805 02e8 0805 02f0 0805 02f8     ................
 80a3d4e:	0805 0300 0805 0308 0805 0310 0805 0318     ................
 80a3d5e:	0805 0320 0805 0328 0805 0330 0805 0338     .. ...(...0...8.
 80a3d6e:	0805 0340 0805 0348 0805 0350 0805 0358     ..@...H...P...X.
 80a3d7e:	0805 0360 0805 0368 0805 0370 0805 0378     ..`...h...p...x.
 80a3d8e:	0805 0380 0805 0388 0805 0390 0805 0398     ................
 80a3d9e:	0805 03a0 0805 03a8 0805 03b0 0805 03b8     ................
 80a3dae:	0805 03c0 0805 03c8 0805 03d0 0805 03d8     ................
 80a3dbe:	0805 03e0 0805 03e8 0805 03f0 0805 03f8     ................
 80a3dce:	0805 0400 0805 0408 0805 0410 0805 0418     ................
 80a3dde:	0805 0420 0805 0428 0805 0430 0805 0438     .. ...(...0...8.
 80a3dee:	0805 0440 0805 0448 0805 0450 0805 0458     ..@...H...P...X.
 80a3dfe:	0805 0460 0805 0468 0805 0470 0805 0478     ..`...h...p...x.
 80a3e0e:	0805 0480 0805 0488 0805 0490 0805 0498     ................
 80a3e1e:	0805 04a0 0805 04a8 0805 04b0 0805 04b8     ................
 80a3e2e:	0805 04c0 0805 04c8 0805 04d0 0805 04d8     ................
 80a3e3e:	0805 04e0 0805 04e8 0805 04f0 0805 04f8     ................
 80a3e4e:	0805 0500 0805 0508 0805 0510 0805 0518     ................
 80a3e5e:	0805 0520 0805 0528 0805 0530 0805 0538     .. ...(...0...8.
 80a3e6e:	0805 0540 0805 0548 0805 0550 0805 0558     ..@...H...P...X.
 80a3e7e:	0805 0560 0805 0568 0805 0570 0805 0578     ..`...h...p...x.
 80a3e8e:	0805 0580 0805 0588 0805 0590 0805 0598     ................
 80a3e9e:	0805 05a0 0805 05a8 0805 05b0 0805 05b8     ................
 80a3eae:	0805 05c0 0805 05c8 0805 05d0 0805 05d8     ................
 80a3ebe:	0805 05e0 0805 05e8 0805 05f0 0805 05f8     ................
 80a3ece:	0805 0600 0805 0608 0805 0610 0805 0618     ................
 80a3ede:	0805 0620 0805 0628 0805 0630 0805 0638     .. ...(...0...8.
 80a3eee:	0805 0640 0805 0648 0805 0650 0805 0658     ..@...H...P...X.
 80a3efe:	0805 0660 0805 0668 0805 0670 0805 0678     ..`...h...p...x.
 80a3f0e:	0805 0680 0805 0688 0805 0690 0805 0698     ................
 80a3f1e:	0805 06a0 0805 06a8 0805 06b0 0805 06b8     ................
 80a3f2e:	0805 06c0 0805 06c8 0805 06d0 0805 06d8     ................
 80a3f3e:	0805 06e0 0805 06e8 0805 06f0 0805 06f8     ................
 80a3f4e:	0805 0700 0805 0708 0805 0710 0805 0718     ................
 80a3f5e:	0805 0720 0805 0728 0805 0730 0805 0738     .. ...(...0...8.
 80a3f6e:	0805 0740 0805 0748 0805 0750 0805 0758     ..@...H...P...X.
 80a3f7e:	0805 0760 0805 0768 0805 0770 0805 0778     ..`...h...p...x.
 80a3f8e:	0805 0780 0805 0788 0805 0790 0805 0798     ................
 80a3f9e:	0805 07a0 0805 07a8 0805 07b0 0805 07b8     ................
 80a3fae:	0805 07c0 0805 07c8 0805 07d0 0805 07d8     ................
 80a3fbe:	0805 07e0 0805 07e8 0805 07f0 0805 07f8     ................

080a3fce <timesNewRoman_8ptDescriptors>:
 80a3fce:	0c02 0000 0c01 000c 0c03 0018 0c06 0024     ..............$.
 80a3fde:	0c05 0030 0c09 003c 0c08 0054 0c01 0060     ..0...<...T...`.
 80a3fee:	0c03 006c 0c03 0078 0c05 0084 0c05 0090     ..l...x.........
 80a3ffe:	0c02 009c 0c03 00a8 0c01 00b4 0c03 00c0     ................
 80a400e:	0c05 00cc 0c03 00d8 0c05 00e4 0c05 00f0     ................
 80a401e:	0c05 00fc 0c05 0108 0c05 0114 0c05 0120     .............. .
 80a402e:	0c05 012c 0c05 0138 0c01 0144 0c02 0150     ..,...8...D...P.
 80a403e:	0c05 015c 0c05 0168 0c05 0174 0c04 0180     ..\...h...t.....
 80a404e:	0c09 018c 0c07 01a4 0c06 01b0 0c06 01bc     ................
 80a405e:	0c07 01c8 0c06 01d4 0c06 01e0 0c07 01ec     ................
 80a406e:	0c07 01f8 0c03 0204 0c04 0210 0c08 021c     ................
 80a407e:	0c06 0228 0c09 0234 0c07 024c 0c07 0258     ..(...4...L...X.
 80a408e:	0c06 0264 0c07 0270 0c07 027c 0c04 0288     ..d...p...|.....
 80a409e:	0c07 0294 0c07 02a0 0c07 02ac 0c0b 02b8     ................
 80a40ae:	0c07 02d0 0c07 02dc 0c06 02e8 0c03 02f4     ................
 80a40be:	0c03 0300 0c03 030c 0c04 0318 0c06 0324     ..............$.
 80a40ce:	0c02 0330 0c05 033c 0c05 0348 0c04 0354     ..0...<...H...T.
 80a40de:	0c05 0360 0c04 036c 0c05 0378 0c05 0384     ..`...l...x.....
 80a40ee:	0c06 0390 0c03 039c 0c03 03a8 0c05 03b4     ................
 80a40fe:	0c03 03c0 0c09 03cc 0c06 03e4 0c05 03f0     ................
 80a410e:	0c05 03fc 0c05 0408 0c04 0414 0c03 0420     .............. .
 80a411e:	0c03 042c 0c06 0438 0c06 0444 0c08 0450     ..,...8...D...P.
 80a412e:	0c05 045c 0c06 0468 0c05 0474 0c03 0480     ..\...h...t.....
 80a413e:	0c01 048c 0c03 0498 0c05 04a4               ............

080a414a <timesNewRoman_8ptBitmaps>:
 80a414a:	7f20 0000 0000 0000 0000 0000 0000 8000      ...............
 80a415a:	8080 8080 0080 0080 0000 a000 a0a0 0000     ................
 80a416a:	0000 0000 0000 2400 4824 48fc 90fc 0090     .......$$H.H....
 80a417a:	0000 7020 a0a8 3060 a828 2070 0000 0000     .. p..`0(.p ....
 80a418a:	0041 00a2 00a4 0048 0009 8012 8022 0041     A.....H.....".A.
 80a419a:	0000 0000 0000 1c00 2824 d233 8994 0076     ........$(3...v.
 80a41aa:	0000 8000 8080 0000 0000 0000 0000 2000     ............... 
 80a41ba:	8040 8080 8080 4080 0020 8000 2040 2020     @......@ ...@   
 80a41ca:	2020 4020 0080 2000 70a8 20a8 0000 0000        @... .p. ....
 80a41da:	0000 0000 2000 f820 2020 0000 0000 0000     .....  .  ......
 80a41ea:	0000 0000 0000 40c0 0080 0000 0000 0000     .......@........
 80a41fa:	00e0 0000 0000 0000 0000 0000 0000 0080     ................
 80a420a:	0000 2000 4020 4040 8040 0080 0000 7000     ...  @@@@......p
 80a421a:	8888 8888 8888 0070 0000 c000 4040 4040     ......p.....@@@@
 80a422a:	4040 00e0 0000 7000 0888 1008 4820 00f8     @@.....p.... H..
 80a423a:	0000 7000 0888 0830 0808 00f0 0000 1000     ...p..0.........
 80a424a:	5030 9050 10f8 0010 0000 3800 6040 0810     0PP........8@`..
 80a425a:	0808 00f0 0000 1800 4060 c8b0 8888 0070     ........`@....p.
 80a426a:	0000 7800 0888 1010 2010 0020 0000 7000     ...x.....  ....p
 80a427a:	8888 5070 8888 0070 0000 7000 8888 7888     ..pP..p....p...x
 80a428a:	3010 00c0 0000 0000 0000 0080 0000 0080     .0..............
 80a429a:	0000 0000 0000 0080 0000 40c0 0080 0000     ...........@....
 80a42aa:	0800 8070 0870 0000 0000 0000 0000 00f8     ..p.p...........
 80a42ba:	00f8 0000 0000 0000 8000 0870 8070 0000     ..........p.p...
 80a42ca:	0000 6000 1090 4020 0040 0040 0000 0000     ...`.. @@.@.....
 80a42da:	001e 0021 804e 8092 80a4 80a4 00a7 0098     ..!.N...........
 80a42ea:	8040 0021 001e 1000 2810 2828 447c 00ee     @.!......(((|D..
 80a42fa:	0000 f800 4444 4478 4444 00f8 0000 3c00     ....DDxDDD.....<
 80a430a:	8044 8080 4480 0038 0000 f800 4244 4242     D....D8.....DBBB
 80a431a:	4442 00f8 0000 fc00 5044 5070 4440 00fc     BD......DPpP@D..
 80a432a:	0000 fc00 5044 5070 4040 00e0 0000 3c00     ....DPpP@@.....<
 80a433a:	8044 8e80 4484 0038 0000 ee00 4444 447c     D....D8.....DD|D
 80a434a:	4444 00ee 0000 e000 4040 4040 4040 00e0     DD......@@@@@@..
 80a435a:	0000 7000 2020 2020 2020 00c0 0000 ee00     ...p      ......
 80a436a:	5048 5060 4448 00ef 0000 e000 4040 4040     HP`PHD......@@@@
 80a437a:	4440 00fc 0000 0000 80e3 0063 0063 0055     @D........c.c.U.
 80a438a:	0055 0055 0049 80eb 0000 0000 0000 ce00     U.U.I...........
 80a439a:	6444 5454 444c 00e4 0000 3800 8244 8282     DdTTLD.....8D...
 80a43aa:	4482 0038 0000 f800 4444 7844 4040 00e0     .D8.....DDDx@@..
 80a43ba:	0000 3800 8244 8282 4482 0838 0006 f800     ...8D....D8.....
 80a43ca:	4444 5078 4848 00e6 0000 7000 8090 2040     DDxPHH.....p..@ 
 80a43da:	9010 00e0 0000 fe00 1092 1010 1010 0038     ..............8.
 80a43ea:	0000 ee00 4444 4444 4444 0038 0000 ee00     ....DDDDDD8.....
 80a43fa:	4444 2828 1028 0010 0000 0000 e0ee 4044     DD(((.........D@
 80a440a:	4044 8024 802a 802a 0011 0011 0000 0000     D@$.*.*.........
 80a441a:	0000 ee00 2844 1010 4428 00ee 0000 ee00     ....D(..(D......
 80a442a:	2844 1028 1010 0038 0000 fc00 1088 2020     D((...8.......  
 80a443a:	8440 00fc 0000 e000 8080 8080 8080 8080     @...............
 80a444a:	00e0 8000 4080 4040 2040 0020 0000 e000     .....@@@@  .....
 80a445a:	2020 2020 2020 2020 00e0 6000 9060 0090             ...``...
	...
 80a447a:	00fc 8000 0040 0000 0000 0000 0000 0000     ....@...........
 80a448a:	0000 1060 9070 0078 0000 c000 4040 4870     ..`.p.x.....@@pH
 80a449a:	4848 0030 0000 0000 0000 9070 8080 0070     HH0.......p...p.
 80a44aa:	0000 3000 1010 9070 9090 0078 0000 0000     ...0..p...x.....
 80a44ba:	0000 9060 80f0 0070 0000 3800 4048 40e0     ..`...p....8H@.@
 80a44ca:	4040 00e0 0000 0000 0000 9078 8060 88f0     @@........x.`...
 80a44da:	0070 c000 4040 6858 4848 00ec 0000 4000     p...@@XhHH.....@
 80a44ea:	0000 40c0 4040 00e0 0000 2000 0000 2060     ...@@@..... ..` 
 80a44fa:	2020 2020 00c0 c000 4040 5058 5060 00d8         ....@@XP`P..
 80a450a:	0000 c000 4040 4040 4040 00e0 0000 0000     ....@@@@@@......
 80a451a:	0000 0000 0000 00db 006d 0049 0049 80ed     ........m.I.I...
	...
 80a4532:	0000 68d8 4848 00ec 0000 0000 0000 8870     ...hHH........p.
 80a4542:	8888 0070 0000 0000 0000 48f0 4848 4070     ..p........HHHp@
 80a4552:	00e0 0000 0000 9070 9090 1070 0038 0000     ......p...p.8...
 80a4562:	0000 60d0 4040 00e0 0000 0000 0000 8060     ...`@@........`.
 80a4572:	2060 00c0 0000 0000 4040 40e0 4040 0060     ` ......@@.@@@`.
 80a4582:	0000 0000 0000 48d8 4848 003c 0000 0000     .......HHH<.....
 80a4592:	0000 48dc 2050 0020 0000 0000 0000 4adb     ...HP  ........J
 80a45a2:	245a 0024 0000 0000 0000 50d8 5020 00d8     Z$$........P P..
 80a45b2:	0000 0000 0000 48dc 3050 2020 00c0 0000     .......HP0  ....
 80a45c2:	0000 90f8 4820 00f8 0000 2000 4040 8040     .... H..... @@@.
 80a45d2:	4040 4040 0020 8000 8080 8080 8080 8080     @@@@ ...........
 80a45e2:	0080 8000 4040 2040 4040 4040 0080 0000     ....@@@ @@@@....
 80a45f2:	0000 e800 00b8 0000 0000                    ..........

080a45fc <_ZTV7TwoWire>:
	...
 80a4604:	10ab 080a 10f5 080a 10cd 080a 10ad 080a     ................
 80a4614:	10d5 080a 10dd 080a 10e5 080a 10ed 080a     ................

080a4624 <_ZTV9IPAddress>:
	...
 80a462c:	1141 080a 1131 080a 1133 080a 6162 6475     A...1...3...baud
 80a463c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a464c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a465c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a466c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a467c:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a468c:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a469c:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a46ac:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a46bc:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a46cc:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a46dc:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a46ec:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a46fc:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a470c:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a471c <_ZTVN5spark12NetworkClassE>:
	...
 80a4724:	1209 080a 1213 080a 121d 080a 1227 080a     ............'...
 80a4734:	1231 080a 123d 080a 1249 080a 1255 080a     1...=...I...U...
 80a4744:	125d 080a 1267 080a 1271 080a               ]...g...q...

080a4750 <_ZTV8SPIClass>:
	...
 80a4758:	1517 080a 1519 080a                         ........

080a4760 <_ZL14clock_divisors>:
 80a4760:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a4770:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a4780:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a4790:	0000 0000                                   ....

080a4794 <_ZTV11USARTSerial>:
	...
 80a479c:	1769 080a 17b9 080a 17c7 080a 12d5 080a     i...............
 80a47ac:	177d 080a 179f 080a 178b 080a 17b3 080a     }...............
 80a47bc:	176b 080a 176f 080a                         k...o...

080a47c4 <_ZTV9USBSerial>:
	...
 80a47cc:	1871 080a 18c1 080a 18cf 080a 12d5 080a     q...............
 80a47dc:	18ad 080a 1873 080a 1889 080a 18bb 080a     ....s...........
 80a47ec:	189f 080a 186d 080a                         ....m...

080a47f4 <_ZTVN5spark9WiFiClassE>:
	...
 80a47fc:	1ab3 080a 1aa9 080a 1a9f 080a 1a11 080a     ................
 80a480c:	1a93 080a 1a87 080a 1a7b 080a 1a73 080a     ........{...s...
 80a481c:	1a69 080a 1a5f 080a 1a1b 080a               i..._.......

080a4828 <__sf_fake_stdin>:
	...

080a4848 <__sf_fake_stdout>:
	...

080a4868 <__sf_fake_stderr>:
	...
 80a4888:	0043                                        C.

080a488a <link_const_variable_data_end>:
	...

080a488c <link_constructors_location>:
 80a488c:	080a02e1 	.word	0x080a02e1
 80a4890:	080a0789 	.word	0x080a0789
 80a4894:	080a0c0b 	.word	0x080a0c0b
 80a4898:	080a0c0f 	.word	0x080a0c0f
 80a489c:	080a11f9 	.word	0x080a11f9
 80a48a0:	080a12c1 	.word	0x080a12c1
 80a48a4:	080a1405 	.word	0x080a1405
 80a48a8:	080a173d 	.word	0x080a173d
 80a48ac:	080a1755 	.word	0x080a1755
 80a48b0:	080a1abd 	.word	0x080a1abd
 80a48b4:	080a1d15 	.word	0x080a1d15
 80a48b8:	080a1d45 	.word	0x080a1d45
 80a48bc:	080a1d99 	.word	0x080a1d99
 80a48c0:	080a1e5d 	.word	0x080a1e5d
 80a48c4:	080a1ee1 	.word	0x080a1ee1
 80a48c8:	080a1f65 	.word	0x080a1f65

080a48cc <link_constructors_end>:
 80a48cc:	00000000 	.word	0x00000000
